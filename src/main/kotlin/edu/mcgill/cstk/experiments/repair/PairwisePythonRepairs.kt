package edu.mcgill.cstk.experiments.repair

// The following are length 20..40 Python statements with a human fix <=3 Levenshtein edits away
val invalidLexedPythonStatements = """
     NAME NAME . NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) [ NUMBER : NUMBER : NUMBER ]
NAME NAME . NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) [ NUMBER : NUMBER : NUMBER ]
{ STRING : NAME , STRING . NAME } . NAME ( NAME ) ( ) . NAME ( NAME )
{ STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : NAME }
NAME = NUMBER NEWLINE NAME = STRING + NAME NEWLINE NAME = NAME . NAME . NAME ( ( NAME ) ) = NAME )
NAME = NAME . NAME [ STRING ] NEWLINE NAME = NAME ( NAME ) NEWLINE NAME NAME . NAME == STRING : NEWLINE NAME = NAME . NAME ( STRING % NAME )
[ { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING , NUMBER } , { STRING : STRING , STRING , NUMBER } ]
{ STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : STRING } }
NAME { STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING ] , STRING : [ STRING , STRING ] }
from NAME . NAME import NAME ( ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME . NAME ( [ STRING , STRING , STRING ] ) NEWLINE NAME ( NAME . NAME ( ) )
NAME = NAME . NAME ( [ [ NUMBER , STRING ] , [ NUMBER , STRING ] ] ) NEWLINE NAME = NAME . NAME [ NUMBER ] . NAME ( ) NEWLINE NAME NAME == NAME
import NAME . NAME NEWLINE NAME = NAME . NAME . class ( ) NEWLINE NAME . NAME ( )
NAME = NAME if ( NAME . NAME ( NAME , NAME ) else NAME NAME . NAME ( NAME , NAME )
from NAME import * NEWLINE NAME = NAME ( ) NEWLINE NAME = NAME . NAME ( NAME . NAME ( STRING ) ) NEWLINE NAME NAME [ STRING ] [ STRING ] . NAME ( )
** NAME . NAME ( NAME , ( NAME , NAME ) ) NEWLINE NAME . NAME ( NAME , ( NAME , NAME ) ) NEWLINE NAME . NAME ( NAME , ( NAME , NAME ) ) **
NAME = NAME . NAME ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ]
NAME [ STRING ] = NAME [ STRING ] - NAME . NAME ( NUMBER , NUMBER , NUMBER ) )
import NAME ; NAME . NAME ( ) NEWLINE import NAME NEWLINE import NAME NEWLINE NAME NAME ( NAME . NAME )
NAME = STRING NEWLINE NAME = NAME . NAME ( NAME STRING , NAME ) NEWLINE NAME = [ STRING , STRING , STRING , STRING ] NEWLINE NAME = [ STRING , STRING , STRING , STRING ]
NAME = NAME . NAME ( NAME ) NEWLINE NAME ( STRING , NAME , STRING ) < NAME > NEWLINE NAME = NAME . NAME ( NAME == NAME )
NAME ( ( NAME ( NAME ) if STRING in NAME ( NAME ) else NAME ( NAME ) + STRING ) ) . NAME ( STRING ) . NAME ( STRING ) [ - NUMBER ] )
NAME = [ ( NUMBER , NAME ) ( NUMBER , NAME ) ] NEWLINE NAME = [ ( NUMBER , NAME , ( NUMBER , NAME ) , ( NUMBER , NAME ) ]
from NAME import NAME . NEWLINE NAME = NAME ( ) . NEWLINE NAME = NAME . NAME ( NAME , NAME ) .
NAME = NAME [ NAME . NAME ( NAME > NAME , NAME >= NAME , NAME <= NAME ] . NAME ( )
NAME = { ( STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] }
[ STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ,
NAME = { STRING : ( STRING , ) , STRING : ( STRING , STRING , ) , STRING : ( STRING , ) , STRING : STRING
NAME = [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ]
NAME = ( ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ,
>> > { STRING : [ { STRING : [ NUMBER , NUMBER , NUMBER ] } , { STRING : STRING } ] , STRING : { STRING : [ STRING , STRING , STRING ] } }
{ STRING : [ STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING ]
NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME = [ NAME NAME ]
{ STRING : [ NUMBER , NUMBER , NUMBER ] , NAME : { NUMBER , NUMBER , NUMBER ] }
NAME . NAME ( NAME ) . NAME ( NAME ( NAME . NAME == NAME , NAME . NAME == NAME ) . NAME ( )
NAME = NAME . NAME ( NAME = NAME , NAME = ( NAME , NAME ) ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME NAME [ STRING ] [ STRING ]
NAME = [ NAME ( NAME ) for NAME in NAME ( STRING . NAME ( NUMBER ) ) ) ]
import NAME NEWLINE from NAME import NAME NEWLINE NAME = NAME ( NAME = STRING , NAME = STRING , NAME = STRING ) **
from NAME . NAME import NAME NEWLINE NAME = NAME ( STRING , STRING ) NEWLINE NAME = NAME . NAME ( NAME = NAME ) ) NEWLINE NAME ( NAME )
[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] = NAME NAME
> NAME . NAME ( NAME . NAME . NAME ( ) , > NAME ( ( STRING ) ) , NAME . NAME )
NAME = [ STRING : STRING , NAME : { NAME : NUMBER , NAME : STRING } , { ... } ]
NAME ( NAME ( NAME ( NAME ( NAME ) [ : - NAME ] ) ) and NAME ( NAME ( NAME ( NAME ) [ NAME : ] ) )
[ [ NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] .
NAME NUMBER = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]
* { STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : STRING } *
[ STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING ]
NAME = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NAME NAME and NAME
NAME = { NAME : { STRING : NUMBER , STRING : NUMBER } NAME : { STRING : NUMBER , STRING : NUMBER } NAME : { STRING : NUMBER , STRING : NUMBER } }
[ NUMBER , NUMBER , NUMBER ] NEWLINE or NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }
import NAME . NAME as NAME NEWLINE for NAME in NAME NEWLINE NAME . NAME ( NAME [ NAME ] [ NUMBER ] , NAME [ NAME ] [ NUMBER ] )
NAME [ STRING ] = NAME [ STRING ] NEWLINE NAME = NAME . NAME [ NAME [ STRING ] > NUMBER , STRING ] ] = STRING
NAME = [ NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } ]
NAME = { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] , STRING : [ NUMBER , NUMBER ] } .
NAME [ NUMBER ] = NUMBER NEWLINE NAME [ NUMBER ] = NUMBER NEWLINE NAME [ NUMBER ] = NUMBER and NAME NAME
NAME = { NAME : STRING and STRING , NAME : STRING and STRING , NAME : STRING and STRING , NAME : STRING and STRING
{ STRING : { STRING : True , STRING : STRING , STRING : STRING , STRING : [ ] , STRING : NUMBER , STRING : STRING }
{ STRING : { STRING : { STRING : { STRING : [ STRING , STRING ] } , STRING : { STRING : [ STRING , STRING ] } } } ,
NAME . NAME . NAME ( { STRING : STRING } ) . NAME ( STRING ) . NAME ( NAME = NAME ( STRING ) ) NAME
NAME = [ [ STRING , STRING , NUMBER ] , [ STRING , STRING , NUMBER ] NAME [ STRING , STRING , - NUMBER ] ]
NAME : { STRING : { NAME : NUMBER , NAME : NUMBER } } , NEWLINE NAME : { STRING : { NAME : NUMBER } } }
NAME = [ { STRING : NUMBER , STRING : NUMBER } { STRING : NUMBER , STRING : NUMBER } ]
NAME . NAME ( lambda NAME , NAME : NUMBER if NAME . NAME < NAME . NAME else - NUMBER
NAME = NAME ( NUMBER : NUMBER ) NEWLINE NAME = [ NAME ( NAME ) for NAME in NAME ]
NAME = [ NAME , NAME , NAME , NAME ] NEWLINE class = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ]
NAME = [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING }
NAME = NAME ( STRING ) NEWLINE if NAME == NAME NEWLINE NAME ( STRING ) NEWLINE elif NAME == STRING NEWLINE NAME ( STRING ) NEWLINE else : NAME ( STRING )
NAME = [ { STRING : STRING , STRING : NUMBER } , [ STRING : STRING , STRING : NUMBER } ]
{ STRING : ( STRING : { STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING } ) }
NAME = [ { STRING : [ ( NAME , NAME ) , ( NAME , NAME ) ] , { STRING : [ ( NAME , NAME ) ] ,
NAME . NAME ( - NAME , NAME = STRING . NAME = STRING , NAME = NAME , NAME = STRING )
NAME = NAME . NAME ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) NAME . NAME ( )
{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : [ STRING , STRING ] STRING : STRING }
NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER NUMBER / NUMBER
NAME [ STRING ] = NAME [ STRING ] + STRING NAME [ STRING ] NEWLINE NAME = NAME . NAME ( NAME [ STRING ] )
> [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ]
NAME = { STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , }
NAME = NAME . NAME ( NAME ( NAME . NAME . NAME ( ) ) , NAME ) NEWLINE NAME = [ NAME . NAME . NAME ( ) [ NAME ] ) for NAME in NAME ]
NAME = STRING NEWLINE NAME = NAME . NAME ( STRING + NAME ) NEWLINE NAME = NAME . NAME ( STRING , STRING , STRING , STRING
NAME = [ { STRING : STRING , STRING : STRING , STRING : } , { } , { } , { } , ... ] NEWLINE
NAME [ NUMBER ] = NAME ( [ NAME . NAME for NAME in NAME if NAME . NAME == NAME [ NUMBER ] )
NAME = STRING NEWLINE NAME NAME . NAME ( NAME . NAME , NAME ) NEWLINE NAME NEWLINE ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING )
NAME = NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME NAME . NAME ( ) NEWLINE NAME . NAME ( NAME . NAME ( ) ) NEWLINE NAME . NAME ( )
NAME = NAME . NAME ( [ [ True , False , False , [ False , True , False ] ] )
NAME = { NUMBER : ( NUMBER , NUMBER ) NAME . NAME ( NAME [ NUMBER ] ) ;
[ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] .
[ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING , STRING } ]
NUMBER : NAME = { NAME : NAME for NAME , NAME in NAME . NAME ( ) NUMBER : if NAME in NAME }
NAME = { STRING : [ STRING , STRING ] STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE
NAME , NAME , NAME , NAME , NAME , NAME , NAME , NAME NEWLINE NAME , NAME , NAME , NAME , NAME , NAME , NAME , NAME NEWLINE NAME , NAME NEWLINE .
NAME = [ NAME ( NAME ( NAME , NUMBER ) for NAME in NAME ] NAME = STRING . NAME ( NAME )
NAME = NAME ( [ [ NUMBER , NUMBER , STRING ] , [ NUMBER , NUMBER , STRING ] ) NAME = NAME ( [ NAME , NAME , NAME ] )
NAME ( NAME , NAME , NAME , NAME , NUMBER , NAME , NUMBER ) ; // NAME ( NAME , NAME , NAME , NAME , NUMBER ) ;
[ [ NUMBER , NUMBER , [ NAME , NAME , NAME , NAME ] , [ NUMBER , NUMBER , [ NAME , NAME , NAME , NAME ] , ... ]
NAME = / NAME / NEWLINE NAME = NAME NEWLINE NAME = ( NAME + STRING + NAME + ( STRING or STRING ) )
NAME . NAME ( lambda NAME : NAME if NAME > NUMBER else None , NUMBER , NAME . NAME ( NUMBER )
NAME = NAME . NAME ( ) . NAME ( lambda NAME : ( NAME [ NUMBER ] , NAME [ NUMBER ] ) ) ) NEWLINE NAME . NAME ( )
NAME . NAME . NAME ( NAME = NAME ( NAME . NAME . NAME ( class = NAME ( STRING ) ) . NAME ( NAME = NAME ) ) )
NAME NAME NEWLINE NAME = NAME ( STRING , STRING ) NEWLINE NAME . NAME ( NAME ) NEWLINE NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( STRING ) NEWLINE NAME . NAME ( )
NAME = NAME . NAME ( NAME [ : , NUMBER ] , NAME [ : , NUMBER ] , NAME [ : , NUMBER ] ) NEWLINE NAME = NAME ( NAME ( NUMBER ) , NAME ) )
NAME = NAME . NAME ( NAME ( NAME ) NAME = ( NAME . NAME != STRING ) )
NAME = { STRING : [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , STRING : [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]
NUMBER NAME . NAME NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE ... NEWLINE NUMBER NAME . NAME NEWLINE NAME
NAME [ ] NEWLINE NAME . NAME ( ( NUMBER , NUMBER , NUMBER ) ) NEWLINE NAME . NAME ( ( NUMBER , NUMBER , NUMBER ) )
[ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] ]
NAME [ STRING ] = NAME . NAME ( [ STRING , STRING ] [ NAME ] . NAME ( NAME )
NAME = [ ] NEWLINE [ NAME . NAME ( NAME ) for NAME , NAME in NAME . NAME ( ) if
{ STRING : [ STRING , STRING : [ STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] }
[ NUMBER , NUMBER , NUMBER , NUMBER ] , NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ] , NEWLINE ]
NAME = [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] NAME ]
NEWLINE NAME = NAME . NAME [ : , STRING ] == NAME NEWLINE NAME [ [ NAME , : ] = NAME . NAME [ NAME , : ]
{ STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : { STRING : STRING } } , ... }
import NAME NEWLINE NAME = NAME . NAME ( STRING ) NEWLINE NAME = [ ] NEWLINE NAME NAME NEWLINE NAME . NAME ( NAME , NAME )
NAME = NAME . NAME ( NAME , NUMBER ) or NAME . NAME ( NAME , NUMBER ) , NAME ...
import NAME NEWLINE from NAME . NAME . NAME NEWLINE NAME = NAME . NAME ( STRING , STRING , STRING ) NEWLINE NAME = NAME . NAME ( ) NEWLINE
NAME = { STRING : NUMBER STRING : STRING , STRING : NUMBER , STRING : NUMBER } NEWLINE NAME = { STRING : NUMBER STRING : STRING , STRING : NUMBER , STRING : NUMBER }
[ { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ]
NAME . NAME . NAME ( NAME ( NAME = STRING ) ) NEWLINE NAME . NAME . NAME ( NAME ( NAME = STRING )
NAME = NAME ( lambda NAME : STRING . NAME ( NAME . NAME ( ) ) , NAME . NAME ) NEWLINE NAME = NAME ( NAME ( ) NAME , NAME )
NAME = NAME ( ( NAME , NAME ) , NAME = NUMBER ) NEWLINE or NEWLINE NAME = NAME ( ( NAME , NAME ) , NAME = NUMBER )
> NAME [ STRING ] = NAME . NAME . NAME ( lambda NAME : > NAME . NAME [ NAME ] [ STRING ] )
NAME = { STRING : STRING , STRING : [ { STRING : STRING } , { STRING : STRING } ]
NAME = [ ( STRING , NUMBER , STRING ) , ( STRING , NUMBER , STRING ) , STRING , NUMBER , STRING ) , ( STRING , NUMBER , STRING ) ]
import NAME NEWLINE import NAME NEWLINE NAME = STRING NEWLINE NAME = NAME . NAME ( NAME ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( NAME ( NAME )
NEWLINE NAME = { NAME : NUMBER NAME : lambda NAME : NAME / NUMBER NAME : lambda NAME : NAME } NEWLINE NAME = NAME . NAME ( NAME , NAME )
NAME = NAME . NAME ( { STRING : NAME , STRING : NAME } ) NEWLINE NAME = NAME . NAME ( STRING NAME ) NEWLINE NAME = NAME . NAME ( NAME )
NAME = NAME [ NAME [ STRING ] > NAME [ STRING ] ] NEWLINE NAME = NAME [ NAME [ STRING ] < NUMBER ] NEWLINE NAME = . NAME ( NAME = STRING , NAME = True )
NAME = NAME ( STRING , STRING ) NEWLINE NAME = [ { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER } ] NEWLINE NAME >> NAME , NAME *
NAME [ NUMBER ] NAME ( NAME ) NEWLINE NAME [ NUMBER ] : NUMBER NEWLINE NAME [ NUMBER ] NAME ( NAME ) NEWLINE NAME [ NUMBER ] : NUMBER
import NAME NEWLINE NAME NAME import NAME NEWLINE NAME = STRING NEWLINE NAME = NAME . NAME ( NAME ) NEWLINE NAME = NAME . NAME NEWLINE NAME = NAME ( NAME ) NEWLINE NAME ( NAME )
import NAME NEWLINE NAME = NAME ( NAME . NAME ( ) , NAME = NAME . NAME ( NUMBER ) ) .
NAME = [ { NUMBER : NAME , NUMBER : NAME } { NUMBER : NAME , NUMBER : NAME } { NUMBER : NAME , NUMBER : NAME } ]
NAME = NAME ( ) NEWLINE NAME = NAME ( NAME : False ) NEWLINE NAME = NAME ( NAME : STRING ) NEWLINE NAME = NAME ( NAME , NAME , NAME )
[ { STRING : STRING , STRING : STRING , { STRING : STRING , STRING : STRING , ]
NAME NAME , NAME , NAME , NAME , NAME - NAME , NAME , NAME , NAME , NAME NAME NAME ; NEWLINE
NAME = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]
NAME = NAME . NAME ( NAME , NAME = ( NUMBER : NUMBER ) , NAME = NAME )
NAME = NAME : // NAME . NAME . NAME . NAME / NAME / NAME / NUMBER / NUMBER / NAME . NAME
[ NAME ( NAME ) for NAME in ( ( NAME ( NAME * NUMBER ) . NAME ( NAME [ : NAME ] ) ) ]
NAME = NAME . NAME . NAME ( NAME = STRING ) . NAME ( NAME = NAME ( STRING ) ) . NAME ( STRING ) NAME ( STRING )
>> > NAME = { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING , NUMBER : STRING }
>> > NAME . NAME ( STRING , NAME . NAME ( ) , NAME = NUMBER , NAME = NUMBER ) NEWLINE [ STRING , STRING , STRING ]
NAME : { NAME : STRING , NAME : [ { NAME : STRING , NAME : NUMBER } { NAME : STRING , NAME : NUMBER } ] , NAME : STRING , }
NAME = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING STRING : STRING , }
{ STRING : STRING , STRING : STRING , STRING : [ { STRING : [ STRING ] } , STRING : STRING }
NAME [ STRING ] = NAME . NAME ( STRING [ STRING ] . NAME ( NAME . NAME ( NUMBER ) . NAME ( ) )
NAME = { STRING : STRING STRING : { STRING : STRING , STRING : STRING } , STRING : STRING STRING : NUMBER }
[ [ STRING , [ STRING , [ STRING , [ STRING ] , STRING ] ] , STRING , [ STRING ] ]
NAME = [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING ]
NAME = NAME ( STRING ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NAME ( NAME ) NEWLINE NAME ( STRING , NAME
import NAME . NAME NEWLINE NAME = [ STRING , STRING , STRING ] NEWLINE NAME . NAME . NAME ( STRING , NAME = { STRING : NAME )
NAME = NAME . NAME . NAME ( NAME = NUMBER , NAME = NUMBER ) NEWLINE NAME = NAME . NAME ( NAME . NAME ( ... ) . NAME ( STRING )
NAME = NAME , NAME = NAME , NAME = NUMBER , NAME = NUMBER , NAME = STRING ) NEWLINE
NAME NEWLINE NAME / NAME NAME NEWLINE NAME . NAME NEWLINE NAME . NAME NEWLINE NAME . NAME NEWLINE NAME . NAME
NAME = ( ( STRING , NUMBER ) , ( STRING : NUMBER ) , ( STRING : NUMBER ) ) NEWLINE NAME ( NAME )
NAME = [ NUMBER : [ NUMBER , NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] , ]
NAME . NAME == [ STRING ] NEWLINE NAME . NAME . NAME ( [ [ STRING ] ) NAME . NAME . NAME ( [ STRING ] )
NAME = { NUMBER , NUMBER , NUMBER , NUMBER } NEWLINE NAME = { NUMBER , NUMBER , NUMBER , NUMBER ]
from NAME . NAME import NAME NEWLINE NAME = NAME ( STRING ) NEWLINE NAME NAME [ STRING ] . NAME ( STRING )
NAME ( STRING ) NEWLINE NAME ( STRING ) NEWLINE NAME = NAME ( ) NAME NAME NAME NEWLINE NAME ( STRING + NAME )
NAME . NAME ( NAME : // NAME . NAME . NAME ) NEWLINE NAME . NAME . NAME ( STRING )
from NAME import NAME NEWLINE NAME = NAME . NAME . NAME ( STRING ) NEWLINE NAME . NAME . NAME ( % NAME )
NAME = { STRING : NUMBER } NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NAME ( [ NAME , ** NAME )
NAME = NAME ( STRING , NAME ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING , NAME ) ,
NAME = NAME . NAME . NAME ( NAME , STRING ) NEWLINE NAME = STRING NEWLINE NAME = ( NAME , ) NEWLINE NAME NAME NEWLINE NAME NAME NEWLINE NAME NAME
NAME = NAME . NAME ( [ STRING , STRING ) NAME = NAME . NAME ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )
{ STRING : { STRING : NUMBER } , STRING : { STRING : { STRING : { STRING : { STRING : STRING , STRING : STRING } } } }
NAME = [ NUMBER NUMBER , NUMBER , NUMBER NUMBER , NUMBER , NUMBER ] NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]
NAME = { STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , }
NAME = [ ( [ STRING ] , [ STRING ] ) , [ STRING ] , [ STRING ] ) ] NEWLINE NAME = [ STRING , STRING ]
NAME = NAME . NAME . NAME ( NAME . NAME , NAME . NAME , NAME . NAME . NAME ( STRING ) . NAME ( )
NAME = [ NAME ( NAME ) if NAME ( NAME ) % NUMBER == NUMBER for NAME in NAME ]
NAME = NAME . NAME ( NAME . NAME [ NAME , NAME , NUMBER , NAME ] , NAME = NAME ) )
NAME = NAME . NAME ( NAME , NAME = STRING , NAME = lambda : NAME ( NAME , NAME ) . NAME ( )
[ [ [ NAME ] , [ is ] ] , [ [ NAME ] , [ NAME ] ] , [ [ NAME ] , [ NAME ] ] ]
NAME = { NUMBER : [ NAME is NUMBER , NAME , NAME ] , NUMBER : [ NAME is NUMBER , NAME , NAME ]
def NAME ( NAME , NAME ) NEWLINE NAME * NAME NEWLINE NAME ( STRING , NUMBER ) NEWLINE >> > NAME
NAME . NAME . NAME ( NAME = NAME . NAME . NAME ( NAME = ( NAME , NAME ( NAME = NUMBER ) ) ) ) .
NAME = True ) NEWLINE NAME = NAME . NAME ( ) NEWLINE return NAME . NAME . NAME ( NAME , NAME = False )
NAME = [ STRING , STRING , STRING ] NEWLINE NAME , NAME , NAME = in . NAME ( NAME )
NAME = [ [ STRING , STRING , STRING ] NAME = [ [ STRING , STRING , STRING ]
NEWLINE import NAME NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NUMBER NEWLINE NAME . NAME ( ( STRING , NAME ) ) NEWLINE NAME NAME . NAME ( NUMBER ) NEWLINE NAME . NAME ( )
NAME = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] . [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ]
% NAME NAME NEWLINE NAME = NAME . NAME ( [ STRING ] ) [ STRING ] NEWLINE NAME . NAME ( ) . NAME ( NAME = STRING , NAME = NUMBER )
NAME NAME import * NEWLINE NAME = NAME ( ) NEWLINE NAME = NAME ( NAME , NAME = STRING , NAME = STRING )
= [ ( STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING ) , ( STRING , STRING ) , ( STRING ) ]
NAME = [ NAME as NAME in NAME if NAME [ NUMBER ] == NUMBER and NAME [ NUMBER ] == STRING ]
[ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] ]
STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , NAME : STRING , NEWLINE STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , NAME : STRING ,
NUMBER NAME = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]
( [ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) ] ,
NAME = NAME . NAME ( NAME . NAME . NAME ( STRING ) ) NEWLINE NAME = NAME . NAME ( NAME . NAME . NAME ( STRING )
[ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ]
NAME = NAME . NAME ( NAME . NAME ) NEWLINE NAME ( NAME ) NEWLINE NAME ( NAME ( NAME ) ) NAME , NAME is :
[ [ NAME , NAME , NUMBER ] , [ NAME , NAME , NUMBER ] , [ NAME , NAME , NUMBER ] , . . ] .
{ STRING : STRING , STRING : STRING , STRING : { STRING : STRING , STRING : STRING }
* from NAME . NAME import NAME NEWLINE NAME = NAME ( NAME ) NEWLINE NAME . NAME ( NAME , NAME ) *
{ NAME : { NAME : STRING , NAME : STRING } NAME : { NAME : STRING , NAME : STRING } }
> NAME = NAME ( STRING , STRING , NAME = STRING ) NEWLINE > NAME = NAME . NAME ( NAME ) NEWLINE > NAME ( NAME )
NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) . NAME ( ) NAME return [ NUMBER , NUMBER ]
[ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING ) , STRING , STRING ) ] 
  """.trimIndent()

val validLexedPythonStatements = """
     NAME . NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) [ NUMBER : NUMBER : NUMBER ]
NAME . NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) [ NUMBER : NUMBER : NUMBER ]
{ STRING : NAME , STRING : NAME } . NAME ( NAME ) ( ) . NAME ( NAME )
{ STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : STRING , STRING : STRING } , STRING : NAME }
NAME = NUMBER NEWLINE NAME = STRING + NAME NEWLINE NAME = NAME . NAME . NAME ( ( NAME ) = NAME )
NAME = NAME . NAME [ STRING ] NEWLINE NAME = NAME ( NAME ) NEWLINE if NAME . NAME == STRING : NAME = NAME . NAME ( STRING % NAME )
[ { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER } ]
{ STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } }
NAME = { STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING ] , STRING : [ STRING , STRING ] }
from NAME . NAME import NAME NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME . NAME ( [ STRING , STRING , STRING ] ) NEWLINE NAME ( NAME . NAME ( ) )
NAME = NAME . NAME ( [ [ NUMBER , STRING ] , [ NUMBER , STRING ] ] ) NEWLINE NAME = NAME . NAME [ NUMBER ] . NAME ( ) NEWLINE NAME ( NAME == NAME )
import NAME . NAME NEWLINE NAME = NAME . NAME . NAME ( ) NEWLINE NAME . NAME ( )
NAME = NAME if ( NAME . NAME ( NAME , NAME ) ) else NAME NEWLINE NAME . NAME ( NAME , NAME )
from NAME import * NEWLINE NAME = NAME ( ) NEWLINE NAME = NAME . NAME ( NAME . NAME ( STRING ) ) NEWLINE NAME ( NAME [ STRING ] [ STRING ] . NAME ( ) )
NAME . NAME ( NAME , ( NAME , NAME ) ) NEWLINE NAME . NAME ( NAME , ( NAME , NAME ) ) NEWLINE NAME . NAME ( NAME , ( NAME , NAME ) )
NAME = NAME . NAME ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] )
NAME [ STRING ] = NAME [ STRING ] - NAME . NAME ( NUMBER , NUMBER , NUMBER ) ( )
import NAME ; NAME . NAME ( ) NEWLINE import NAME NEWLINE import NAME NEWLINE NAME . NAME ( NAME . NAME )
NAME = STRING NEWLINE NAME = NAME . NAME ( STRING , NAME ) NEWLINE NAME = [ STRING , STRING , STRING , STRING ] NEWLINE NAME = [ STRING , STRING , STRING , STRING ]
NAME = NAME . NAME ( NAME ) NEWLINE NAME ( STRING , NAME , STRING ) < NAME NEWLINE NAME = NAME . NAME ( NAME == NAME )
NAME ( ( NAME ( NAME ) if STRING in NAME ( NAME ) else NAME ( NAME ) + STRING ) . NAME ( STRING ) . NAME ( STRING ) [ - NUMBER ] )
NAME = [ ( NUMBER , NAME ) ( NUMBER , NAME ) ] NEWLINE NAME = [ ( NUMBER , ) , ( NUMBER , NAME ) , ( NUMBER , NAME ) ]
from NAME import NAME NEWLINE NAME = NAME ( ) NEWLINE NAME = NAME . NAME ( NAME , NAME )
NAME = NAME [ NAME . NAME ( NAME > NAME , NAME >= NAME , NAME <= NAME ) ] . NAME ( )
NAME = { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] }
[ STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , ]
NAME = { STRING : ( STRING , ) , STRING : ( STRING , STRING , ) , STRING : ( STRING , ) , STRING : STRING }
NAME = [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ]
NAME = ( ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , )
{ STRING : [ { STRING : [ NUMBER , NUMBER , NUMBER ] } , { STRING : STRING } ] , STRING : { STRING : [ STRING , STRING , STRING ] } }
{ STRING : [ STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING ] }
NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME . NAME = NUMBER NEWLINE NAME = [ NAME , NAME ]
{ STRING : [ NUMBER , NUMBER , NUMBER ] , NAME : [ NUMBER , NUMBER , NUMBER ] }
NAME . NAME ( NAME ) . NAME ( NAME ( NAME . NAME == NAME , NAME . NAME == NAME ) ) . NAME ( )
NAME = NAME . NAME ( NAME = NAME , NAME = ( NAME , NAME ) ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME [ STRING ] [ STRING ]
NAME = [ NAME ( NAME ) for NAME in NAME ( STRING . NAME ( NUMBER ) ) ]
import NAME NEWLINE from NAME import NAME NEWLINE NAME = NAME ( NAME = STRING , NAME = STRING , NAME = STRING )
from NAME . NAME import NAME NEWLINE NAME = NAME ( STRING , STRING ) NEWLINE NAME = NAME . NAME ( NAME = NAME ) NEWLINE NAME ( NAME )
[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] = NAME
NAME . NAME ( NAME . NAME . NAME ( ) , NAME ( ( STRING ) ) , NAME . NAME )
NAME = [ { STRING : STRING , NAME : { NAME : NUMBER , NAME : STRING } } , { ... } ]
NAME ( NAME ( NAME ( NAME ( NAME ) [ : - NAME ] ) ) and NAME ( NAME ( NAME ( NAME ) [ NAME : ] ) ) )
[ [ NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]
NAME = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]
* { STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : STRING }
{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING }
NAME = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] and NAME
NAME = { NAME : { STRING : NUMBER , STRING : NUMBER } , NAME : { STRING : NUMBER , STRING : NUMBER } , NAME : { STRING : NUMBER , STRING : NUMBER } }
[ NUMBER , NUMBER , NUMBER ] NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }
import NAME . NAME as NAME NEWLINE for NAME in NAME : NAME . NAME ( NAME [ NAME ] [ NUMBER ] , NAME [ NAME ] [ NUMBER ] )
NAME [ STRING ] = NAME [ STRING ] NEWLINE NAME = NAME . NAME [ NAME [ STRING ] > NUMBER , STRING ] = STRING
NAME = [ { NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } , { NUMBER : NUMBER } ]
NAME = { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] , STRING : [ NUMBER , NUMBER ] }
NAME [ NUMBER ] = NUMBER NEWLINE NAME [ NUMBER ] = NUMBER NEWLINE NAME [ NUMBER ] = NUMBER and NAME
NAME = { NAME : STRING and STRING , NAME : STRING and STRING , NAME : STRING and STRING , NAME : STRING and STRING }
{ STRING : { STRING : True , STRING : STRING , STRING : STRING , STRING : [ ] , STRING : NUMBER , STRING : STRING } }
{ STRING : { STRING : { STRING : { STRING : [ STRING , STRING ] } , STRING : { STRING : [ STRING , STRING ] } } } , }
NAME . NAME . NAME ( { STRING : STRING } ) . NAME ( STRING ) . NAME ( NAME = NAME ( STRING ) )
NAME = [ [ STRING , STRING , NUMBER ] , [ STRING , STRING , NUMBER ] , [ STRING , STRING , - NUMBER ] ]
{ NAME : { STRING : { NAME : NUMBER , NAME : NUMBER } } , NAME : { STRING : { NAME : NUMBER } } }
NAME = [ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } ]
NAME . NAME ( lambda NAME , NAME : NUMBER if NAME . NAME < NAME . NAME else - NUMBER )
NAME = NAME ( NUMBER , NUMBER ) NEWLINE NAME = [ NAME ( NAME ) for NAME in NAME ]
NAME = [ NAME , NAME , NAME , NAME ] NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ]
NAME = [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ]
NAME = NAME ( STRING ) NEWLINE if NAME == NAME : NAME ( STRING ) NEWLINE elif NAME == STRING : NAME ( STRING ) NEWLINE else : NAME ( STRING )
NAME = [ { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER } ]
{ STRING : { STRING : { STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING } } }
NAME = { STRING : [ ( NAME , NAME ) , ( NAME , NAME ) ] , STRING : [ ( NAME , NAME ) ] }
NAME . NAME ( - NAME , NAME = STRING , NAME = STRING , NAME = NAME , NAME = STRING )
NAME = NAME . NAME ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ) NEWLINE NAME . NAME ( )
{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : [ STRING , STRING ] , STRING : STRING }
NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER / NUMBER NEWLINE NUMBER / NUMBER / NUMBER
NAME [ STRING ] = NAME [ STRING ] + STRING + NAME [ STRING ] NEWLINE NAME = NAME . NAME ( NAME [ STRING ] )
[ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ]
NAME = { STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , } }
NAME = NAME . NAME ( NAME ( NAME . NAME . NAME ( ) ) , NAME ) NEWLINE NAME = [ NAME . NAME . NAME ( ) [ NAME ] for NAME in NAME ]
NAME = STRING NEWLINE NAME = NAME . NAME ( STRING + NAME ) NEWLINE NAME = NAME . NAME ( STRING , STRING , STRING , STRING )
NAME = [ { STRING : STRING , STRING : STRING , STRING : ... } , { } , { } , { } , ... ] NEWLINE
NAME [ NUMBER ] = NAME ( [ NAME . NAME for NAME in NAME if NAME . NAME == NAME [ NUMBER ] ] )
NAME = STRING NEWLINE NAME . NAME ( NAME . NAME , NAME ) NEWLINE NAME NEWLINE ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING )
NAME = NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME . NAME ( ) NEWLINE NAME . NAME ( NAME . NAME ( ) ) NEWLINE NAME . NAME ( )
NAME = NAME . NAME ( [ [ True , False , False ] , [ False , True , False ] ] )
NAME = { NUMBER : ( NUMBER , NUMBER ) } NEWLINE NAME . NAME ( NAME [ NUMBER ] ) ;
[ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]
[ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ]
NUMBER : NAME = { NAME : NAME for NAME , NAME in NAME . NAME ( ) if NAME in NAME }
NAME = { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE
NAME , NAME , NAME , NAME , NAME , NAME , NAME , NAME NEWLINE NAME , NAME , NAME , NAME , NAME , NAME , NAME , NAME NEWLINE NAME , NAME NEWLINE
NAME = [ NAME ( NAME ( NAME , NUMBER ) for NAME in NAME ) ] NEWLINE NAME = STRING . NAME ( NAME )
NAME = NAME ( [ [ NUMBER , NUMBER , STRING ] , [ NUMBER , NUMBER , STRING ] ] ) NEWLINE NAME = NAME ( [ NAME , NAME , NAME ] )
NAME ( NAME , NAME , NAME , NAME , NUMBER , NAME , NUMBER ) ; NAME ( NAME , NAME , NAME , NAME , NUMBER ) ;
[ [ NUMBER , NUMBER , [ NAME , NAME , NAME , NAME ] ] , [ NUMBER , NUMBER , [ NAME , NAME , NAME , NAME ] ] , ... ]
NAME = STRING NEWLINE NAME = NAME NEWLINE NAME = ( NAME + STRING + NAME + ( STRING or STRING ) )
NAME . NAME ( lambda NAME : NAME if NAME > NUMBER else None , NUMBER , NAME . NAME ( NUMBER ) )
NAME = NAME . NAME ( ) . NAME ( lambda NAME : ( NAME [ NUMBER ] , ( NAME [ NUMBER ] ) ) ) NEWLINE NAME . NAME ( )
NAME . NAME . NAME ( NAME = NAME ( NAME . NAME . NAME ( NAME = NAME ( STRING ) ) . NAME ( NAME = NAME ) ) )
NAME NEWLINE NAME = NAME ( STRING , STRING ) NEWLINE NAME . NAME ( NAME ) NEWLINE NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( STRING ) NEWLINE NAME . NAME ( )
NAME = NAME . NAME ( NAME [ : , NUMBER ] , NAME [ : , NUMBER ] , NAME [ : , NUMBER ] ) NEWLINE NAME = NAME ( NAME ( NUMBER ) , ( NAME ) )
NAME = NAME . NAME ( NAME ( NAME ) , NAME = ( NAME . NAME != STRING ) )
NAME = { STRING : [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , STRING : [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] }
NAME . NAME NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE ... NEWLINE NAME . NAME NEWLINE NAME
NAME = [ ] NEWLINE NAME . NAME ( ( NUMBER , NUMBER , NUMBER ) ) NEWLINE NAME . NAME ( ( NUMBER , NUMBER , NUMBER ) )
[ [ STRING , STRING , STRING , STRING , STRING , STRING ] [ STRING , STRING , STRING , STRING , STRING , STRING ] ]
NAME [ STRING ] = NAME . NAME ( [ STRING , STRING ] ) [ NAME ] . NAME ( NAME )
NAME = [ ] NEWLINE [ NAME . NAME ( NAME ) for NAME , NAME in NAME . NAME ( ) ( ) ]
{ STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] }
[ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , ]
NAME = [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , NAME ]
NEWLINE NAME = NAME . NAME [ : , STRING ] == NAME NEWLINE NAME [ NAME , : ] = NAME . NAME [ NAME , : ]
{ STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : { STRING : STRING } } , STRING : ... }
import NAME NEWLINE NAME = NAME . NAME ( STRING ) NEWLINE NAME = [ ] NEWLINE NAME ( ) NEWLINE NAME . NAME ( NAME , NAME )
NAME = NAME . NAME ( NAME , NUMBER ) or NAME . NAME ( NAME , NUMBER ) , NAME
import NAME NEWLINE from NAME . NAME . NAME import * NEWLINE NAME = NAME . NAME ( STRING , STRING , STRING ) NEWLINE NAME = NAME . NAME ( ) NEWLINE
NAME = { STRING : NUMBER , STRING : STRING , STRING : NUMBER , STRING : NUMBER } NEWLINE NAME = { STRING : NUMBER , STRING : STRING , STRING : NUMBER , STRING : NUMBER }
[ { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ]
NAME . NAME . NAME ( NAME ( NAME = STRING ) ) NEWLINE NAME . NAME . NAME ( NAME ( NAME = STRING ) )
NAME = NAME ( lambda NAME : STRING . NAME ( NAME . NAME ( ) ) , NAME . NAME ) NEWLINE NAME = NAME ( NAME ( ) , NAME , NAME )
NAME = NAME ( ( NAME , NAME ) , NAME = NUMBER ) NEWLINE NAME = NAME ( ( NAME , NAME ) , NAME = NUMBER )
NAME [ STRING ] = NAME . NAME . NAME ( lambda NAME : NAME . NAME [ NAME ] [ STRING ] )
NAME = { STRING : STRING , STRING : [ { STRING : STRING } , { STRING : STRING } ] }
NAME = [ ( STRING , NUMBER , STRING ) , ( STRING , NUMBER , STRING ) , ( STRING , NUMBER , STRING ) , ( STRING , NUMBER , STRING ) ]
import NAME NEWLINE import NAME NEWLINE NAME = STRING NEWLINE NAME = NAME . NAME ( NAME ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NAME . NAME ( NAME ( NAME ) )
NEWLINE NAME = { NAME : NUMBER , NAME : lambda NAME : NAME / NUMBER , NAME : lambda NAME : NAME } NEWLINE NAME = NAME . NAME ( NAME , NAME )
NAME = NAME . NAME ( { STRING : NAME , STRING : NAME } ) NEWLINE NAME = NAME . NAME ( STRING , NAME ) NEWLINE NAME = NAME . NAME ( NAME )
NAME = NAME [ NAME [ STRING ] > NAME [ STRING ] ] NEWLINE NAME = NAME [ NAME [ STRING ] < NUMBER ] NEWLINE NAME = NAME . NAME ( NAME = STRING , NAME = True )
NAME = NAME ( STRING , STRING ) NEWLINE NAME = [ { STRING : STRING , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER } ] NEWLINE NAME >> NAME , NAME
NAME [ NUMBER ] : NAME ( NAME ) NEWLINE NAME [ NUMBER ] : NUMBER NEWLINE NAME [ NUMBER ] : NAME ( NAME ) NEWLINE NAME [ NUMBER ] : NUMBER
import NAME NEWLINE from NAME import NAME NEWLINE NAME = STRING NEWLINE NAME = NAME . NAME ( NAME ) NEWLINE NAME = NAME . NAME NEWLINE NAME = NAME ( NAME ) NEWLINE NAME ( NAME )
import NAME NEWLINE NAME = NAME ( NAME . NAME ( ) , NAME = NAME . NAME ( NUMBER ) )
NAME = [ { NUMBER : NAME , NUMBER : NAME } , { NUMBER : NAME , NUMBER : NAME } , { NUMBER : NAME , NUMBER : NAME } ]
NAME = NAME ( ) NEWLINE NAME = NAME ( NAME = False ) NEWLINE NAME = NAME ( NAME = STRING ) NEWLINE NAME = NAME ( NAME , NAME , NAME )
[ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ]
NAME , NAME , NAME , NAME , NAME - NAME , NAME , NAME , NAME , NAME ( NAME ) NEWLINE
NAME = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ]
NAME = NAME . NAME ( NAME , NAME = ( NUMBER ) , NAME = NAME )
NAME = NAME // NAME . NAME . NAME . NAME / NAME / NAME / NUMBER / NUMBER / NAME . NAME
[ NAME ( NAME ) for NAME in ( ( NAME ( NAME * NUMBER ) . NAME ( NAME ) [ : NAME ] ) ) ]
NAME = NAME . NAME . NAME ( NAME = STRING ) . NAME ( NAME = NAME ( STRING ) ) . NAME ( STRING ) . NAME ( STRING )
NAME = { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING , NUMBER : STRING }
NAME . NAME ( STRING , NAME . NAME ( ) , NAME = NUMBER , NAME = NUMBER ) NEWLINE [ STRING , STRING , STRING ]
NAME : { NAME : STRING , NAME : [ { NAME : STRING , NAME : NUMBER } , { NAME : STRING , NAME : NUMBER } ] , NAME : STRING , }
NAME = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , }
{ STRING : STRING , STRING : STRING , STRING : [ { STRING : [ STRING ] } ] , STRING : STRING }
NAME [ STRING ] = NAME . NAME ( STRING ) [ STRING ] . NAME ( NAME . NAME ( NUMBER ) . NAME ( ) )
NAME = { STRING : STRING , STRING : { STRING : STRING , STRING : STRING } , STRING : STRING , STRING : NUMBER }
[ STRING , [ STRING , [ STRING , [ STRING ] , STRING ] ] , STRING , [ STRING ] ]
NAME = [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ]
NAME = NAME ( STRING ) NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NAME ( NAME ) NEWLINE NAME ( STRING , NAME ) NEWLINE
import NAME . NAME NEWLINE NAME = [ STRING , STRING , STRING ] NEWLINE NAME . NAME . NAME ( STRING , NAME = { STRING : NAME } )
NAME = NAME . NAME . NAME ( NAME = NUMBER , NAME = NUMBER ) NEWLINE NAME = NAME . NAME ( NAME . NAME ( ... ) . NAME ( STRING ) )
NAME ( NAME = NAME , NAME = NAME , NAME = NUMBER , NAME = NUMBER , NAME = STRING ) NEWLINE
NAME NEWLINE NAME , NAME NEWLINE NAME . NAME NEWLINE NAME . NAME NEWLINE NAME . NAME NEWLINE NAME . NAME
NAME = ( ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ) NEWLINE NAME ( NAME )
NAME = { NUMBER : [ NUMBER , NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] , }
NAME . NAME == [ STRING ] NEWLINE NAME . NAME . NAME ( [ [ STRING ] ] ) NEWLINE NAME . NAME . NAME ( [ STRING ] )
NAME = { NUMBER , NUMBER , NUMBER , NUMBER } NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ]
from NAME . NAME import NAME NEWLINE NAME = NAME ( STRING ) NEWLINE NAME [ STRING ] . NAME ( STRING )
NAME ( STRING ) NEWLINE NAME ( STRING ) NEWLINE NAME = NAME ( ) NEWLINE NAME ( STRING + NAME )
NAME . NAME ( NAME // NAME . NAME . NAME ) NEWLINE NAME . NAME . NAME ( STRING )
from NAME import NAME NEWLINE NAME = NAME . NAME . NAME ( STRING ) NEWLINE NAME . NAME . NAME ( NAME )
NAME = { STRING : NUMBER } NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NAME ( NAME , ** NAME )
NAME = NAME , NEWLINE NAME ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING , NAME ) ,
NAME = NAME . NAME . NAME ( NAME , STRING ) NEWLINE NAME = STRING NEWLINE NAME = ( NAME , ) NEWLINE NAME NEWLINE NAME NEWLINE NAME
NAME = NAME . NAME ( [ STRING , STRING ] ) NEWLINE NAME = NAME . NAME ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )
{ STRING : { STRING : NUMBER } , STRING : { STRING : { STRING : { STRING : { STRING : STRING , STRING : STRING } } } } }
NAME = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NAME = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]
NAME = { STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , } }
NAME = [ ( [ STRING ] , [ STRING ] ) , ( [ STRING ] , [ STRING ] ) ] NEWLINE NAME = [ STRING , STRING ]
NAME = NAME . NAME . NAME ( NAME . NAME , NAME . NAME , NAME . NAME ) . NAME ( STRING ) . NAME ( )
NAME = [ NAME ( NAME ) if NAME ( NAME ) % NUMBER == NUMBER else NAME for NAME in NAME ]
NAME = NAME . NAME ( NAME . NAME [ NAME , NAME , NUMBER , NAME ] , NAME = NAME )
NAME = NAME . NAME ( NAME , NAME = STRING , NAME = lambda : NAME ( NAME , NAME ) ) . NAME ( )
[ [ [ NAME ] , [ NUMBER ] ] , [ [ NAME ] , [ NAME ] ] , [ [ NAME ] , [ NAME ] ] ]
NAME = { NUMBER : [ NAME is NUMBER , NAME , NAME ] , NUMBER : [ NAME is NUMBER , NAME , NAME ] }
def NAME ( NAME , NAME ) : NAME * NAME NEWLINE NAME ( STRING , NUMBER ) > NAME
NAME . NAME . NAME ( NAME = NAME . NAME . NAME ( NAME = ( NAME , NAME ( NAME = NUMBER ) ) ) )
NAME ( NAME = True ) NEWLINE NAME = NAME . NAME ( ) NEWLINE return NAME . NAME . NAME ( NAME , NAME = False )
NAME = [ STRING , STRING , STRING ] NEWLINE NAME , NAME , NAME = NAME . NAME ( NAME )
NAME = [ STRING , STRING , STRING ] NEWLINE NAME = [ STRING , STRING , STRING ]
NEWLINE import NAME NEWLINE NAME = NAME . NAME ( ) NEWLINE NAME = NUMBER NEWLINE NAME . NAME ( ( STRING , NAME ) ) NEWLINE NAME ( NAME . NAME ( NUMBER ) ) NEWLINE NAME . NAME ( )
NAME = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ]
NAME NEWLINE NAME = NAME . NAME ( [ STRING ] ) [ STRING ] NEWLINE NAME . NAME ( ) . NAME ( NAME = STRING , NAME = NUMBER )
from NAME import * NEWLINE NAME = NAME ( ) NEWLINE NAME = NAME ( NAME , NAME = STRING , NAME = STRING )
[ ( STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING ) , ( STRING , STRING ) , ( STRING ) ]
NAME = [ NAME for NAME in NAME if NAME [ NUMBER ] == NUMBER and NAME [ NUMBER ] == STRING ]
[ [ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] , [ STRING , NUMBER , NUMBER , STRING ] ]
{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , NAME : STRING , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , NAME : STRING }
NAME = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]
[ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) ] ,
NAME = NAME . NAME ( NAME . NAME . NAME ( STRING ) ) NEWLINE NAME = NAME . NAME . NAME . NAME ( STRING )
[ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ]
NAME = NAME . NAME ( NAME . NAME ) NEWLINE NAME ( NAME ) NEWLINE NAME ( NAME ( NAME ) ) , NAME
[ [ NAME , NAME , NUMBER ] , [ NAME , NAME , NUMBER ] , [ NAME , NAME , NUMBER ] , ... ]
{ STRING : STRING , STRING : STRING , STRING : { STRING : STRING , STRING : STRING } }
from NAME . NAME import NAME NEWLINE NAME = NAME ( NAME ) NEWLINE NAME . NAME ( NAME , NAME )
{ NAME : { NAME : STRING , NAME : STRING } , NAME : { NAME : STRING , NAME : STRING } }
NAME = NAME ( STRING , STRING , NAME = STRING ) NEWLINE NAME = NAME . NAME ( NAME ) NEWLINE NAME ( NAME )
NAME ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) . NAME ( ) [ NUMBER , NUMBER ]
[ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) ] 
  """.trimIndent()