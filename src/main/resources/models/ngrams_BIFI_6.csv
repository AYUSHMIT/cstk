BOS NEWLINE def NAME ( NAME ::: 1375530
( NAME ) : NEWLINE INDENT ::: 1283041
NAME ( NAME ) : NEWLINE ::: 1281116
NAME ) : NEWLINE INDENT NAME ::: 1108551
NAME = NAME . NAME ( ::: 1101790
NAME NEWLINE from NAME . NAME ::: 1043953
NAME . NAME import NAME NEWLINE ::: 1010257
NAME . NAME . NAME ( ::: 955449
def NAME ( NAME ) : ::: 946202
NAME import NAME NEWLINE from NAME ::: 935959
def NAME ( NAME , NAME ::: 908253
NEWLINE NAME = NAME . NAME ::: 859478
NAME ( NAME , NAME ) ::: 816910
import NAME NEWLINE from NAME . ::: 812557
) NEWLINE NAME . NAME ( ::: 807204
: NEWLINE INDENT NAME = NAME ::: 792519
) : NEWLINE INDENT NAME = ::: 789545
NEWLINE def NAME ( NAME , ::: 783518
: NEWLINE INDENT NAME . NAME ::: 776450
NEWLINE def NAME ( NAME ) ::: 757105
, NAME ) : NEWLINE INDENT ::: 752625
NAME , NAME ) : NEWLINE ::: 743246
. NAME import NAME NEWLINE from ::: 729128
NAME . NAME ( NAME ) ::: 722501
NEWLINE from NAME . NAME import ::: 717960
import NAME NEWLINE import NAME NEWLINE ::: 716547
from NAME . NAME import NAME ::: 695535
NAME . NAME ( ) NEWLINE ::: 671829
NEWLINE import NAME NEWLINE import NAME ::: 661365
) : NEWLINE INDENT STRING NEWLINE ::: 648956
NEWLINE from NAME import NAME NEWLINE ::: 599418
NAME . NAME . NAME import ::: 598200
from NAME . NAME . NAME ::: 597242
. NAME ( NAME ) NEWLINE ::: 585128
. NAME ( NAME . NAME ::: 583419
. NAME . NAME import NAME ::: 583126
NEWLINE from NAME . NAME . ::: 582176
NAME ) : NEWLINE INDENT STRING ::: 544152
= NAME . NAME ( NAME ::: 539163
NAME . NAME ( NAME . ::: 535115
. NAME . NAME ( NAME ::: 515842
NAME , NAME , NAME , ::: 509511
( NAME , NAME ) : ::: 506017
NEWLINE NAME . NAME ( NAME ::: 501418
NAME NEWLINE from NAME import NAME ::: 499634
, NAME , NAME , NAME ::: 493939
( NAME , NAME , NAME ::: 485758
NAME ( NAME , NAME , ::: 473707
NAME . NAME ( STRING ) ::: 468793
) NEWLINE NAME = NAME . ::: 465920
) : NEWLINE INDENT NAME . ::: 455106
NEWLINE INDENT NAME = NAME . ::: 448987
INDENT NAME = NAME . NAME ::: 448987
NAME NEWLINE import NAME NEWLINE import ::: 432548
NAME ) NEWLINE NAME . NAME ::: 419150
NAME . NAME ( NAME , ::: 418305
import NAME NEWLINE from NAME import ::: 414479
NAME ( NAME . NAME ) ::: 405979
BOS NEWLINE class NAME ( NAME ::: 403734
NEWLINE INDENT NAME . NAME ( ::: 399894
NAME = STRING , NAME = ::: 375691
. NAME ( ) NEWLINE NAME ::: 373997
NAME ( NAME ) NEWLINE NAME ::: 355143
NAME , NAME , NAME ) ::: 352489
NAME . NAME ( STRING , ::: 352033
NEWLINE NAME . NAME = NAME ::: 350668
= NAME . NAME . NAME ::: 345907
NAME = STRING NEWLINE NAME = ::: 343715
: NEWLINE INDENT STRING NEWLINE NAME ::: 340799
NAME = NAME . NAME . ::: 338901
. NAME ( NAME , NAME ::: 334460
from NAME import NAME NEWLINE from ::: 329473
. NAME ( STRING ) NEWLINE ::: 327217
. NAME . NAME . NAME ::: 327170
NAME . NAME . NAME . ::: 325361
STRING , STRING , STRING , ::: 315592
NAME ( NAME ) NEWLINE DEDENT ::: 303658
NEWLINE NAME = STRING NEWLINE NAME ::: 300020
, STRING , STRING , STRING ::: 292465
NAME . NAME ( NAME = ::: 290724
NEWLINE import NAME NEWLINE from NAME ::: 286688
NAME ( STRING ) NEWLINE NAME ::: 283120
= NAME . NAME ( ) ::: 282834
NAME . NAME = NAME NEWLINE ::: 276058
NEWLINE NAME . NAME . NAME ::: 274746
NAME ( ) : NEWLINE INDENT ::: 269235
, NAME = STRING , NAME ::: 265891
( ) NEWLINE NAME . NAME ::: 259384
NAME ( ) NEWLINE NAME . ::: 258723
NEWLINE NAME = NAME ( NAME ::: 254255
NAME import NAME , NAME NEWLINE ::: 253678
class NAME ( NAME ) : ::: 251938
. NAME import NAME , NAME ::: 251096
STRING NEWLINE NAME = STRING NEWLINE ::: 250442
NEWLINE class NAME ( NAME ) ::: 248173
NEWLINE INDENT NAME = NAME ( ::: 238360
STRING ) NEWLINE NAME . NAME ::: 238301
. NAME ( ) NEWLINE DEDENT ::: 235858
, NAME , NAME ) : ::: 234612
NAME ( NAME . NAME ( ::: 232618
) NEWLINE NAME = NAME ( ::: 231519
= NAME . NAME ( STRING ::: 226908
NAME ) NEWLINE NAME = NAME ::: 226070
NEWLINE INDENT STRING NEWLINE NAME = ::: 225464
= STRING , NAME = STRING ::: 224206
NEWLINE NAME . NAME ( STRING ::: 224113
NEWLINE INDENT NAME . NAME = ::: 222532
. NAME . NAME ( ) ::: 219361
NAME . NAME import NAME , ::: 214466
= STRING NEWLINE NAME = STRING ::: 212837
INDENT NAME . NAME ( NAME ::: 212552
NAME , NAME NEWLINE from NAME ::: 211166
STRING , NAME = STRING , ::: 206620
) NEWLINE NAME . NAME = ::: 202822
NAME ( NAME . NAME , ::: 193934
( NAME , NAME ) NEWLINE ::: 192450
NAME NEWLINE import NAME NEWLINE from ::: 191822
( NAME . NAME . NAME ::: 189835
NEWLINE NAME . NAME ( ) ::: 189566
NAME ( NAME , NAME = ::: 187552
. NAME ) : NEWLINE INDENT ::: 186896
NAME . NAME ) : NEWLINE ::: 186631
NEWLINE DEDENT def NAME ( NAME ::: 186359
NAME . NAME ) NEWLINE NAME ::: 185231
: NEWLINE INDENT def NAME ( ::: 183414
NAME NEWLINE NAME = NAME . ::: 179982
def NAME ( ) : NEWLINE ::: 179228
NEWLINE DEDENT else : NEWLINE INDENT ::: 179206
) NEWLINE NAME . NAME . ::: 179178
NEWLINE INDENT def NAME ( NAME ::: 179105
NAME NEWLINE NAME . NAME = ::: 178430
NAME ( ) NEWLINE NAME = ::: 177925
. NAME ( STRING , NAME ::: 177293
NAME ( NAME . NAME . ::: 177095
NAME import NAME NEWLINE import NAME ::: 176671
NEWLINE def NAME ( ) : ::: 175837
BOS NEWLINE from NAME import NAME ::: 175806
NAME : NEWLINE INDENT NAME = ::: 175665
, NAME = NAME . NAME ::: 175408
NAME import NAME NEWLINE NAME = ::: 174747
. NAME import NAME NEWLINE EOS ::: 174308
. NAME = NAME NEWLINE NAME ::: 174146
. NAME = NAME . NAME ::: 173765
NAME . NAME = NAME . ::: 172731
NAME . NAME : NEWLINE INDENT ::: 171606
= NAME NEWLINE NAME . NAME ::: 171196
BOS NEWLINE def NAME ( ) ::: 169704
( NAME ) NEWLINE NAME . ::: 169577
) : NEWLINE INDENT if NAME ::: 167523
. NAME . NAME ( STRING ::: 167502
( NAME . NAME ) NEWLINE ::: 166160
NAME , NAME , NAME NEWLINE ::: 166061
NAME = NAME NEWLINE NAME . ::: 165424
NAME : NEWLINE INDENT NAME . ::: 165088
. NAME , NAME . NAME ::: 163762
STRING ) NEWLINE NAME = NAME ::: 163114
NAME . NAME , NAME . ::: 162450
NAME ) : NEWLINE INDENT return ::: 161714
INDENT NAME . NAME = NAME ::: 161259
import NAME NEWLINE NAME = NAME ::: 161062
import NAME , NAME , NAME ::: 160544
NAME ) : NEWLINE INDENT if ::: 158631
) : NEWLINE INDENT def NAME ::: 158614
( NAME . NAME ) : ::: 157862
BOS NEWLINE import NAME NEWLINE import ::: 155737
( NAME . NAME , NAME ::: 154017
NAME ( STRING ) NEWLINE DEDENT ::: 152880
NAME ) : NEWLINE INDENT def ::: 152114
NAME = NAME ( NAME ) ::: 152046
class NAME ( NAME . NAME ::: 151528
NAME ) NEWLINE DEDENT DEDENT EOS ::: 151500
import NAME , NAME NEWLINE from ::: 151289
NAME . NAME ) NEWLINE DEDENT ::: 150926
NAME = NAME ( ) NEWLINE ::: 150468
NEWLINE class NAME ( NAME . ::: 149821
, NAME NEWLINE from NAME . ::: 149664
( ) : NEWLINE INDENT NAME ::: 149145
BOS NEWLINE from NAME . NAME ::: 147380
INDENT STRING NEWLINE NAME = NAME ::: 147222
( ) NEWLINE NAME = NAME ::: 146522
NAME NEWLINE import NAME . NAME ::: 146271
NEWLINE from . NAME import NAME ::: 145708
NAME in NAME : NEWLINE INDENT ::: 144049
INDENT NAME = NAME ( NAME ::: 143847
from NAME import NAME , NAME ::: 143675
NAME , NAME ) NEWLINE DEDENT ::: 143300
. NAME import NAME NEWLINE NAME ::: 141489
) : NEWLINE INDENT NAME ( ::: 140728
NEWLINE from NAME import NAME , ::: 140068
NAME import NAME , NAME , ::: 140004
( NAME ) NEWLINE NAME = ::: 137065
= NAME ( NAME ) NEWLINE ::: 136676
STRING : STRING , STRING : ::: 135498
. NAME ( STRING , STRING ::: 134378
: NEWLINE INDENT NAME = STRING ::: 133652
NAME = NAME . NAME NEWLINE ::: 133056
NAME , NAME , NAME = ::: 132307
STRING NEWLINE NAME = NAME . ::: 131993
DEDENT return NAME NEWLINE DEDENT EOS ::: 128085
: NEWLINE INDENT NAME ( NAME ::: 127059
NAME = NUMBER NEWLINE NAME = ::: 126615
NAME = NAME ( NAME , ::: 125649
NAME NEWLINE from . NAME import ::: 125524
NEWLINE INDENT NAME . NAME . ::: 124062
INDENT NAME . NAME . NAME ::: 124062
for NAME in NAME : NEWLINE ::: 123732
) ) NEWLINE NAME . NAME ::: 122812
NAME ( NAME ) ) NEWLINE ::: 122746
, NAME . NAME ) NEWLINE ::: 121643
NAME ( ) NEWLINE DEDENT EOS ::: 121307
( STRING ) NEWLINE NAME . ::: 120793
NAME import NAME NEWLINE from . ::: 120246
NAME . NAME ( NAME ( ::: 120032
NAME ( STRING , STRING ) ::: 119534
( STRING , NAME . NAME ::: 117726
) : NEWLINE INDENT return NAME ::: 117114
NAME . NAME ( ) ) ::: 116194
NAME , NAME ) NEWLINE NAME ::: 115966
from . NAME import NAME NEWLINE ::: 114849
NEWLINE import NAME as NAME NEWLINE ::: 114603
. NAME ) NEWLINE NAME . ::: 113663
NEWLINE NAME = NUMBER NEWLINE NAME ::: 113327
DEDENT else : NEWLINE INDENT NAME ::: 112895
from NAME import NAME NEWLINE import ::: 112734
NAME , NAME . NAME ) ::: 112000
DEDENT def NAME ( NAME ) ::: 111793
NAME = NAME , NAME = ::: 111616
in NAME : NEWLINE INDENT NAME ::: 111490
: NEWLINE INDENT return NAME . ::: 111045
NEWLINE INDENT return NAME . NAME ::: 111045
. NAME ( NAME = NAME ::: 111011
, NAME , NAME ) NEWLINE ::: 110261
for NAME in NAME . NAME ::: 109914
( NAME = STRING , NAME ::: 109863
( STRING ) NEWLINE NAME = ::: 109851
NEWLINE return NAME NEWLINE DEDENT EOS ::: 109267
NAME ( NAME = STRING , ::: 108877
NEWLINE import NAME NEWLINE NAME = ::: 108038
: NEWLINE INDENT NAME ( STRING ::: 106883
NEWLINE DEDENT return NAME NEWLINE DEDENT ::: 105422
NAME , NAME = NAME . ::: 105281
NAME ( NAME , STRING ) ::: 105251
: STRING , STRING : STRING ::: 103973
. NAME : NEWLINE INDENT NAME ::: 102727
import NAME NEWLINE from . NAME ::: 102547
= NAME ( ) NEWLINE NAME ::: 102483
NEWLINE INDENT NAME = STRING NEWLINE ::: 102392
( NAME . NAME ( ) ::: 101860
NAME as NAME NEWLINE from NAME ::: 101601
( NAME ) NEWLINE DEDENT EOS ::: 101571
NAME . NAME , NAME = ::: 101409
NAME ( STRING , NAME . ::: 101397
BOS NEWLINE STRING NEWLINE import NAME ::: 101105
INDENT def NAME ( NAME , ::: 100302
NAME as NAME NEWLINE import NAME ::: 100253
NAME . NAME [ STRING ] ::: 98919
) NEWLINE return NAME NEWLINE DEDENT ::: 97508
INDENT NAME . NAME ( STRING ::: 97001
BOS NEWLINE STRING NEWLINE from NAME ::: 95679
, NAME ) . NAME ( ::: 95424
NAME NEWLINE import NAME NEWLINE NAME ::: 95376
NAME NEWLINE NAME = NAME ( ::: 95066
, NAME = STRING ) NEWLINE ::: 94629
NAME , NAME ) . NAME ::: 94363
, NAME . NAME , NAME ::: 93587
= NAME ( NAME . NAME ::: 92943
NEWLINE NAME = NAME ( STRING ::: 92678
NAME = [ STRING , STRING ::: 92540
( NAME , NAME ) . ::: 92402
. NAME ( NAME = STRING ::: 92011
NEWLINE INDENT if NAME . NAME ::: 91749
: NEWLINE INDENT if NAME . ::: 91749
** NAME ) : NEWLINE INDENT ::: 91404
NAME . NAME ( NUMBER ) ::: 91014
, NAME , NAME NEWLINE from ::: 90913
= NAME ( NAME , NAME ::: 90895
NEWLINE for NAME in NAME : ::: 90767
NAME = NAME ( NAME . ::: 90320
. NAME ( ) ) NEWLINE ::: 89943
) NEWLINE DEDENT else : NEWLINE ::: 89543
, ** NAME ) : NEWLINE ::: 89281
[ STRING , STRING , STRING ::: 89253
= None ) : NEWLINE INDENT ::: 89178
NAME = None ) : NEWLINE ::: 89139
import NAME as NAME NEWLINE from ::: 88967
( NAME ) NEWLINE DEDENT DEDENT ::: 88790
) . NAME ( ) NEWLINE ::: 88291
: NEWLINE INDENT NAME = [ ::: 88157
, NAME ) NEWLINE DEDENT EOS ::: 87580
from NAME import NAME NEWLINE NAME ::: 87086
NAME ( STRING , NAME = ::: 86700
NAME . NAME = NAME ( ::: 86581
. NAME = NAME NEWLINE DEDENT ::: 86538
NAME import NAME as NAME NEWLINE ::: 86239
: NEWLINE INDENT STRING NEWLINE return ::: 85691
NEWLINE STRING NEWLINE import NAME NEWLINE ::: 85492
. NAME ( NAME ) ) ::: 85410
, NAME = NAME ) NEWLINE ::: 85339
) NEWLINE for NAME in NAME ::: 85293
return NAME . NAME ( NAME ::: 85254
STRING NEWLINE def NAME ( NAME ::: 85015
( STRING , STRING ) NEWLINE ::: 84808
, NAME = None ) : ::: 83495
. NAME ( NAME ( NAME ::: 83479
NEWLINE INDENT STRING NEWLINE NAME . ::: 83450
INDENT STRING NEWLINE NAME . NAME ::: 83450
( NAME . NAME ( NAME ::: 83446
NUMBER NEWLINE NAME = NUMBER NEWLINE ::: 82712
( NAME , NAME . NAME ::: 82666
, NAME ) NEWLINE NAME . ::: 82127
DEDENT def NAME ( NAME , ::: 81924
NAME = NUMBER , NAME = ::: 81667
NAME NEWLINE NAME = STRING NEWLINE ::: 81370
= NAME . NAME NEWLINE NAME ::: 81287
NAME ( ) . NAME ( ::: 81265
= NUMBER NEWLINE NAME = NUMBER ::: 81261
) NEWLINE DEDENT def NAME ( ::: 81039
NAME , ** NAME ) : ::: 80555
NAME NEWLINE import NAME as NAME ::: 80256
* NAME , ** NAME ) ::: 80107
NAME NEWLINE NAME . NAME ( ::: 79914
NAME . NAME as NAME NEWLINE ::: 79870
, STRING : STRING , STRING ::: 79599
DEDENT except NAME : NEWLINE INDENT ::: 79466
NAME ( NAME ( NAME ) ::: 79238
INDENT def NAME ( NAME ) ::: 78614
NEWLINE NAME = NAME ( ) ::: 78373
. NAME ( ) : NEWLINE ::: 78132
NAME NEWLINE import NAME NEWLINE EOS ::: 77930
STRING , STRING : STRING , ::: 77179
: NEWLINE INDENT for NAME in ::: 76215
STRING NEWLINE NAME = NAME ( ::: 76119
NAME , NAME . NAME , ::: 75852
NAME = NAME ( STRING ) ::: 75240
NAME ( NAME , NAME . ::: 75135
NUMBER ) NEWLINE NAME . NAME ::: 74863
STRING , STRING ) NEWLINE NAME ::: 74757
NAME = STRING ) NEWLINE NAME ::: 74679
, NAME = NAME , NAME ::: 74252
NEWLINE DEDENT except NAME : NEWLINE ::: 74055
= NAME , NAME = NAME ::: 73979
BOS NEWLINE import NAME NEWLINE from ::: 73896
NEWLINE import NAME . NAME NEWLINE ::: 73495
NAME == STRING : NEWLINE INDENT ::: 73224
. NAME ( NAME , STRING ::: 73046
NEWLINE INDENT for NAME in NAME ::: 72868
NEWLINE return NAME . NAME ( ::: 72705
NAME . NAME ( ) : ::: 72692
NAME . NAME . NAME NEWLINE ::: 72628
. NAME ( NUMBER ) NEWLINE ::: 71812
NAME . NAME . NAME ) ::: 71069
NUMBER , NUMBER , NUMBER , ::: 70727
NAME , NAME = STRING ) ::: 70621
STRING , STRING , STRING ] ::: 70503
STRING , NAME = STRING ) ::: 70296
NAME ( STRING , NAME ) ::: 70252
NAME ( STRING , STRING , ::: 70067
, STRING ) NEWLINE NAME . ::: 69957
) NEWLINE DEDENT NAME . NAME ::: 69865
: NEWLINE INDENT raise NAME ( ::: 69851
STRING NEWLINE NAME . NAME = ::: 69765
NAME , NAME = NAME ) ::: 69436
, NUMBER , NUMBER , NUMBER ::: 69183
, NAME . NAME . NAME ::: 69011
: NEWLINE INDENT STRING NEWLINE if ::: 68758
import NAME NEWLINE import NAME . ::: 68570
NAME . NAME ( NUMBER , ::: 68291
= STRING NEWLINE NAME = NAME ::: 68156
NAME = NAME ( NAME = ::: 67775
NEWLINE INDENT NAME ( NAME , ::: 67526
NAME ( ) NEWLINE DEDENT DEDENT ::: 66837
NAME in NAME . NAME ( ::: 66828
: NEWLINE INDENT return NAME ( ::: 66742
NAME . NAME = STRING NEWLINE ::: 66654
NAME . NAME ( ) , ::: 66527
NAME . NAME NEWLINE NAME = ::: 66488
= [ STRING , STRING , ::: 66465
NAME . NAME = None NEWLINE ::: 66219
as NAME NEWLINE from NAME . ::: 65583
: NEWLINE INDENT pass NEWLINE DEDENT ::: 65334
NEWLINE INDENT STRING NEWLINE return NAME ::: 65207
STRING NEWLINE from NAME import NAME ::: 65041
. NAME ) NEWLINE DEDENT EOS ::: 64693
NAME = NAME ( STRING , ::: 64639
= STRING , NAME = NAME ::: 64531
NEWLINE INDENT STRING NEWLINE def NAME ::: 64296
: NEWLINE INDENT STRING NEWLINE def ::: 64296
INDENT STRING NEWLINE def NAME ( ::: 64296
, STRING ) NEWLINE NAME = ::: 64251
) ) NEWLINE NAME = NAME ::: 64035
NEWLINE DEDENT NAME . NAME ( ::: 64024
. NAME import NAME NEWLINE import ::: 63849
= STRING NEWLINE NAME . NAME ::: 63718
import NAME NEWLINE NAME . NAME ::: 63159
from NAME import NAME NEWLINE EOS ::: 63143
. NAME ( ) . NAME ::: 62704
import NAME as NAME NEWLINE import ::: 62676
INDENT NAME ( NAME , NAME ::: 62498
) NEWLINE DEDENT return NAME NEWLINE ::: 62346
) : NEWLINE INDENT for NAME ::: 62287
NAME = NAME . NAME ) ::: 61630
, NAME NEWLINE from NAME import ::: 61503
NAME , NAME NEWLINE import NAME ::: 61136
INDENT NAME = STRING NEWLINE NAME ::: 61102
NAME . NAME [ NUMBER ] ::: 60664
NEWLINE STRING NEWLINE from NAME import ::: 60439
NAME ( STRING ) ) NEWLINE ::: 60171
STRING NEWLINE import NAME NEWLINE import ::: 60039
, NAME ( STRING , NAME ::: 59734
NAME , NAME = None ) ::: 59575
NAME ) . NAME ( ) ::: 59538
NEWLINE NAME ( STRING ) NEWLINE ::: 59472
= NAME ( STRING ) NEWLINE ::: 59298
INDENT NAME . NAME ( ) ::: 58956
. NAME import NAME as NAME ::: 58909
NAME . NAME [ NAME ] ::: 58833
, NAME = STRING ) , ::: 58832
as NAME : NEWLINE INDENT NAME ::: 58710
NAME = STRING NEWLINE NAME . ::: 58544
( STRING , STRING ) , ::: 58476
( STRING , NAME ) NEWLINE ::: 58342
NEWLINE NAME = { STRING : ::: 58310
, NAME ) NEWLINE NAME = ::: 58286
NAME = NAME . NAME [ ::: 58280
( NAME , STRING ) NEWLINE ::: 58080
import NAME . NAME as NAME ::: 58011
NEWLINE INDENT NAME ( STRING ) ::: 57931
( NAME ) ) NEWLINE DEDENT ::: 57682
NUMBER ) NEWLINE NAME = NAME ::: 57641
INDENT NAME ( STRING ) NEWLINE ::: 57610
import NAME NEWLINE NAME = STRING ::: 57581
in NAME . NAME : NEWLINE ::: 57431
, NAME = True ) NEWLINE ::: 57399
) NEWLINE return NAME . NAME ::: 57316
== STRING : NEWLINE INDENT NAME ::: 57271
) , NAME ( STRING , ::: 57266
NEWLINE for NAME in NAME ( ::: 57142
) as NAME : NEWLINE INDENT ::: 57025
NAME : NEWLINE INDENT NAME ( ::: 56548
NAME = None , NAME = ::: 56498
STRING NEWLINE NAME . NAME ( ::: 56209
NAME = True , NAME = ::: 56070
{ STRING : STRING , STRING ::: 55904
NEWLINE import NAME . NAME as ::: 55768
NEWLINE NAME . NAME ( NUMBER ::: 55533
NEWLINE INDENT raise NAME ( STRING ::: 55388
. NAME NEWLINE NAME . NAME ::: 55344
( NAME = NAME . NAME ::: 55342
for NAME in NAME ( NAME ::: 55233
NAME . NAME import NAME as ::: 55123
return NAME . NAME NEWLINE DEDENT ::: 55017
NAME ( NAME = NAME . ::: 54931
, NAME = NUMBER , NAME ::: 54684
NEWLINE NAME . NAME = None ::: 54207
STRING , NAME . NAME ( ::: 54166
NAME . NAME . NAME , ::: 54107
NAME . NAME ( ) . ::: 53974
if NAME : NEWLINE INDENT NAME ::: 53938
. NAME NEWLINE NAME = NAME ::: 53782
NAME ) . NAME ( NAME ::: 53779
NAME ( STRING . NAME ( ::: 53646
NEWLINE if NAME : NEWLINE INDENT ::: 53393
NEWLINE INDENT try : NEWLINE INDENT ::: 53199
: NEWLINE INDENT try : NEWLINE ::: 53199
NEWLINE NAME ( NAME ) NEWLINE ::: 53166
NAME . NAME NEWLINE import NAME ::: 53000
NAME import * NEWLINE from NAME ::: 52967
NAME ( NAME ) NEWLINE return ::: 52845
NAME . NAME NEWLINE NAME . ::: 52552
NEWLINE NAME = [ STRING , ::: 52507
. NAME ) NEWLINE NAME = ::: 52475
. NAME ( ) , NAME ::: 52294
for NAME , NAME in NAME ::: 52118
( ) NEWLINE DEDENT DEDENT EOS ::: 52088
STRING ) NEWLINE DEDENT DEDENT EOS ::: 52014
NAME , NAME ) ) NEWLINE ::: 51751
NEWLINE for NAME in NAME . ::: 51713
, NAME = None , NAME ::: 51600
, NAME ) NEWLINE DEDENT DEDENT ::: 51537
NAME , NAME = NAME , ::: 51519
NAME . NAME = NUMBER NEWLINE ::: 51430
NEWLINE NAME . NAME = STRING ::: 51201
DEDENT else : NEWLINE INDENT return ::: 51132
) NEWLINE DEDENT DEDENT DEDENT EOS ::: 50942
DEDENT NAME = NAME . NAME ::: 50832
( STRING . NAME ( NAME ::: 50759
NAME , NAME NEWLINE NAME = ::: 50754
NAME , STRING ) NEWLINE NAME ::: 50740
NAME : NEWLINE INDENT if NAME ::: 50573
NAME = NAME ) NEWLINE NAME ::: 50508
NEWLINE INDENT STRING NEWLINE if NAME ::: 50482
, * NAME , ** NAME ::: 50331
. NAME ( NAME = NUMBER ::: 50131
NAME NEWLINE DEDENT def NAME ( ::: 50029
NAME [ STRING ] = NAME ::: 49927
NAME ) NEWLINE NAME ( NAME ::: 49886
NAME . NAME , NAME ) ::: 49799
NAME = NAME NEWLINE NAME = ::: 49717
NAME . NAME ( NAME [ ::: 49526
. NAME , NAME = NAME ::: 49523
NAME = NAME . NAME , ::: 49441
. NAME = STRING NEWLINE NAME ::: 49183
NAME ( NAME = NAME ) ::: 49061
= NAME . NAME ) NEWLINE ::: 48805
NEWLINE NAME ( NAME , NAME ::: 48794
) ) NEWLINE DEDENT DEDENT EOS ::: 48752
NEWLINE INDENT return NAME ( NAME ::: 48746
NAME . NAME import * NEWLINE ::: 48658
INDENT return NAME . NAME ( ::: 48617
INDENT NAME = NAME ( ) ::: 48583
STRING ) : NEWLINE INDENT NAME ::: 48484
NAME = NAME [ STRING ] ::: 48440
( NAME ( NAME ) ) ::: 48419
import NAME NEWLINE import NAME as ::: 48389
import NAME . NAME . NAME ::: 48371
NEWLINE class NAME : NEWLINE INDENT ::: 48350
NEWLINE DEDENT NAME = NAME . ::: 48224
STRING NEWLINE from NAME . NAME ::: 48178
NAME ( NAME , * NAME ::: 48133
NAME NEWLINE NAME . NAME . ::: 48074
NEWLINE NAME ( NAME . NAME ::: 48020
. NAME = NAME ( NAME ::: 48004
NAME ( NAME ) NEWLINE if ::: 48003
NEWLINE NAME = STRING NEWLINE EOS ::: 47890
NAME NEWLINE def NAME ( NAME ::: 47820
NAME : NEWLINE INDENT return NAME ::: 47792
. NAME ( NAME ) : ::: 47779
NAME ) ) NEWLINE DEDENT EOS ::: 47753
NAME . NAME ) ) NEWLINE ::: 47644
NAME ( NAME ) NEWLINE EOS ::: 47602
( STRING ) NEWLINE NAME ( ::: 47437
return NAME . NAME . NAME ::: 47433
NAME , * NAME , ** ::: 47316
NEWLINE from NAME import * NEWLINE ::: 46975
NAME ( STRING , NAME ( ::: 46906
NAME ( ) ) NEWLINE NAME ::: 46879
NAME ) NEWLINE DEDENT return NAME ::: 46818
NEWLINE import NAME . NAME . ::: 46742
STRING . NAME ( NAME ) ::: 46710
= NAME . NAME , NAME ::: 46623
try : NEWLINE INDENT NAME = ::: 46430
NAME = [ NAME . NAME ::: 46286
] NEWLINE for NAME in NAME ::: 46143
( NAME , NAME = None ::: 46134
NUMBER ) : NEWLINE INDENT NAME ::: 45985
NAME ) NEWLINE return NAME NEWLINE ::: 45925
) NEWLINE NAME ( STRING ) ::: 45910
NEWLINE from . import NAME NEWLINE ::: 45835
, STRING : NAME . NAME ::: 45821
( NAME . NAME ( STRING ::: 45795
NAME ) : NEWLINE INDENT for ::: 45780
( STRING , STRING , NAME ::: 45742
( NAME , NAME ) ) ::: 45695
NAME ( NAME , STRING , ::: 45656
if NAME == STRING : NEWLINE ::: 45435
NEWLINE NAME = [ ] NEWLINE ::: 45392
NEWLINE INDENT NAME = NAME NEWLINE ::: 45376
. NAME ( STRING ) ) ::: 45312
NAME = NAME ) NEWLINE DEDENT ::: 44860
( STRING , STRING , STRING ::: 44843
else : NEWLINE INDENT NAME = ::: 44589
NAME , ** NAME ) NEWLINE ::: 44280
NAME in NAME . NAME : ::: 43991
import NAME , NAME NEWLINE NAME ::: 43890
( NAME , NAME = NAME ::: 43828
( NAME ) ) NEWLINE NAME ::: 43776
, NAME , NAME = None ::: 43681
NEWLINE try : NEWLINE INDENT NAME ::: 43625
) NEWLINE if NAME . NAME ::: 43538
. NAME ) NEWLINE DEDENT DEDENT ::: 43535
. NAME = None NEWLINE NAME ::: 43423
( NAME ) NEWLINE return NAME ::: 43030
NAME = True ) NEWLINE NAME ::: 42901
NAME = [ ] NEWLINE NAME ::: 42874
STRING NEWLINE return NAME . NAME ::: 42807
NAME ( NAME . NAME [ ::: 42785
= None NEWLINE NAME . NAME ::: 42661
NAME ( NUMBER ) NEWLINE NAME ::: 42542
NAME is None : NEWLINE INDENT ::: 42494
NAME = { STRING : STRING ::: 42412
NAME . NAME . NAME = ::: 42374
NAME ( NAME = STRING ) ::: 42328
NAME = None NEWLINE NAME . ::: 42324
NEWLINE NAME [ STRING ] = ::: 41987
NAME ( ) ) NEWLINE DEDENT ::: 41985
STRING , NAME = NAME . ::: 41772
: NEWLINE INDENT return NAME NEWLINE ::: 41547
NEWLINE INDENT return NAME NEWLINE DEDENT ::: 41494
NAME = NAME ( NAME ( ::: 41491
NAME . NAME ( STRING % ::: 41317
NAME ( NAME [ STRING ] ::: 41252
NAME = NUMBER ) NEWLINE NAME ::: 41139
, NAME . NAME ( ) ::: 41102
in NAME . NAME ( ) ::: 41044
) NEWLINE NAME = STRING NEWLINE ::: 40847
] ) NEWLINE NAME . NAME ::: 40824
: NEWLINE INDENT NAME = NUMBER ::: 40817
. NAME ( ) NEWLINE return ::: 40807
as NAME NEWLINE import NAME NEWLINE ::: 40665
INDENT STRING NEWLINE return NAME . ::: 40530
: NEWLINE INDENT if not NAME ::: 40431
NEWLINE NAME . NAME = NUMBER ::: 40417
NAME ( NAME = NAME , ::: 40415
( STRING ) NEWLINE DEDENT DEDENT ::: 40349
) NEWLINE DEDENT NAME = NAME ::: 40332
( STRING ) NEWLINE DEDENT EOS ::: 40324
. NAME import * NEWLINE from ::: 40292
NAME NEWLINE from . import NAME ::: 40206
if NAME . NAME : NEWLINE ::: 40194
for NAME in NAME ( NUMBER ::: 40169
DEDENT DEDENT return NAME NEWLINE DEDENT ::: 40039
None ) : NEWLINE INDENT NAME ::: 39907
NAME ( ) NEWLINE NAME ( ::: 39762
, NAME NEWLINE import NAME NEWLINE ::: 39724
NAME ( NAME = NUMBER ) ::: 39607
STRING ) , NAME ( STRING ::: 39589
] NEWLINE NAME = NAME . ::: 39572
else : NEWLINE INDENT NAME . ::: 39567
( ) : NEWLINE INDENT STRING ::: 39545
NAME ) ) NEWLINE NAME . ::: 39538
) NEWLINE NAME ( NAME ) ::: 39476
def NAME ( NAME , * ::: 39324
NAME import ( NAME , NAME ::: 39274
import NAME , NAME NEWLINE import ::: 39138
= NUMBER NEWLINE NAME . NAME ::: 39071
STRING , STRING , STRING ) ::: 39033
( NAME = NAME , NAME ::: 38958
NAME . NAME NEWLINE DEDENT EOS ::: 38948
, NAME . NAME ( NAME ::: 38946
, STRING , STRING ) NEWLINE ::: 38936
NAME ( ) , NAME = ::: 38876
NAME ) NEWLINE DEDENT else : ::: 38787
, NAME = NUMBER ) NEWLINE ::: 38723
, NAME = True , NAME ::: 38657
: NEWLINE INDENT if NAME ( ::: 38628
. NAME ( ) NEWLINE if ::: 38526
) : NEWLINE INDENT pass NEWLINE ::: 38447
. NAME . NAME ) NEWLINE ::: 38421
None NEWLINE NAME . NAME = ::: 38349
= None , NAME = None ::: 38285
( NAME . NAME , STRING ::: 38278
, NAME . NAME ( STRING ::: 38220
import NAME . NAME NEWLINE import ::: 38205
) : NEWLINE INDENT try : ::: 38182
= STRING ) NEWLINE NAME . ::: 38112
import NAME NEWLINE NAME = [ ::: 38099
( NAME ( NAME . NAME ::: 38064
NAME ( NAME [ NUMBER ] ::: 37817
BOS NEWLINE class NAME : NEWLINE ::: 37752
, NAME , NAME = NAME ::: 37745
NAME ( NAME ) , NAME ::: 37724
) NEWLINE NAME ( NAME . ::: 37712
( NAME ) NEWLINE if NAME ::: 37665
STRING : NAME , STRING : ::: 37540
NAME ( STRING % ( NAME ::: 37473
STRING , NAME . NAME ) ::: 37384
NAME = STRING ) , NAME ::: 37261
NAME = NUMBER NEWLINE NAME . ::: 37237
. NAME as NAME NEWLINE import ::: 37189
NAME = { STRING : NAME ::: 37162
NEWLINE INDENT if NAME ( NAME ::: 37108
( NAME , * NAME , ::: 37091
NAME [ STRING ] ) NEWLINE ::: 37016
NEWLINE INDENT NAME = NUMBER NEWLINE ::: 37003
NEWLINE STRING NEWLINE from NAME . ::: 36892
NAME ) ) NEWLINE DEDENT DEDENT ::: 36700
return NAME ( NAME , NAME ::: 36584
NAME = [ ] NEWLINE for ::: 36546
INDENT try : NEWLINE INDENT NAME ::: 36543
NAME . NAME , STRING ) ::: 36490
import NAME , NAME NEWLINE EOS ::: 36423
= [ ] NEWLINE for NAME ::: 36408
, STRING , STRING ] NEWLINE ::: 36407
raise NAME ( STRING ) NEWLINE ::: 36246
( NAME ) NEWLINE NAME ( ::: 36203
. NAME = NUMBER NEWLINE NAME ::: 36132
as NAME NEWLINE from NAME import ::: 36018
) . NAME ( NAME ) ::: 35853
STRING ) as NAME : NEWLINE ::: 35813
= NAME ( STRING , NAME ::: 35788
. NAME , NAME ) NEWLINE ::: 35769
( NAME = NAME ) NEWLINE ::: 35692
NAME ) : NEWLINE INDENT pass ::: 35577
@ NAME NEWLINE def NAME ( ::: 35561
NAME [ NAME ] = NAME ::: 35514
: NEWLINE INDENT NAME = { ::: 35510
if NAME . NAME . NAME ::: 35318
) NEWLINE if NAME : NEWLINE ::: 35294
NAME ( NAME ) . NAME ::: 35135
import ( NAME , NAME , ::: 35058
import NAME NEWLINE from . import ::: 34991
DEDENT NAME . NAME ( NAME ::: 34782
return NAME NEWLINE DEDENT DEDENT EOS ::: 34770
, STRING ) NEWLINE DEDENT EOS ::: 34744
: NEWLINE INDENT NAME , NAME ::: 34742
= [ NAME . NAME ( ::: 34720
) NEWLINE def NAME ( NAME ::: 34673
NAME = [ ( STRING , ::: 34662
STRING ) NEWLINE NAME ( STRING ::: 34525
STRING , NAME ) NEWLINE NAME ::: 34447
. NAME . NAME , NAME ::: 34439
NAME ( ) NEWLINE return NAME ::: 34436
) , NAME . NAME ( ::: 34435
, NUMBER ) NEWLINE NAME . ::: 34420
NAME ( STRING % NAME ) ::: 34405
[ STRING ] NEWLINE NAME = ::: 34384
( NAME , NAME = STRING ::: 34356
NAME ( ) NEWLINE if NAME ::: 34295
NAME , NAME = STRING , ::: 34153
as NAME NEWLINE import NAME . ::: 34134
in NAME : NEWLINE INDENT if ::: 34096
. NAME ( NAME = True ::: 34065
NAME ) NEWLINE DEDENT def NAME ::: 34045
if not NAME : NEWLINE INDENT ::: 34018
NEWLINE INDENT NAME = NAME [ ::: 34002
[ STRING ] , NAME = ::: 33998
NAME = STRING . NAME ( ::: 33911
) NEWLINE NAME ( NAME , ::: 33906
, NAME ) ) NEWLINE DEDENT ::: 33841
NEWLINE if NAME == STRING : ::: 33810
NAME ( NAME ( NAME . ::: 33806
] NEWLINE NAME . NAME = ::: 33794
) : NEWLINE INDENT if not ::: 33689
. NAME ( NUMBER , NAME ::: 33676
NAME ( NUMBER , NUMBER ) ::: 33672
STRING % ( NAME , NAME ::: 33663
( ) . NAME ( ) ::: 33515
[ NAME . NAME ( NAME ::: 33496
NAME = NAME NEWLINE DEDENT EOS ::: 33485
BOS NEWLINE import NAME NEWLINE NAME ::: 33345
NEWLINE NAME = [ NAME . ::: 33295
NAME ( NUMBER ) NEWLINE DEDENT ::: 33213
= STRING , NAME = [ ::: 33180
( STRING % NAME ) NEWLINE ::: 33170
( STRING , NAME = STRING ::: 33151
NAME , NAME = None , ::: 33054
NEWLINE DEDENT return NAME . NAME ::: 32954
NEWLINE DEDENT DEDENT return NAME NEWLINE ::: 32924
NEWLINE import NAME NEWLINE NAME . ::: 32743
NAME = [ STRING ] NEWLINE ::: 32712
= NUMBER , NAME = NUMBER ::: 32606
: NEWLINE INDENT NAME [ NAME ::: 32593
NEWLINE NAME . NAME = [ ::: 32577
NUMBER NEWLINE NAME . NAME = ::: 32570
NAME . NAME NEWLINE DEDENT DEDENT ::: 32558
NAME ) NEWLINE DEDENT DEDENT DEDENT ::: 32449
[ ] NEWLINE for NAME in ::: 32413
NAME NEWLINE DEDENT else : NEWLINE ::: 32310
. NAME NEWLINE import NAME . ::: 32288
NAME [ STRING ] NEWLINE NAME ::: 32241
NAME : NEWLINE INDENT raise NAME ::: 32226
{ STRING : NAME . NAME ::: 32204
= STRING ) , NAME ( ::: 32122
( STRING ) : NEWLINE INDENT ::: 32113
= NAME . NAME ( NUMBER ::: 32031
NAME ( STRING ) : NEWLINE ::: 31983
. NAME ( NAME ) , ::: 31926
) . NAME ( STRING ) ::: 31882
NAME ( NAME ( STRING ) ::: 31778
NAME ( STRING ) . NAME ::: 31737
NAME , NAME = NUMBER ) ::: 31667
. NAME , NAME = STRING ::: 31616
from . NAME import NAME , ::: 31610
NAME in NAME ( NAME ) ::: 31598
: NAME , STRING : NAME ::: 31573
NAME . NAME , STRING : ::: 31547
) NEWLINE return NAME ( NAME ::: 31506
( NAME . NAME ) ) ::: 31360
] ) NEWLINE NAME = NAME ::: 31354
, NAME = [ STRING ] ::: 31326
STRING : NAME . NAME , ::: 31321
NAME NEWLINE NAME = [ STRING ::: 31254
NAME , NAME NEWLINE from . ::: 31195
: NEWLINE INDENT return False NEWLINE ::: 31139
NEWLINE INDENT return False NEWLINE DEDENT ::: 31093
INDENT raise NAME ( STRING ) ::: 30955
) NEWLINE DEDENT except NAME : ::: 30875
NAME , NAME = True ) ::: 30845
NEWLINE NAME , NAME = NAME ::: 30836
, NAME = [ STRING , ::: 30795
. NAME : NEWLINE INDENT return ::: 30712
= NUMBER ) : NEWLINE INDENT ::: 30639
NAME = NUMBER ) : NEWLINE ::: 30633
] NEWLINE NAME . NAME ( ::: 30572
in NAME . NAME . NAME ::: 30555
from NAME . NAME import * ::: 30476
. NAME ( NAME ( STRING ::: 30435
= STRING ) NEWLINE NAME = ::: 30328
STRING NEWLINE import NAME NEWLINE from ::: 30293
STRING . NAME ( NAME . ::: 30273
NAME , NAME . NAME . ::: 30262
= NAME [ STRING ] NEWLINE ::: 30225
. NAME ( STRING ) : ::: 30219
if NAME is None : NEWLINE ::: 30205
NEWLINE NAME = ( STRING , ::: 30147
INDENT NAME = NAME ( STRING ::: 29996
NAME [ STRING ] , NAME ::: 29966
NAME ) : NEWLINE INDENT try ::: 29920
( * NAME , ** NAME ::: 29890
STRING , NAME = [ STRING ::: 29811
NAME , NAME . NAME ( ::: 29808
( STRING , NAME ( STRING ::: 29788
NAME NEWLINE DEDENT except NAME : ::: 29749
import * NEWLINE from NAME . ::: 29744
* NEWLINE from NAME . NAME ::: 29744
None ) : NEWLINE INDENT STRING ::: 29738
NAME = ( STRING , STRING ::: 29737
NEWLINE for NAME , NAME in ::: 29692
NAME [ NUMBER ] ) NEWLINE ::: 29642
NAME ( * NAME , ** ::: 29570
, NAME in NAME . NAME ::: 29501
. NAME import ( NAME , ::: 29482
from NAME import NAME as NAME ::: 29473
. NAME . NAME ( NUMBER ::: 29470
NAME , NAME in NAME . ::: 29399
) : NEWLINE INDENT return STRING ::: 29391
( STRING ) ) NEWLINE NAME ::: 29367
= NAME ( NAME , STRING ::: 29341
= NAME NEWLINE DEDENT def NAME ::: 29301
= NAME ( NAME = NAME ::: 29267
NUMBER , NUMBER , NUMBER ) ::: 29073
try : NEWLINE INDENT NAME . ::: 28989
return NAME ( NAME . NAME ::: 28925
NAME ( STRING , NAME , ::: 28877
NAME , STRING ) NEWLINE DEDENT ::: 28817
= True ) NEWLINE NAME = ::: 28799
True ) NEWLINE NAME = NAME ::: 28775
= NAME . NAME NEWLINE DEDENT ::: 28771
( NAME = STRING ) NEWLINE ::: 28703
( NUMBER , NUMBER , NUMBER ::: 28648
NAME = NAME NEWLINE DEDENT def ::: 28647
except NAME : NEWLINE INDENT NAME ::: 28617
NAME ) ) NEWLINE NAME = ::: 28579
NEWLINE INDENT NAME = [ ] ::: 28573
NAME , STRING : NAME . ::: 28539
] NEWLINE NAME = [ NAME ::: 28502
[ ( STRING , STRING ) ::: 28499
. NAME NEWLINE DEDENT DEDENT EOS ::: 28436
= [ ( STRING , STRING ::: 28426
NEWLINE DEDENT NAME = NAME ( ::: 28415
INDENT NAME = [ ] NEWLINE ::: 28410
STRING , NAME . NAME , ::: 28380
( NAME ) NEWLINE DEDENT NAME ::: 28310
NAME . NAME = [ ] ::: 28294
INDENT return NAME . NAME NEWLINE ::: 28268
NEWLINE NAME ( NAME = STRING ::: 28223
. NAME , STRING : NAME ::: 28216
: NEWLINE INDENT from NAME . ::: 28211
NEWLINE INDENT from NAME . NAME ::: 28211
, NAME = NUMBER ) : ::: 28110
, ** NAME ) NEWLINE DEDENT ::: 28050
. NAME = [ ] NEWLINE ::: 28047
NEWLINE INDENT NAME ( NAME ) ::: 28040
NAME , NAME = NAME ( ::: 28029
NAME ) NEWLINE return NAME . ::: 28017
NEWLINE DEDENT except : NEWLINE INDENT ::: 28016
NAME = NAME [ NUMBER ] ::: 28014
NAME as NAME NEWLINE NAME = ::: 27997
class NAME : NEWLINE INDENT NAME ::: 27991
. NAME ( ) NEWLINE EOS ::: 27969
: NEWLINE INDENT return STRING NEWLINE ::: 27913
, NAME = False ) NEWLINE ::: 27895
: NEWLINE INDENT import NAME NEWLINE ::: 27894
( NAME ) . NAME ( ::: 27891
NEWLINE INDENT return STRING NEWLINE DEDENT ::: 27880
is not None : NEWLINE INDENT ::: 27879
. NAME , STRING ) NEWLINE ::: 27768
) NEWLINE from NAME . NAME ::: 27738
( NAME = NUMBER ) NEWLINE ::: 27696
NAME NEWLINE from . . NAME ::: 27694
NAME ) NEWLINE NAME ( STRING ::: 27654
, STRING ) as NAME : ::: 27554
INDENT NAME ( NAME ) NEWLINE ::: 27508
NAME ( STRING ) , NAME ::: 27490
, NAME = NAME ( NAME ::: 27486
( NAME = NUMBER , NAME ::: 27470
= STRING ) : NEWLINE INDENT ::: 27465
NAME = STRING ) : NEWLINE ::: 27462
= { STRING : STRING , ::: 27422
STRING % ( NAME . NAME ::: 27416
NAME ( ) NEWLINE for NAME ::: 27396
: NAME . NAME , STRING ::: 27384
) : NEWLINE INDENT raise NAME ::: 27301
. NAME ( NUMBER , NUMBER ::: 27193
return NAME . NAME ( ) ::: 27191
= NAME NEWLINE NAME = NAME ::: 27137
NAME ) NEWLINE for NAME in ::: 27120
( STRING ) . NAME ( ::: 27069
NAME in NAME . NAME . ::: 27051
INDENT STRING NEWLINE NAME = STRING ::: 27010
NEWLINE from NAME import NAME as ::: 26968
. NAME = NAME ( ) ::: 26867
NAME = NAME NEWLINE DEDENT DEDENT ::: 26838
STRING : NEWLINE INDENT NAME = ::: 26801
STRING : NUMBER , STRING : ::: 26800
NUMBER , NUMBER ) NEWLINE NAME ::: 26779
= STRING . NAME ( NAME ::: 26569
NAME ) NEWLINE DEDENT NAME . ::: 26523
NAME ) for NAME in NAME ::: 26471
. import NAME NEWLINE from . ::: 26458
NAME ) NEWLINE DEDENT except NAME ::: 26448
NEWLINE NAME = [ STRING ] ::: 26434
else : NEWLINE INDENT return NAME ::: 26389
NAME import NAME NEWLINE NAME ( ::: 26370
. NAME [ STRING ] = ::: 26273
STRING , STRING : STRING } ::: 26271
NAME is not None : NEWLINE ::: 26263
NEWLINE INDENT NAME , NAME = ::: 26235
) NEWLINE try : NEWLINE INDENT ::: 26228
= [ STRING , STRING ] ::: 26168
NAME in NAME ( NUMBER , ::: 26166
NAME NEWLINE try : NEWLINE INDENT ::: 26139
NAME ( NAME ( NAME , ::: 26047
. NAME ( STRING % NAME ::: 25999
NAME [ STRING ] . NAME ::: 25901
NAME ( STRING ) NEWLINE EOS ::: 25881
STRING , STRING , NAME = ::: 25873
from . import NAME NEWLINE from ::: 25865
NUMBER : NEWLINE INDENT NAME = ::: 25826
NAME NEWLINE NAME = NUMBER NEWLINE ::: 25800
, NAME ) NEWLINE return NAME ::: 25766
return NAME ( NAME ) NEWLINE ::: 25758
) : NEWLINE INDENT with NAME ::: 25757
, NAME NEWLINE NAME = NAME ::: 25555
STRING ) NEWLINE NAME ( NAME ::: 25540
INDENT if NAME . NAME ( ::: 25510
= NAME ) NEWLINE NAME . ::: 25456
NAME ( NAME = NUMBER , ::: 25454
NAME = False , NAME = ::: 25452
NEWLINE INDENT pass NEWLINE DEDENT DEDENT ::: 25408
STRING ] NEWLINE NAME = NAME ::: 25405
STRING NEWLINE NAME = NUMBER NEWLINE ::: 25392
INDENT for NAME in NAME : ::: 25372
import NAME NEWLINE from . . ::: 25345
NAME == NUMBER : NEWLINE INDENT ::: 25268
STRING NEWLINE NAME . NAME . ::: 25253
: NEWLINE INDENT from NAME import ::: 25233
STRING ) ) NEWLINE NAME . ::: 25210
NAME = [ STRING ] , ::: 25206
NEWLINE DEDENT NAME . NAME = ::: 25200
NUMBER ] NEWLINE NAME = NAME ::: 25158
= NUMBER ) NEWLINE NAME = ::: 25136
( ) . NAME ( NAME ::: 25132
NAME import NAME NEWLINE NAME . ::: 25123
NAME ( NAME = True ) ::: 25070
INDENT for NAME in NAME . ::: 25066
in NAME ( NAME ) : ::: 25058
NAME = { } NEWLINE NAME ::: 25037
NAME = STRING ) NEWLINE DEDENT ::: 25028
== NUMBER : NEWLINE INDENT NAME ::: 24980
is None : NEWLINE INDENT NAME ::: 24960
) , ( STRING , STRING ::: 24937
import NAME as NAME NEWLINE NAME ::: 24929
= NAME . NAME [ STRING ::: 24929
, NAME ( NAME ) ) ::: 24921
) . NAME ( NAME , ::: 24849
[ STRING ] ) NEWLINE NAME ::: 24764
NAME . NAME = False NEWLINE ::: 24755
STRING , STRING ] NEWLINE NAME ::: 24747
NAME . NAME = True NEWLINE ::: 24732
. NAME ( STRING ) , ::: 24707
( NAME ) NEWLINE DEDENT return ::: 24625
NAME as NAME : NEWLINE INDENT ::: 24562
NEWLINE INDENT NAME = [ ( ::: 24500
NAME [ NAME ] NEWLINE DEDENT ::: 24485
if NAME ( NAME , NAME ::: 24366
, NAME = { STRING : ::: 24356
import NAME NEWLINE NAME ( NAME ::: 24352
, NAME ( NAME . NAME ::: 24327
NEWLINE INDENT NAME [ NAME ] ::: 24318
INDENT NAME , NAME = NAME ::: 24284
NAME ( NAME , ** NAME ::: 24282
, NUMBER ) NEWLINE NAME = ::: 24275
) , NAME = STRING ) ::: 24230
NUMBER , NUMBER , NUMBER ] ::: 24186
. NAME . NAME NEWLINE NAME ::: 24176
NEWLINE from . . NAME import ::: 24169
NEWLINE NAME ( STRING , NAME ::: 24156
STRING , NAME ) NEWLINE DEDENT ::: 24155
, NAME = STRING ) : ::: 24077
= NAME NEWLINE DEDENT DEDENT EOS ::: 24053
( NAME , ** NAME ) ::: 24010
BOS NEWLINE NAME = STRING NEWLINE ::: 23959
NAME [ NUMBER ] NEWLINE NAME ::: 23902
NAME : NEWLINE INDENT def NAME ::: 23902
) NEWLINE assert NAME . NAME ::: 23899
as NAME NEWLINE import NAME as ::: 23787
NAME NEWLINE NAME ( NAME = ::: 23780
. NAME ) ) NEWLINE DEDENT ::: 23779
[ NUMBER , NUMBER , NUMBER ::: 23747
NEWLINE INDENT from NAME import NAME ::: 23671
, NAME , NAME NEWLINE NAME ::: 23613
STRING : NEWLINE INDENT NAME . ::: 23581
( ) ) NEWLINE NAME . ::: 23534
, ] NEWLINE NAME = [ ::: 23531
. NAME ( NAME [ STRING ::: 23524
STRING , STRING ) NEWLINE DEDENT ::: 23524
STRING , STRING ) , ] ::: 23509
: NEWLINE INDENT return True NEWLINE ::: 23467
) NEWLINE DEDENT DEDENT return NAME ::: 23465
) , ] NEWLINE NAME = ::: 23437
, STRING ) , ] NEWLINE ::: 23426
) , ] NEWLINE DEDENT EOS ::: 23422
NEWLINE INDENT return True NEWLINE DEDENT ::: 23419
NUMBER NEWLINE for NAME in NAME ::: 23372
[ STRING ] [ STRING ] ::: 23367
NAME ( ) NEWLINE DEDENT NAME ::: 23348
) ) : NEWLINE INDENT NAME ::: 23332
. NAME ( STRING . NAME ::: 23286
) : NEWLINE INDENT NAME , ::: 23258
import * NEWLINE from NAME import ::: 23255
NEWLINE if NAME . NAME ( ::: 23248
NAME [ NUMBER ] , NAME ::: 23244
( NAME , NAME = NUMBER ::: 23169
NEWLINE return NAME ( NAME , ::: 23123
INDENT NAME = [ ( STRING ::: 23096
NEWLINE import NAME , NAME NEWLINE ::: 23053
class NAME : NEWLINE INDENT def ::: 23050
, STRING , NAME . NAME ::: 23044
) NEWLINE NAME ( STRING , ::: 22886
: NEWLINE INDENT NAME = ( ::: 22869
from NAME import * NEWLINE from ::: 22853
NAME . NAME . NAME as ::: 22793
. NAME . NAME as NAME ::: 22793
[ NUMBER ] NEWLINE NAME = ::: 22783
NEWLINE if not NAME . NAME ::: 22763
, NAME NEWLINE from . NAME ::: 22760
STRING , STRING ] ) NEWLINE ::: 22754
NEWLINE if not NAME : NEWLINE ::: 22719
None : NEWLINE INDENT NAME = ::: 22717
( STRING , NAME , NAME ::: 22675
STRING ) , ( STRING , ::: 22662
: NEWLINE INDENT if NAME == ::: 22635
STRING ) , ] NEWLINE NAME ::: 22624
( ) NEWLINE for NAME in ::: 22576
NAME , NAME ) NEWLINE return ::: 22546
BOS NEWLINE STRING NEWLINE NAME = ::: 22504
STRING ) . NAME ( ) ::: 22487
= [ STRING ] , NAME ::: 22414
, ( STRING , STRING ) ::: 22401
NAME = NUMBER NEWLINE for NAME ::: 22388
NEWLINE NAME = [ NAME ( ::: 22361
STRING NEWLINE if NAME . NAME ::: 22312
, STRING ) , ( STRING ::: 22292
NAME . NAME import ( NAME ::: 22269
( NAME . NAME [ NUMBER ::: 22211
= [ ] NEWLINE NAME = ::: 22138
[ STRING ] ) NEWLINE DEDENT ::: 22111
( NAME [ NUMBER ] ) ::: 22068
NAME , NAME = False ) ::: 22041
NAME ) ) : NEWLINE INDENT ::: 22027
( STRING ) NEWLINE DEDENT NAME ::: 22012
( NAME ( NAME ) , ::: 21933
, NAME , NAME = STRING ::: 21862
STRING ] = NAME . NAME ::: 21862
INDENT NAME = NAME NEWLINE NAME ::: 21848
( NAME ( NAME , NAME ::: 21844
NAME . NAME NEWLINE from NAME ::: 21826
STRING , STRING ) , ( ::: 21820
[ STRING ] = NAME . ::: 21785
= NUMBER NEWLINE NAME = NAME ::: 21776
INDENT return NAME . NAME . ::: 21743
NEWLINE INDENT STRING NEWLINE NAME ( ::: 21734
if NAME . NAME ( ) ::: 21704
( NAME [ STRING ] ) ::: 21662
, NAME , NAME NEWLINE import ::: 21622
, STRING , NAME = STRING ::: 21591
= NAME ) NEWLINE DEDENT EOS ::: 21576
DEDENT NAME = NAME ( NAME ::: 21569
NEWLINE def NAME ( NAME = ::: 21518
, NAME = False , NAME ::: 21504
NAME . NAME ( STRING . ::: 21499
NEWLINE NAME = NAME NEWLINE NAME ::: 21496
NAME = STRING NEWLINE import NAME ::: 21467
= STRING NEWLINE NAME = [ ::: 21413
) NEWLINE NAME = NUMBER NEWLINE ::: 21381
STRING NEWLINE for NAME in NAME ::: 21376
NEWLINE NAME = STRING NEWLINE import ::: 21311
None : NEWLINE INDENT NAME . ::: 21298
. NAME [ STRING ] NEWLINE ::: 21287
NEWLINE DEDENT if NAME . NAME ::: 21278
= NAME ( NAME ( NAME ::: 21252
NEWLINE NAME = { } NEWLINE ::: 21226
. NAME . NAME = NAME ::: 21192
. NAME ( STRING ) . ::: 21174
NEWLINE NAME . NAME [ STRING ::: 21164
= False ) : NEWLINE INDENT ::: 21148
NAME = False ) : NEWLINE ::: 21146
import NAME as NAME NEWLINE EOS ::: 21110
NAME , NAME = NUMBER , ::: 21098
NAME ( STRING ) NEWLINE return ::: 21087
from . . NAME import NAME ::: 21073
NAME [ STRING ] = STRING ::: 21066
= ( STRING , STRING , ::: 21058
( NUMBER ) NEWLINE NAME . ::: 21003
with NAME . NAME ( NAME ::: 21002
= STRING NEWLINE def NAME ( ::: 20986
NAME [ NUMBER ] . NAME ::: 20969
NAME = STRING NEWLINE def NAME ::: 20952
) NEWLINE NAME [ STRING ] ::: 20924
] NEWLINE NAME = NAME ( ::: 20871
= NUMBER NEWLINE for NAME in ::: 20849
BOS NEWLINE import NAME as NAME ::: 20808
NEWLINE DEDENT return NAME ( NAME ::: 20774
, NAME , NAME NEWLINE EOS ::: 20731
: NEWLINE INDENT NAME ( ) ::: 20693
: NEWLINE INDENT return NEWLINE DEDENT ::: 20692
DEDENT NAME . NAME ( ) ::: 20680
) NEWLINE NAME = NAME [ ::: 20601
, NAME ) NEWLINE NAME ( ::: 20598
, ) , ] NEWLINE DEDENT ::: 20594
: NEWLINE INDENT return None NEWLINE ::: 20518
NEWLINE INDENT return None NEWLINE DEDENT ::: 20506
NAME . NAME ) NEWLINE return ::: 20504
= NAME [ NUMBER ] NEWLINE ::: 20497
. NAME ( { STRING : ::: 20493
DEDENT NAME . NAME = NAME ::: 20458
NEWLINE INDENT if not NAME . ::: 20399
INDENT if not NAME . NAME ::: 20399
NAME , NAME in NAME ( ::: 20399
( STRING ) ) NEWLINE DEDENT ::: 20385
NEWLINE return NAME . NAME . ::: 20380
( STRING , NAME = NAME ::: 20375
NAME ) NEWLINE if NAME . ::: 20268
NAME ( NUMBER , NUMBER , ::: 20220
pass NEWLINE DEDENT def NAME ( ::: 20210
. NAME ( NAME ) . ::: 20110
. NAME as NAME NEWLINE from ::: 20109
NEWLINE INDENT NAME . NAME [ ::: 20093
[ STRING ] = STRING NEWLINE ::: 20085
except NAME as NAME : NEWLINE ::: 20047
DEDENT except NAME as NAME : ::: 20044
[ ] NEWLINE NAME . NAME ::: 20029
None , NAME = None ) ::: 19998
STRING , NAME . NAME . ::: 19955
) : NEWLINE INDENT NAME [ ::: 19843
, NAME = False ) : ::: 19800
STRING : NAME . NAME ( ::: 19760
( ) : NEWLINE INDENT if ::: 19739
INDENT for NAME in NAME ( ::: 19693
NAME import * NEWLINE NAME = ::: 19673
, NAME in NAME ( NAME ::: 19648
NAME ) : NEWLINE INDENT with ::: 19614
( STRING % ( NAME , ::: 19611
NEWLINE NAME . NAME = { ::: 19601
NEWLINE STRING NEWLINE NAME = STRING ::: 19589
= [ ] NEWLINE NAME . ::: 19586
STRING ] NEWLINE NAME . NAME ::: 19580
not NAME . NAME . NAME ::: 19568
NEWLINE if NAME . NAME : ::: 19563
NEWLINE INDENT NAME = { STRING ::: 19561
NAME ( STRING ) NEWLINE if ::: 19561
, STRING ] NEWLINE NAME = ::: 19554
. NAME = None NEWLINE DEDENT ::: 19523
NAME . NAME , NAME , ::: 19522
NAME NEWLINE DEDENT return NAME NEWLINE ::: 19501
NUMBER : NEWLINE INDENT NAME . ::: 19488
NAME ( NAME ) ) ) ::: 19459
{ STRING : NAME , STRING ::: 19450
NAME ) : NEWLINE INDENT raise ::: 19442
BOS NEWLINE import NAME , NAME ::: 19408
NEWLINE if NAME ( NAME ) ::: 19390
NAME : NEWLINE INDENT NAME [ ::: 19384
( NAME = True ) NEWLINE ::: 19373
: NEWLINE INDENT STRING NEWLINE pass ::: 19368
NEWLINE INDENT STRING NEWLINE pass NEWLINE ::: 19352
STRING NEWLINE try : NEWLINE INDENT ::: 19329
INDENT NAME = { STRING : ::: 19311
, NUMBER , NUMBER ) NEWLINE ::: 19295
INDENT STRING NEWLINE pass NEWLINE DEDENT ::: 19291
NAME . NAME ) , NAME ::: 19277
not None : NEWLINE INDENT NAME ::: 19266
, STRING ) : NEWLINE INDENT ::: 19241
( NAME ( STRING ) ) ::: 19227
NAME = STRING NEWLINE DEDENT EOS ::: 19224
DEDENT NAME . NAME . NAME ::: 19219
NAME . NAME ( { STRING ::: 19188
( ) NEWLINE NAME ( NAME ::: 19157
NUMBER , NAME = NUMBER ) ::: 19135
INDENT STRING NEWLINE return NAME ( ::: 19097
. NAME NEWLINE import NAME NEWLINE ::: 19080
NAME [ STRING ] [ STRING ::: 19076
( ) ) NEWLINE DEDENT EOS ::: 19072
) ) NEWLINE DEDENT return NAME ::: 19066
INDENT NAME = STRING NEWLINE DEDENT ::: 19030
( ) , NAME = STRING ::: 18977
try : NEWLINE INDENT from NAME ::: 18958
% ( NAME , NAME ) ::: 18930
NEWLINE NAME = STRING NEWLINE DEDENT ::: 18924
, NAME ) NEWLINE if NAME ::: 18915
( NUMBER , NAME . NAME ::: 18899
) , ( STRING , NAME ::: 18820
NEWLINE if NAME is None : ::: 18804
= NAME ) NEWLINE NAME = ::: 18795
NAME . NAME ( [ STRING ::: 18790
= STRING , NAME = NUMBER ::: 18772
) NEWLINE DEDENT return NAME . ::: 18752
= NAME ( STRING , STRING ::: 18741
= True , NAME = True ::: 18717
else : NEWLINE INDENT NAME ( ::: 18712
INDENT return NAME NEWLINE DEDENT DEDENT ::: 18704
DEDENT return NAME . NAME ( ::: 18679
STRING % NAME ) NEWLINE DEDENT ::: 18667
[ STRING ] . NAME ( ::: 18663
NAME ( NAME , NUMBER ) ::: 18657
, NAME , NAME . NAME ::: 18633
NEWLINE import NAME , NAME , ::: 18620
in NAME . NAME ( NAME ::: 18616
, NUMBER ) NEWLINE DEDENT EOS ::: 18570
STRING ) NEWLINE for NAME in ::: 18559
INDENT STRING NEWLINE if NAME . ::: 18555
NAME NEWLINE NAME = [ NAME ::: 18542
STRING , STRING ) ) NEWLINE ::: 18536
STRING NEWLINE NAME = [ STRING ::: 18527
INDENT STRING NEWLINE NAME = [ ::: 18515
( NAME , STRING , NAME ::: 18505
INDENT NAME [ NAME ] = ::: 18502
NAME . NAME , NUMBER ) ::: 18488
NAME ( NUMBER , NAME . ::: 18456
: NEWLINE INDENT NAME [ STRING ::: 18446
INDENT from NAME import NAME NEWLINE ::: 18387
. NAME ( ) NEWLINE for ::: 18386
: NUMBER , STRING : NUMBER ::: 18371
NEWLINE NAME = NUMBER NEWLINE EOS ::: 18364
STRING , NAME = NAME , ::: 18351
NAME ) NEWLINE NAME = STRING ::: 18337
NAME = [ NAME ( STRING ::: 18319
None , NAME = None , ::: 18311
( ) . NAME ( STRING ::: 18305
def NAME ( NAME , ** ::: 18283
INDENT pass NEWLINE DEDENT DEDENT EOS ::: 18235
NAME ( NAME ) , STRING ::: 18222
NAME ( NAME , NAME ( ::: 18210
, NAME ) ) NEWLINE NAME ::: 18199
. NAME . NAME import * ::: 18197
NAME [ NAME . NAME ] ::: 18191
NAME , NUMBER ) NEWLINE NAME ::: 18175
STRING NEWLINE NAME = { STRING ::: 18164
NAME ) NEWLINE if NAME : ::: 18156
NAME ( [ STRING , STRING ::: 18147
NAME ) NEWLINE return NAME ( ::: 18145
import NAME NEWLINE try : NEWLINE ::: 18136
NAME : NEWLINE INDENT for NAME ::: 18126
, STRING : NAME , STRING ::: 18097
NAME . NAME ( ( NAME ::: 18089
NAME ) NEWLINE DEDENT NAME = ::: 18077
NEWLINE INDENT NAME [ STRING ] ::: 18074
) ) NEWLINE NAME ( NAME ::: 18063
) NEWLINE if NAME ( NAME ::: 18031
NAME = False ) NEWLINE NAME ::: 18025
NUMBER ) NEWLINE DEDENT DEDENT EOS ::: 18022
: NEWLINE INDENT with NAME ( ::: 18018
STRING , NAME = True ) ::: 17999
[ NAME ] = NAME NEWLINE ::: 17987
if NAME . NAME ( STRING ::: 17982
= STRING NEWLINE import NAME NEWLINE ::: 17934
NAME , STRING ) as NAME ::: 17929
STRING ] ) NEWLINE NAME . ::: 17914
STRING , NAME ( STRING , ::: 17913
( STRING , NAME ( NAME ::: 17900
NEWLINE try : NEWLINE INDENT from ::: 17886
NEWLINE DEDENT except NAME as NAME ::: 17883
= NAME ( NAME = STRING ::: 17883
. NAME ( NAME [ NUMBER ::: 17846
if NAME . NAME ( NAME ::: 17841
, NAME , ** NAME ) ::: 17831
( NUMBER , NUMBER ) NEWLINE ::: 17826
not NAME . NAME : NEWLINE ::: 17804
= NAME . NAME [ NUMBER ::: 17788
NAME : NEWLINE INDENT pass NEWLINE ::: 17733
NAME ( NAME [ NAME ] ::: 17733
NAME = None NEWLINE NAME = ::: 17720
NEWLINE return NAME . NAME NEWLINE ::: 17707
NAME = True NEWLINE NAME = ::: 17696
NAME NEWLINE NAME = NAME NEWLINE ::: 17664
NAME ( NAME ) NEWLINE for ::: 17624
== STRING : NEWLINE INDENT return ::: 17621
NAME . NAME . NAME [ ::: 17600
NAME , STRING : NAME , ::: 17597
NAME , NAME , ** NAME ::: 17581
: NEWLINE INDENT NAME += NAME ::: 17577
= NAME . NAME ( [ ::: 17577
return NAME . NAME ( STRING ::: 17563
NAME ( NAME ) for NAME ::: 17535
DEDENT @ NAME NEWLINE def NAME ::: 17520
[ STRING ] = NAME NEWLINE ::: 17513
, NAME , NAME = NUMBER ::: 17509
. NAME , NUMBER ) NEWLINE ::: 17494
( NAME ) NEWLINE for NAME ::: 17493
* NAME ) : NEWLINE INDENT ::: 17493
] , NAME = [ STRING ::: 17466
NAME . NAME ( [ NAME ::: 17459
) NEWLINE NAME , NAME = ::: 17453
. NAME ) ) NEWLINE NAME ::: 17452
NEWLINE NAME = NAME [ STRING ::: 17445
( NAME , NAME = True ::: 17436
. NAME [ NAME ] NEWLINE ::: 17424
BOS NEWLINE from . NAME import ::: 17417
True ) NEWLINE NAME . NAME ::: 17415
( NAME = True , NAME ::: 17414
NEWLINE NAME = STRING . NAME ::: 17406
NAME . NAME = { } ::: 17406
, STRING : NUMBER , STRING ::: 17390
NAME , NAME ) NEWLINE if ::: 17378
, STRING ) NEWLINE DEDENT DEDENT ::: 17376
) : NEWLINE INDENT from NAME ::: 17373
return STRING . NAME ( NAME ::: 17373
{ STRING : { STRING : ::: 17370
. NAME ( STRING , NUMBER ::: 17368
NEWLINE DEDENT NAME . NAME . ::: 17358
NEWLINE INDENT NAME ( STRING % ::: 17354
. NAME = { } NEWLINE ::: 17320
STRING ) ) NEWLINE NAME = ::: 17291
, NAME . NAME ) ) ::: 17281
INDENT NAME = NAME NEWLINE DEDENT ::: 17232
= NAME , NAME = STRING ::: 17219
INDENT pass NEWLINE DEDENT def NAME ::: 17204
NEWLINE INDENT pass NEWLINE DEDENT def ::: 17204
NAME NEWLINE return NAME NEWLINE DEDENT ::: 17192
[ STRING , STRING ] NEWLINE ::: 17184
in NAME ( NAME . NAME ::: 17184
INDENT NAME ( NAME . NAME ::: 17169
NEWLINE INDENT NAME ( NAME . ::: 17169
NAME . NAME . NAME : ::: 17156
NAME import * NEWLINE import NAME ::: 17151
= [ NAME ( STRING , ::: 17139
NAME = True ) NEWLINE DEDENT ::: 17121
( NAME ) NEWLINE DEDENT except ::: 17032
( NAME ) for NAME in ::: 17014
NUMBER , NAME = NUMBER , ::: 16982
NEWLINE DEDENT @ NAME NEWLINE def ::: 16978
[ NUMBER ] ) NEWLINE NAME ::: 16960
. NAME ( NAME , NUMBER ::: 16935
INDENT NAME = NUMBER NEWLINE NAME ::: 16790
STRING ) NEWLINE NAME = STRING ::: 16772
NAME = STRING % ( NAME ::: 16761
import NAME NEWLINE DEDENT except NAME ::: 16752
NEWLINE NAME . NAME = False ::: 16733
NAME ( STRING , NUMBER ) ::: 16719
, STRING , STRING , ] ::: 16684
not NAME : NEWLINE INDENT NAME ::: 16656
( ) NEWLINE DEDENT def NAME ::: 16643
NEWLINE return NAME NEWLINE DEDENT DEDENT ::: 16632
NAME NEWLINE from NAME import * ::: 16615
if NAME is not None : ::: 16611
, STRING , NAME ) NEWLINE ::: 16608
NAME ( ) NEWLINE DEDENT def ::: 16543
NEWLINE with NAME . NAME ( ::: 16532
) NEWLINE DEDENT except : NEWLINE ::: 16529
= [ STRING ] NEWLINE NAME ::: 16513
] NEWLINE NAME = NAME [ ::: 16480
STRING ] , NAME = [ ::: 16476
NEWLINE NAME = STRING NEWLINE from ::: 16470
( STRING , STRING ) ) ::: 16442
. NAME . NAME : NEWLINE ::: 16396
. NAME ) NEWLINE return NAME ::: 16381
, NAME ( STRING ) ) ::: 16372
in NAME ( NUMBER , NAME ::: 16364
( NAME ) NEWLINE DEDENT else ::: 16354
NEWLINE if NAME . NAME . ::: 16352
. NAME [ NUMBER ] ) ::: 16350
INDENT if NAME . NAME : ::: 16346
STRING , STRING ] , NAME ::: 16302
. NAME == NAME . NAME ::: 16294
NAME . NAME ( STRING + ::: 16289
NEWLINE DEDENT for NAME in NAME ::: 16274
NAME , NAME NEWLINE DEDENT EOS ::: 16266
import NAME . NAME NEWLINE from ::: 16250
) NEWLINE NAME . NAME [ ::: 16234
( NAME . NAME , NUMBER ::: 16228
( ) ) NEWLINE NAME = ::: 16216
NAME in NAME ( NAME . ::: 16205
. NAME ) NEWLINE NAME ( ::: 16171
= { STRING : NAME . ::: 16144
NAME ( NAME = True , ::: 16133
: NAME . NAME . NAME ::: 16130
STRING , NAME = NAME ) ::: 16102
( NAME . NAME ) , ::: 16100
NAME [ STRING ] NEWLINE DEDENT ::: 16050
NAME . NAME ( ) [ ::: 16045
try : NEWLINE INDENT import NAME ::: 16045
INDENT from NAME . NAME import ::: 16044
> NUMBER : NEWLINE INDENT NAME ::: 16036
= NUMBER , NAME = True ::: 16033
. NAME , NAME , NAME ::: 16025
== NUMBER : NEWLINE INDENT return ::: 16024
INDENT if NAME ( NAME , ::: 16024
[ NAME ( STRING , NAME ::: 16010
STRING : { STRING : STRING ::: 15970
, NAME ( STRING , STRING ::: 15960
. NAME ( STRING % ( ::: 15956
NAME NEWLINE if NAME == STRING ::: 15951
STRING NEWLINE return NAME ( NAME ::: 15939
NAME [ NAME ] . NAME ::: 15909
NAME . NAME == NAME . ::: 15897
% ( NAME . NAME , ::: 15867
NEWLINE import NAME NEWLINE from . ::: 15867
STRING + NAME ( NAME ) ::: 15845
if not NAME . NAME ( ::: 15827
. NAME ( * NAME , ::: 15809
STRING , NAME = NUMBER ) ::: 15805
BOS NEWLINE import NAME . NAME ::: 15800
: NEWLINE INDENT if NAME is ::: 15759
. NAME ( STRING ) [ ::: 15739
, STRING : STRING } NEWLINE ::: 15738
NAME = NAME [ NAME ] ::: 15731
) NEWLINE if not NAME : ::: 15698
NUMBER NEWLINE NAME = NAME . ::: 15676
( NAME [ STRING ] , ::: 15656
) . NAME ( NAME = ::: 15643
, STRING ) ) NEWLINE NAME ::: 15619
. NAME : NEWLINE INDENT if ::: 15605
. NAME [ NUMBER ] NEWLINE ::: 15585
from . NAME import * NEWLINE ::: 15584
NAME . NAME ) NEWLINE if ::: 15582
NAME : NEWLINE INDENT NAME += ::: 15554
( STRING % NAME . NAME ::: 15534
. . NAME import NAME NEWLINE ::: 15502
= STRING NEWLINE NAME = NUMBER ::: 15494
= NAME . NAME [ NAME ::: 15475
[ STRING ] NEWLINE NAME . ::: 15443
. NAME ( STRING + NAME ::: 15412
NAME ( NAME ) == NUMBER ::: 15411
: NEWLINE INDENT if NAME [ ::: 15405
( ) NEWLINE return NAME NEWLINE ::: 15395
INDENT NAME [ STRING ] = ::: 15366
. NAME NEWLINE from NAME . ::: 15364
if not NAME . NAME : ::: 15359
if not NAME . NAME . ::: 15352
STRING , STRING , NAME . ::: 15344
, STRING ] , NAME = ::: 15342
NAME , NAME ) NEWLINE from ::: 15340
NAME NEWLINE if NAME . NAME ::: 15326
, STRING , STRING ] ) ::: 15312
( STRING ) NEWLINE if NAME ::: 15274
) . NAME ( NAME . ::: 15227
if NAME ( NAME . NAME ::: 15226
as NAME NEWLINE NAME = NAME ::: 15220
NAME . NAME , STRING , ::: 15217
( NAME . NAME [ STRING ::: 15209
NAME ( NAME ( ) ) ::: 15207
try : NEWLINE INDENT return NAME ::: 15189
for NAME in NAME ] NEWLINE ::: 15178
) NEWLINE DEDENT return NAME ( ::: 15178
STRING ) ) NEWLINE DEDENT EOS ::: 15161
STRING , NAME = NAME ( ::: 15155
NEWLINE NAME = NAME [ NUMBER ::: 15154
NEWLINE INDENT NAME = [ NAME ::: 15139
STRING in NAME : NEWLINE INDENT ::: 15133
] NEWLINE NAME = STRING NEWLINE ::: 15119
STRING : STRING } NEWLINE NAME ::: 15092
NAME = NAME ( NAME [ ::: 15074
import NAME NEWLINE NAME = NUMBER ::: 15071
. NAME . NAME NEWLINE DEDENT ::: 15069
STRING ) NEWLINE DEDENT else : ::: 15065
NEWLINE assert NAME . NAME == ::: 15055
: NEWLINE INDENT if NAME : ::: 15047
NAME NEWLINE import NAME , NAME ::: 15017
( NAME , STRING ) as ::: 14986
) NEWLINE NAME = [ NAME ::: 14968
STRING . NAME ( NAME , ::: 14963
( NAME ) ) ) NEWLINE ::: 14961
. NAME ( [ STRING , ::: 14936
NAME ( STRING % NAME . ::: 14925
NAME ) NEWLINE if not NAME ::: 14878
: NEWLINE INDENT STRING NEWLINE for ::: 14853
NEWLINE from . NAME import * ::: 14842
] = NAME . NAME ( ::: 14824
) == NUMBER : NEWLINE INDENT ::: 14765
= STRING ) NEWLINE DEDENT EOS ::: 14752
. NAME == STRING : NEWLINE ::: 14722
= NAME ( ) NEWLINE DEDENT ::: 14689
. NAME ( ) ) ) ::: 14681
with NAME ( NAME , STRING ::: 14680
DEDENT DEDENT else : NEWLINE INDENT ::: 14675
INDENT if NAME : NEWLINE INDENT ::: 14670
NEWLINE INDENT if NAME : NEWLINE ::: 14670
NEWLINE INDENT STRING NEWLINE for NAME ::: 14644
NAME ( ** NAME ) NEWLINE ::: 14630
NAME . NAME ( NAME + ::: 14604
NAME . NAME = NAME [ ::: 14557
NAME . NAME == STRING : ::: 14550
. NAME ( STRING ) ( ::: 14545
) . NAME ( STRING , ::: 14501
NAME . NAME ) . NAME ::: 14477
NEWLINE INDENT STRING NEWLINE if not ::: 14470
) for NAME in NAME ] ::: 14465
) NEWLINE NAME = { STRING ::: 14457
INDENT if NAME . NAME . ::: 14444
NAME in NAME ( NAME ( ::: 14441
NAME , NAME , NAME . ::: 14424
NEWLINE assert NAME . NAME ( ::: 14388
: NEWLINE INDENT STRING NEWLINE try ::: 14367
NEWLINE INDENT STRING NEWLINE try : ::: 14367
NAME ] = NAME NEWLINE DEDENT ::: 14365
NEWLINE INDENT NAME ( STRING , ::: 14349
= { STRING : STRING } ::: 14344
: NEWLINE INDENT with NAME . ::: 14336
NEWLINE INDENT with NAME . NAME ::: 14336
NUMBER : NEWLINE INDENT NAME ( ::: 14316
NEWLINE NAME = None NEWLINE NAME ::: 14304
NAME ( NAME ( STRING , ::: 14304
INDENT STRING NEWLINE try : NEWLINE ::: 14299
NAME NEWLINE DEDENT NAME = NAME ::: 14290
NAME ) , NAME . NAME ::: 14267
NAME ) NEWLINE NAME = [ ::: 14259
= NAME [ NAME ] NEWLINE ::: 14226
) NEWLINE for NAME , NAME ::: 14221
, ** NAME ) NEWLINE NAME ::: 14209
STRING ) NEWLINE DEDENT def NAME ::: 14207
. NAME = False NEWLINE NAME ::: 14202
) NEWLINE NAME ( STRING % ::: 14197
NAME ) NEWLINE DEDENT DEDENT return ::: 14192
) NEWLINE NAME ( ) NEWLINE ::: 14186
) : NEWLINE INDENT global NAME ::: 14152
NEWLINE INDENT NAME = [ STRING ::: 14136
NAME == NAME : NEWLINE INDENT ::: 14127
[ NUMBER ] . NAME ( ::: 14117
INDENT return NAME ( NAME , ::: 14117
, STRING , STRING ] , ::: 14089
** NAME ) NEWLINE NAME . ::: 14089
= NUMBER , NAME = STRING ::: 14081
: NEWLINE INDENT return NUMBER NEWLINE ::: 14075
. NAME [ NAME . NAME ::: 14071
INDENT STRING NEWLINE if not NAME ::: 14061
NEWLINE INDENT return NUMBER NEWLINE DEDENT ::: 14043
NAME ( NUMBER , NAME ) ::: 14010
DEDENT except : NEWLINE INDENT NAME ::: 14004
NAME ( NAME ) ) : ::: 14001
. NAME [ NAME ] = ::: 13997
NEWLINE NAME . NAME = True ::: 13992
= STRING , NAME = True ::: 13973
NAME . NAME [ NAME . ::: 13972
( NAME ) ) : NEWLINE ::: 13967
NEWLINE INDENT NAME = { } ::: 13938
NAME [ NAME ] ) NEWLINE ::: 13925
NAME = STRING NEWLINE from NAME ::: 13907
, NUMBER ) : NEWLINE INDENT ::: 13901
INDENT NAME = { } NEWLINE ::: 13875
} NEWLINE NAME = NAME . ::: 13866
( ) : NEWLINE INDENT return ::: 13860
= False NEWLINE NAME . NAME ::: 13846
) ) NEWLINE return NAME NEWLINE ::: 13846
NEWLINE NAME = NUMBER NEWLINE for ::: 13839
NAME ( STRING ) ( NAME ::: 13834
} NEWLINE NAME . NAME = ::: 13833
( ) , NAME . NAME ::: 13812
[ NUMBER ] ) NEWLINE DEDENT ::: 13803
except NAME : NEWLINE INDENT pass ::: 13783
None ) : NEWLINE INDENT if ::: 13768
in NAME ( NAME ( NAME ::: 13747
NAME in NAME ( NUMBER ) ::: 13746
NAME ( ) , NAME . ::: 13729
STRING ] ) NEWLINE DEDENT EOS ::: 13712
( NUMBER ) NEWLINE NAME = ::: 13694
NAME , NUMBER ) NEWLINE DEDENT ::: 13673
] NEWLINE DEDENT else : NEWLINE ::: 13668
INDENT NAME . NAME = STRING ::: 13643
NEWLINE NAME = True NEWLINE NAME ::: 13637
) . NAME ( * NAME ::: 13631
NAME ( ) NEWLINE DEDENT return ::: 13601
NAME = STRING ) , ) ::: 13593
( NAME . NAME ( NUMBER ::: 13550
NEWLINE DEDENT DEDENT else : NEWLINE ::: 13548
( NAME , NAME ( NAME ::: 13528
) . NAME ( ) ) ::: 13509
, NAME = NAME ( ) ::: 13482
) : NEWLINE INDENT class NAME ::: 13476
) , ) , ] NEWLINE ::: 13468
NAME = False NEWLINE NAME = ::: 13458
( NAME , STRING , STRING ::: 13445
INDENT return NAME ( NAME . ::: 13444
NUMBER ] NEWLINE NAME . NAME ::: 13424
. NAME = True NEWLINE NAME ::: 13424
, NAME . NAME ) : ::: 13420
) NEWLINE from NAME import NAME ::: 13416
NAME = False NEWLINE NAME . ::: 13412
INDENT STRING NEWLINE NAME ( NAME ::: 13411
NAME = NUMBER ) NEWLINE DEDENT ::: 13410
NEWLINE NAME . NAME ( [ ::: 13393
) NEWLINE NAME = [ ] ::: 13378
. NAME . NAME NEWLINE import ::: 13350
NAME ( NUMBER , NAME ( ::: 13346
NAME , STRING , STRING ) ::: 13345
. NAME [ STRING ] ) ::: 13319
: NEWLINE INDENT return STRING % ::: 13288
] ) NEWLINE DEDENT DEDENT EOS ::: 13272
False ) NEWLINE NAME . NAME ::: 13271
( NAME , NUMBER ) NEWLINE ::: 13269
[ STRING ] : NEWLINE INDENT ::: 13267
NEWLINE return NAME ( NAME ) ::: 13266
NUMBER , NUMBER ) ) NEWLINE ::: 13253
NAME , STRING ) : NEWLINE ::: 13223
NUMBER , STRING : NUMBER , ::: 13221
[ STRING , STRING ] , ::: 13221
NAME , NAME , * NAME ::: 13219
[ NAME for NAME in NAME ::: 13209
STRING NEWLINE pass NEWLINE DEDENT EOS ::: 13203
True , NAME = True ) ::: 13197
, NAME = True ) , ::: 13155
( STRING ) ( NAME = ::: 13148
NEWLINE try : NEWLINE INDENT import ::: 13116
NAME ) ) NEWLINE return NAME ::: 13112
) ) NEWLINE NAME ( STRING ::: 13088
INDENT return False NEWLINE DEDENT DEDENT ::: 13078
) for NAME in NAME . ::: 13052
NEWLINE DEDENT except NAME . NAME ::: 13051
STRING % NAME ) NEWLINE NAME ::: 13048
STRING , STRING ] NEWLINE EOS ::: 13033
: NEWLINE INDENT if NAME in ::: 13025
return NAME , NAME NEWLINE DEDENT ::: 13023
NAME ( ) ) ) NEWLINE ::: 13020
NEWLINE INDENT with NAME ( NAME ::: 12993
NAME ) NEWLINE from NAME . ::: 12988
NAME ( ) NEWLINE DEDENT except ::: 12980
NEWLINE if NAME is not None ::: 12977
. NAME import * NEWLINE NAME ::: 12973
: NEWLINE INDENT NAME = None ::: 12965
) NEWLINE NAME = ( STRING ::: 12957
] , NAME = STRING , ::: 12941
** NAME ) NEWLINE DEDENT EOS ::: 12937
= True ) : NEWLINE INDENT ::: 12914
NAME = True ) : NEWLINE ::: 12914
NEWLINE INDENT NAME = None NEWLINE ::: 12890
NAME ) ) NEWLINE NAME ( ::: 12885
( ) NEWLINE NAME ( STRING ::: 12876
if NAME == NUMBER : NEWLINE ::: 12837
STRING , NAME ( STRING ) ::: 12794
INDENT STRING NEWLINE NAME = { ::: 12781
. NAME ( ) , STRING ::: 12779
STRING NEWLINE NAME = [ ] ::: 12777
BOS NEWLINE from NAME import * ::: 12772
) NEWLINE DEDENT except NAME as ::: 12769
STRING ) NEWLINE DEDENT NAME . ::: 12758
. NAME ) NEWLINE if NAME ::: 12753
if not NAME ( NAME , ::: 12753
= True NEWLINE NAME . NAME ::: 12750
= NUMBER ) NEWLINE NAME . ::: 12742
NEWLINE DEDENT DEDENT NAME . NAME ::: 12739
STRING ] = STRING NEWLINE NAME ::: 12734
INDENT if NAME . NAME == ::: 12729
STRING , NAME = NUMBER , ::: 12723
) NEWLINE assert NAME ( NAME ::: 12721
NAME ) as NAME : NEWLINE ::: 12712
: NEWLINE INDENT for NAME , ::: 12708
NAME ) : NEWLINE INDENT class ::: 12669
NAME ( NAME ) + STRING ::: 12668
STRING , NAME , NAME = ::: 12641
import NAME NEWLINE if NAME == ::: 12638
[ STRING , STRING ] ) ::: 12638
, NAME ) NEWLINE from NAME ::: 12628
) , NAME ) NEWLINE DEDENT ::: 12627
INDENT if NAME ( NAME ) ::: 12616
NAME . NAME ( ) == ::: 12601
) , STRING ) NEWLINE NAME ::: 12599
. NAME . NAME ) ) ::: 12581
NAME ( NAME ( NAME ( ::: 12576
NAME [ NUMBER ] NEWLINE DEDENT ::: 12565
NEWLINE INDENT for NAME , NAME ::: 12555
( STRING ) , NAME = ::: 12553
if NAME : NEWLINE INDENT return ::: 12549
) : NEWLINE INDENT @ NAME ::: 12538
NAME ) : NEWLINE INDENT from ::: 12522
. NAME = STRING NEWLINE DEDENT ::: 12520
NAME = { STRING : [ ::: 12503
, NAME [ STRING ] ) ::: 12496
NAME ( STRING ) ) , ::: 12490
NAME ( NUMBER ) ) NEWLINE ::: 12483
* NEWLINE from NAME import * ::: 12481
. NAME = NUMBER NEWLINE DEDENT ::: 12464
NEWLINE DEDENT elif NAME . NAME ::: 12458
NEWLINE if NAME ( NAME , ::: 12419
: { STRING : STRING , ::: 12409
not NAME : NEWLINE INDENT return ::: 12405
NUMBER ] , NAME [ NUMBER ::: 12375
import * NEWLINE import NAME NEWLINE ::: 12365
, * NAME ) : NEWLINE ::: 12362
NAME ( { STRING : NAME ::: 12356
NAME ) , NAME ( NAME ::: 12347
NAME ( STRING ) , STRING ::: 12344
INDENT NAME . NAME ( NUMBER ::: 12343
( NAME ( ) ) NEWLINE ::: 12340
) ) ) NEWLINE DEDENT EOS ::: 12310
( NAME , NAME = False ::: 12302
NAME , NAME ( NAME ) ::: 12296
NAME ) . NAME ( * ::: 12285
NEWLINE INDENT NAME = NAME + ::: 12256
NAME = ( NAME . NAME ::: 12255
, NAME . NAME ) , ::: 12249
: NEWLINE INDENT global NAME NEWLINE ::: 12246
NAME ( NAME = NAME ( ::: 12244
) NEWLINE NAME ( NAME ( ::: 12243
, STRING ) NEWLINE NAME ( ::: 12240
STRING : NAME . NAME . ::: 12220
from NAME import * NEWLINE NAME ::: 12216
. NAME ) . NAME ( ::: 12215
[ NUMBER ] , NAME [ ::: 12205
NUMBER , NUMBER ) : NEWLINE ::: 12179
, STRING ) . NAME ( ::: 12175
[ NAME ] ) NEWLINE DEDENT ::: 12174
INDENT from NAME . NAME . ::: 12167
) ) , NAME ( STRING ::: 12157
NEWLINE return NAME ( NAME . ::: 12150
. NAME ( ** NAME ) ::: 12147
= { } NEWLINE for NAME ::: 12135
NAME , * NAME ) : ::: 12134
NAME NEWLINE NAME = ( STRING ::: 12131
NAME = { } NEWLINE for ::: 12128
NAME import NAME NEWLINE DEDENT except ::: 12123
} ) NEWLINE NAME . NAME ::: 12102
) ) NEWLINE DEDENT DEDENT DEDENT ::: 12101
( NUMBER , NAME ( NAME ::: 12084
NAME [ NAME ] NEWLINE NAME ::: 12066
NAME ) . NAME ( STRING ::: 12050
, NUMBER ) ) NEWLINE NAME ::: 12047
INDENT NAME . NAME [ NAME ::: 12040
( NUMBER , NUMBER ) ) ::: 12035
: NEWLINE INDENT return NAME [ ::: 12023
NEWLINE INDENT NAME = STRING % ::: 12016
is None : NEWLINE INDENT return ::: 12013
NAME NEWLINE DEDENT DEDENT DEDENT EOS ::: 12001
from NAME import NAME NEWLINE DEDENT ::: 11994
NAME ( STRING ) NEWLINE for ::: 11982
( NAME ) NEWLINE DEDENT def ::: 11981
NAME ) : NEWLINE INDENT @ ::: 11957
NAME NEWLINE DEDENT NAME . NAME ::: 11956
INDENT STRING NEWLINE for NAME in ::: 11956
NAME = { STRING : { ::: 11949
NAME NEWLINE NAME = { STRING ::: 11937
( STRING ) NEWLINE for NAME ::: 11907
] , NAME [ STRING ] ::: 11903
NAME . NAME NEWLINE if NAME ::: 11878
NAME = ( NUMBER , NUMBER ::: 11875
NAME ) ) ) NEWLINE DEDENT ::: 11861
not in NAME : NEWLINE INDENT ::: 11860
NEWLINE DEDENT try : NEWLINE INDENT ::: 11858
NAME ) ) NEWLINE DEDENT return ::: 11843
NAME = ( STRING , ) ::: 11841
] NEWLINE NAME = [ STRING ::: 11837
( STRING , NUMBER ) NEWLINE ::: 11826
NAME = True NEWLINE NAME . ::: 11823
DEDENT NAME . NAME ( STRING ::: 11800
STRING ) NEWLINE DEDENT NAME = ::: 11799
: NAME . NAME ( STRING ::: 11795
NUMBER ] ) NEWLINE NAME = ::: 11792
[ STRING ] , NAME [ ::: 11777
DEDENT else : NEWLINE INDENT raise ::: 11775
( NUMBER ) : NEWLINE INDENT ::: 11742
STRING : NAME . NAME } ::: 11738
. NAME ( ) [ NUMBER ::: 11737
) , NAME = NAME . ::: 11732
NEWLINE INDENT if NAME in NAME ::: 11720
NAME ] NEWLINE NAME = NAME ::: 11713
STRING ] NEWLINE NAME = [ ::: 11702
( NAME [ NUMBER ] , ::: 11694
( [ STRING , STRING , ::: 11683
NUMBER NEWLINE NAME . NAME ( ::: 11672
) > NUMBER : NEWLINE INDENT ::: 11666
] , NAME [ NUMBER ] ::: 11658
) : NEWLINE INDENT import NAME ::: 11653
NUMBER NEWLINE NAME = NAME ( ::: 11643
while True : NEWLINE INDENT NAME ::: 11640
NAME > NUMBER : NEWLINE INDENT ::: 11640
, NAME = NAME ( STRING ::: 11639
) : NEWLINE INDENT assert NAME ::: 11638
STRING : STRING } ) NEWLINE ::: 11636
STRING NEWLINE NAME ( NAME , ::: 11626
= True , NAME = STRING ::: 11623
NEWLINE DEDENT DEDENT DEDENT DEDENT EOS ::: 11619
{ } NEWLINE NAME . NAME ::: 11611
STRING NEWLINE import NAME NEWLINE NAME ::: 11596
NAME . NAME is not None ::: 11596
NAME NEWLINE for NAME in NAME ::: 11592
= STRING NEWLINE NAME = { ::: 11583
NEWLINE NAME = STRING NEWLINE def ::: 11581
NEWLINE INDENT NAME ( ) NEWLINE ::: 11579
NAME import NAME NEWLINE if NAME ::: 11579
. NAME [ STRING ] . ::: 11577
) ) NEWLINE DEDENT else : ::: 11574
( ) NEWLINE DEDENT return NAME ::: 11569
INDENT NAME ( STRING , NAME ::: 11557
if STRING in NAME : NEWLINE ::: 11556
( NAME , STRING ) : ::: 11555
{ STRING : STRING } ) ::: 11517
NAME ) == NUMBER : NEWLINE ::: 11502
INDENT with NAME . NAME ( ::: 11498
NAME ( [ NAME . NAME ::: 11482
) NEWLINE if not NAME . ::: 11475
NUMBER , NAME = True ) ::: 11470
, NAME = True ) : ::: 11447
) NEWLINE DEDENT NAME ( NAME ::: 11447
( NAME , NAME , ** ::: 11440
NAME ( NUMBER ) : NEWLINE ::: 11437
NEWLINE NAME ( NAME ( NAME ::: 11428
if NAME ( NAME ) == ::: 11423
: NEWLINE INDENT NAME += NUMBER ::: 11416
if NAME . NAME == STRING ::: 11416
NAME = NAME ( NUMBER , ::: 11407
STRING ) NEWLINE DEDENT return NAME ::: 11407
STRING ] , NAME [ STRING ::: 11401
NAME = None NEWLINE DEDENT EOS ::: 11397
) : NEWLINE INDENT NAME += ::: 11389
NAME = NUMBER NEWLINE DEDENT EOS ::: 11387
INDENT raise NAME ( STRING % ::: 11376
( NAME , NAME ) , ::: 11375
INDENT NAME = NAME [ NAME ::: 11349
NAME [ STRING ] : NEWLINE ::: 11348
NEWLINE from NAME import ( NAME ::: 11347
NEWLINE INDENT return NEWLINE DEDENT NAME ::: 11307
STRING ] : NEWLINE INDENT NAME ::: 11304
. NAME . NAME , STRING ::: 11298
= { STRING : { STRING ::: 11297
== NAME . NAME : NEWLINE ::: 11274
NAME = [ ] NEWLINE DEDENT ::: 11247
STRING ] ) NEWLINE NAME = ::: 11242
from NAME . NAME import ( ::: 11228
( ) NEWLINE DEDENT else : ::: 11225
NAME = [ NUMBER , NUMBER ::: 11225
NUMBER : NEWLINE INDENT return NAME ::: 11219
NEWLINE while True : NEWLINE INDENT ::: 11211
STRING STRING STRING STRING STRING STRING ::: 11174
INDENT for NAME , NAME in ::: 11171
, NAME NEWLINE import NAME . ::: 11165
from NAME import ( NAME , ::: 11162
= { } NEWLINE NAME . ::: 11145
NAME ( STRING ) [ NUMBER ::: 11139
( NAME ) , STRING ) ::: 11138
, NAME , NAME ) ) ::: 11127
NAME ( ) [ NUMBER ] ::: 11123
STRING ] , NAME = STRING ::: 11123
STRING ) . NAME ( STRING ::: 11118
NAME , NAME , ) NEWLINE ::: 11102
STRING : NAME } ) NEWLINE ::: 11093
INDENT return NAME ( NAME ) ::: 11090
else : NEWLINE INDENT raise NAME ::: 11090
NAME ( ) NEWLINE DEDENT else ::: 11075
, NAME ) NEWLINE DEDENT return ::: 11060
NAME ( ( NAME , NAME ::: 11059
NEWLINE INDENT NAME += NUMBER NEWLINE ::: 11035
NEWLINE NAME = False NEWLINE NAME ::: 11028
= True ) NEWLINE NAME . ::: 11026
) NEWLINE with NAME . NAME ::: 11020
: NEWLINE INDENT NAME = True ::: 11010
, STRING : { STRING : ::: 10997
. NAME . NAME import ( ::: 10987
( ) NEWLINE DEDENT NAME . ::: 10975
NAME ] NEWLINE NAME . NAME ::: 10966
( STRING ) NEWLINE return NAME ::: 10963
NEWLINE NAME = NAME ( NUMBER ::: 10940
NUMBER NEWLINE NAME = STRING NEWLINE ::: 10935
= NUMBER NEWLINE NAME = STRING ::: 10927
class NAME ( NAME , NAME ::: 10921
NEWLINE INDENT NAME = True NEWLINE ::: 10911
, NAME , NAME = False ::: 10908
NEWLINE NAME ( STRING % NAME ::: 10887
NUMBER NEWLINE DEDENT else : NEWLINE ::: 10881
NAME ) ) NEWLINE DEDENT NAME ::: 10880
[ NAME ] . NAME ( ::: 10879
: NEWLINE INDENT raise NAME . ::: 10873
NEWLINE INDENT raise NAME . NAME ::: 10873
DEDENT return NAME NEWLINE DEDENT DEDENT ::: 10872
NAME , STRING : NAME } ::: 10871
( NAME , * NAME ) ::: 10870
NAME ) NEWLINE DEDENT if NAME ::: 10855
NEWLINE INDENT import NAME NEWLINE DEDENT ::: 10842
except NAME : NEWLINE INDENT return ::: 10825
NAME ) , NAME ) NEWLINE ::: 10807
NEWLINE class NAME ( NAME , ::: 10800
STRING NEWLINE DEDENT else : NEWLINE ::: 10797
STRING ] , NAME = NAME ::: 10776
NEWLINE INDENT if NAME is None ::: 10764
. NAME ( NAME [ NAME ::: 10763
) NEWLINE if NAME is None ::: 10759
( ) ) NEWLINE DEDENT DEDENT ::: 10752
in NAME . NAME ( STRING ::: 10745
NUMBER ) ) NEWLINE NAME . ::: 10743
) ) NEWLINE DEDENT NAME . ::: 10733
NUMBER ) : NEWLINE INDENT STRING ::: 10732
* NEWLINE from NAME import NAME ::: 10728
) NEWLINE NAME = [ STRING ::: 10719
NAME . NAME ( ) ] ::: 10711
) , STRING ) NEWLINE DEDENT ::: 10706
NAME . NAME ) NEWLINE EOS ::: 10698
NAME : NEWLINE INDENT from NAME ::: 10696
NEWLINE @ NAME NEWLINE def NAME ::: 10686
( STRING ) NEWLINE DEDENT else ::: 10686
. NAME ( STRING , [ ::: 10684
STRING : [ STRING , STRING ::: 10678
STRING , NUMBER ) NEWLINE NAME ::: 10671
) for NAME in NAME ( ::: 10659
. NAME [ STRING ] , ::: 10652
if NAME in NAME : NEWLINE ::: 10651
NAME , STRING , NAME ) ::: 10637
[ STRING ] , STRING : ::: 10624
) , NAME = False ) ::: 10620
( NAME ( STRING ) , ::: 10611
NEWLINE INDENT import NAME NEWLINE NAME ::: 10607
= ( STRING , ) NEWLINE ::: 10603
NAME . NAME is None : ::: 10601
NAME < NUMBER : NEWLINE INDENT ::: 10600
. NAME import NAME NEWLINE DEDENT ::: 10591
NAME ( STRING + NAME ( ::: 10584
STRING . NAME ( NAME ( ::: 10581
NAME = NAME ) NEWLINE return ::: 10559
( STRING % ( NAME . ::: 10554
NAME = NAME ( ) , ::: 10542
( STRING + NAME ( NAME ::: 10541
( NAME [ NAME ] ) ::: 10526
: NAME . NAME ( NAME ::: 10520
NEWLINE NAME . NAME [ NAME ::: 10517
INDENT return STRING NEWLINE DEDENT DEDENT ::: 10513
. NAME is None : NEWLINE ::: 10503
NAME ( NAME ) > NUMBER ::: 10499
STRING ) NEWLINE def NAME ( ::: 10490
NAME for NAME in NAME . ::: 10486
: NEWLINE INDENT NAME = False ::: 10476
( NUMBER , NUMBER ) : ::: 10472
STRING NEWLINE if NAME ( NAME ::: 10452
STRING ) , NAME . NAME ::: 10451
, STRING : STRING , } ::: 10441
NEWLINE DEDENT elif NAME == STRING ::: 10424
] = NAME . NAME NEWLINE ::: 10413
NAME = False ) NEWLINE DEDENT ::: 10410
NEWLINE INDENT NAME = False NEWLINE ::: 10403
. NAME ( ( NAME , ::: 10394
NAME ) NEWLINE if NAME is ::: 10391
} NEWLINE for NAME in NAME ::: 10390
+ STRING + NAME ( NAME ::: 10375
in NAME ( NUMBER ) : ::: 10375
) NEWLINE DEDENT except NAME . ::: 10365
NEWLINE INDENT NAME = ( STRING ::: 10360
) NEWLINE if NAME == STRING ::: 10351
STRING NEWLINE DEDENT def NAME ( ::: 10347
( STRING ) [ NUMBER ] ::: 10341
NAME = STRING NEWLINE for NAME ::: 10338
NUMBER , NAME = STRING ) ::: 10334
, ( STRING , NAME . ::: 10308
if NAME . NAME is None ::: 10300
) , NAME . NAME ) ::: 10299
return STRING NEWLINE DEDENT DEDENT EOS ::: 10295
. NAME ( NAME = False ::: 10289
= { STRING : NAME , ::: 10284
NEWLINE def NAME ( * NAME ::: 10277
. NAME NEWLINE DEDENT def NAME ::: 10276
STRING ) NEWLINE NAME = [ ::: 10273
. NAME ( NAME ( ) ::: 10273
) , STRING : NAME . ::: 10269
( STRING , NAME ) , ::: 10256
STRING ] NEWLINE NAME = STRING ::: 10243
= True ) NEWLINE DEDENT EOS ::: 10237
== NAME : NEWLINE INDENT NAME ::: 10201
NEWLINE import NAME NEWLINE if NAME ::: 10198
not NAME ( NAME , NAME ::: 10191
( ) NEWLINE NAME = STRING ::: 10185
NEWLINE if NAME . NAME == ::: 10174
NAME [ STRING ] , STRING ::: 10173
NEWLINE NAME , NAME , NAME ::: 10170
( NAME , NAME , * ::: 10168
NAME ( NAME ) NEWLINE assert ::: 10161
INDENT NAME = STRING . NAME ::: 10154
NEWLINE INDENT NAME = STRING . ::: 10154
( ) ) : NEWLINE INDENT ::: 10136
( NUMBER , NUMBER ) , ::: 10129
NUMBER ) NEWLINE NAME ( NAME ::: 10128
NAME import * NEWLINE from . ::: 10112
: NEWLINE INDENT if ( NAME ::: 10103
: NEWLINE INDENT break NEWLINE DEDENT ::: 10100
= NAME ) NEWLINE DEDENT DEDENT ::: 10097
NEWLINE NAME = NAME NEWLINE DEDENT ::: 10091
( STRING , NAME = True ::: 10079
] == STRING : NEWLINE INDENT ::: 10078
NAME : NEWLINE INDENT STRING NEWLINE ::: 10076
: NEWLINE INDENT continue NEWLINE DEDENT ::: 10070
) [ NUMBER ] NEWLINE NAME ::: 10069
** NAME ) NEWLINE DEDENT DEDENT ::: 10068
elif NAME == STRING : NEWLINE ::: 10061
DEDENT elif NAME == STRING : ::: 10058
STRING , NAME ( NAME . ::: 10054
, NAME ) NEWLINE DEDENT NAME ::: 10048
, STRING ] ) NEWLINE NAME ::: 10044
) ) , ( STRING , ::: 10038
NAME . NAME NEWLINE DEDENT def ::: 10035
NAME = [ STRING ] ) ::: 10015
[ NAME . NAME . NAME ::: 10014
from NAME import * NEWLINE import ::: 9993
+ NAME ( NAME . NAME ::: 9980
NEWLINE NAME ( STRING . NAME ::: 9975
return False NEWLINE DEDENT DEDENT EOS ::: 9960
NAME ( NAME = False ) ::: 9959
STRING , STRING , ] NEWLINE ::: 9952
= { } NEWLINE NAME = ::: 9946
} NEWLINE NAME . NAME ( ::: 9944
import NAME NEWLINE NAME = { ::: 9940
STRING ) : NEWLINE INDENT return ::: 9921
INDENT if NAME is None : ::: 9891
NAME ) NEWLINE try : NEWLINE ::: 9889
. NAME : NEWLINE INDENT raise ::: 9876
, NAME NEWLINE NAME = STRING ::: 9874
[ NAME . NAME ( ) ::: 9872
: STRING , STRING : NAME ::: 9864
DEDENT return False NEWLINE DEDENT EOS ::: 9853
DEDENT return NAME ( NAME , ::: 9851
[ NUMBER ] NEWLINE NAME . ::: 9845
( NUMBER ) NEWLINE DEDENT EOS ::: 9838
NAME = [ NAME ( NAME ::: 9833
STRING : NEWLINE INDENT return NAME ::: 9815
NAME , NAME = True , ::: 9813
, NAME NEWLINE NAME . NAME ::: 9804
STRING : NEWLINE INDENT NAME ( ::: 9799
NAME , NAME ) NEWLINE EOS ::: 9798
STRING NEWLINE NAME = NAME NEWLINE ::: 9798
NAME [ NAME ] , NAME ::: 9793
NAME = NAME . NAME + ::: 9787
: NEWLINE INDENT NAME += STRING ::: 9768
: NEWLINE INDENT raise NAME NEWLINE ::: 9767
: NEWLINE INDENT class NAME : ::: 9763
DEDENT if NAME : NEWLINE INDENT ::: 9760
( ) NEWLINE if NAME . ::: 9754
False ) : NEWLINE INDENT NAME ::: 9740
: NEWLINE INDENT STRING NEWLINE raise ::: 9736
NEWLINE INDENT class NAME : NEWLINE ::: 9735
INDENT class NAME : NEWLINE INDENT ::: 9735
from . import NAME NEWLINE EOS ::: 9731
NAME ) NEWLINE def NAME ( ::: 9726
( NAME ( NAME ( NAME ::: 9724
( STRING ) NEWLINE DEDENT return ::: 9715
in NAME ( NUMBER , NUMBER ::: 9713
NAME , NAME NEWLINE NAME . ::: 9711
import NAME . NAME NEWLINE EOS ::: 9703
NEWLINE INDENT raise NAME NEWLINE DEDENT ::: 9703
NEWLINE INDENT STRING NEWLINE raise NAME ::: 9689
NEWLINE NAME = NAME [ NAME ::: 9682
in NAME : NEWLINE INDENT return ::: 9678
= { STRING : [ STRING ::: 9678
INDENT NAME = NAME [ STRING ::: 9672
( NAME ) , NAME ) ::: 9671
. NAME as NAME NEWLINE NAME ::: 9661
: STRING } NEWLINE NAME = ::: 9637
STRING ) , ) NEWLINE EOS ::: 9623
NEWLINE import NAME NEWLINE try : ::: 9622
, NAME , * NAME , ::: 9620
. NAME ( NUMBER ) ) ::: 9615
INDENT raise NAME . NAME ( ::: 9581
. NAME NEWLINE def NAME ( ::: 9576
NAME , STRING ) ) NEWLINE ::: 9558
NAME ) > NUMBER : NEWLINE ::: 9556
False ) NEWLINE NAME = NAME ::: 9554
import NAME NEWLINE import NAME , ::: 9549
. NAME as NAME NEWLINE EOS ::: 9549
INDENT STRING NEWLINE if NAME ( ::: 9547
NAME . NAME NEWLINE def NAME ::: 9546
NAME ( lambda NAME : NAME ::: 9544
DEDENT NAME ( NAME ) NEWLINE ::: 9525
NUMBER ] ) NEWLINE NAME . ::: 9524
NAME == NAME . NAME : ::: 9519
NAME ] = NAME . NAME ::: 9507
. NAME ( STRING , None ::: 9506
. NAME NEWLINE DEDENT else : ::: 9499
) ) NEWLINE for NAME in ::: 9498
, NAME , NAME = True ::: 9497
NAME ( ) ) : NEWLINE ::: 9489
INDENT NAME ( STRING % NAME ::: 9486
STRING ) : NEWLINE INDENT STRING ::: 9471
) NEWLINE DEDENT if NAME . ::: 9461
STRING ) . NAME ( NAME ::: 9450
] . NAME ( STRING ) ::: 9449
STRING NEWLINE import NAME as NAME ::: 9443
( NAME , STRING ) ) ::: 9436
NAME : NEWLINE INDENT return False ::: 9432
, NAME = STRING ) ) ::: 9431
False NEWLINE NAME . NAME = ::: 9426
STRING , STRING ) , NAME ::: 9420
{ STRING : NUMBER , STRING ::: 9412
. NAME ( NAME + STRING ::: 9403
NAME ) NEWLINE DEDENT elif NAME ::: 9383
) NEWLINE DEDENT DEDENT DEDENT DEDENT ::: 9382
DEDENT DEDENT NAME . NAME ( ::: 9377
NEWLINE NAME [ NAME ] = ::: 9373
) NEWLINE NAME = NAME NEWLINE ::: 9366
] . NAME ( ) NEWLINE ::: 9358
INDENT NAME . NAME = None ::: 9350
, NAME = STRING , ) ::: 9345
NAME ) : NEWLINE INDENT assert ::: 9342
NUMBER , NAME ( NAME ) ::: 9341
INDENT NAME = [ STRING , ::: 9336
None NEWLINE NAME = None NEWLINE ::: 9329
NAME ) , ( STRING , ::: 9317
= None NEWLINE NAME = None ::: 9316
] NEWLINE return NAME NEWLINE DEDENT ::: 9296
STRING , NAME = { STRING ::: 9290
STRING , NAME = True , ::: 9276
NEWLINE INDENT if NAME == STRING ::: 9276
, NAME , STRING ) NEWLINE ::: 9273
. NAME . NAME ) : ::: 9273
) , NUMBER ) NEWLINE NAME ::: 9271
, STRING ) ) NEWLINE DEDENT ::: 9271
NAME . NAME NEWLINE return NAME ::: 9271
{ } NEWLINE for NAME in ::: 9265
( ) NEWLINE DEDENT except NAME ::: 9255
( NAME ) == NUMBER : ::: 9251
STRING % NAME . NAME ) ::: 9247
( NAME ( STRING , STRING ::: 9243
( NUMBER ) NEWLINE DEDENT DEDENT ::: 9239
. NAME ) NEWLINE DEDENT NAME ::: 9237
NAME NEWLINE return NAME . NAME ::: 9234
= NAME ) NEWLINE return NAME ::: 9227
= NAME . NAME NEWLINE if ::: 9221
import NAME . NAME NEWLINE NAME ::: 9218
NAME ( STRING + NAME ) ::: 9194
INDENT NAME = STRING NEWLINE def ::: 9187
from . import NAME NEWLINE NAME ::: 9183
if NAME in NAME . NAME ::: 9181
INDENT NAME = NAME [ NUMBER ::: 9179
NAME , NAME ) , NAME ::: 9175
INDENT NAME . NAME = [ ::: 9162
( ) NEWLINE return NAME . ::: 9160
, NAME ) NEWLINE DEDENT else ::: 9154
STRING NEWLINE from . NAME import ::: 9128
% NAME . NAME ) NEWLINE ::: 9114
NUMBER , NAME . NAME ) ::: 9091
NAME ( STRING , None ) ::: 9088
return NAME . NAME [ NAME ::: 9087
NAME : NEWLINE INDENT return NEWLINE ::: 9083
raise NAME ( STRING % NAME ::: 9067
NUMBER ) ) NEWLINE NAME = ::: 9061
STRING , STRING , ] , ::: 9052
. NAME = NAME [ STRING ::: 9050
STRING ) NEWLINE return NAME NEWLINE ::: 9039
NAME . NAME NEWLINE DEDENT NAME ::: 9035
== NAME : NEWLINE INDENT return ::: 9014
STRING , ) NEWLINE NAME = ::: 9011
NAME : NEWLINE INDENT try : ::: 9011
NAME ( STRING , [ STRING ::: 8973
except NAME : NEWLINE INDENT from ::: 8961
, NAME [ NUMBER ] ) ::: 8944
DEDENT return NAME . NAME NEWLINE ::: 8941
) ) ) NEWLINE NAME . ::: 8941
INDENT if NAME . NAME is ::: 8939
< NUMBER : NEWLINE INDENT NAME ::: 8919
BOS NEWLINE STRING NEWLINE from . ::: 8919
) , NAME ( NAME ) ::: 8907
. NAME ) NEWLINE DEDENT def ::: 8901
NAME . NAME NEWLINE DEDENT else ::: 8899
) , NUMBER ) NEWLINE DEDENT ::: 8893
NAME ( NAME , NAME [ ::: 8881
) : NEWLINE INDENT return True ::: 8865
NAME ) NEWLINE NAME , NAME ::: 8865
( NAME ) , NAME ( ::: 8853
. NAME [ NUMBER ] , ::: 8853
) , NAME = True ) ::: 8847
) : NEWLINE INDENT if ( ::: 8846
. import NAME NEWLINE NAME = ::: 8845
if NAME . NAME == NAME ::: 8830
NEWLINE INDENT return STRING . NAME ::: 8822
INDENT return STRING . NAME ( ::: 8822
: NEWLINE INDENT return STRING . ::: 8822
= STRING NEWLINE for NAME in ::: 8803
= NAME ( ) NEWLINE for ::: 8802
import * NEWLINE from . NAME ::: 8802
NEWLINE DEDENT if NAME ( NAME ::: 8799
import NAME as NAME NEWLINE DEDENT ::: 8789
( NAME ) ) NEWLINE return ::: 8786
= ( STRING , STRING ) ::: 8781
) NEWLINE NAME = STRING . ::: 8781
) NEWLINE with NAME ( NAME ::: 8776
NAME ) , NAME = NAME ::: 8774
NAME as NAME NEWLINE from . ::: 8774
NAME = NAME + STRING NEWLINE ::: 8769
DEDENT return True NEWLINE DEDENT EOS ::: 8767
) NEWLINE DEDENT for NAME in ::: 8758
) NEWLINE return True NEWLINE DEDENT ::: 8742
if NAME . NAME is not ::: 8742
. NAME and NAME . NAME ::: 8727
] : NEWLINE INDENT NAME = ::: 8709
NEWLINE INDENT NAME ( ) . ::: 8708
INDENT NAME ( ) . NAME ::: 8708
NAME . NAME = { STRING ::: 8707
NAME ( NAME ) as NAME ::: 8680
= NAME ) : NEWLINE INDENT ::: 8677
NAME = NAME ) : NEWLINE ::: 8676
NAME NEWLINE NAME [ STRING ] ::: 8668
INDENT STRING NEWLINE NAME = NUMBER ::: 8667
. NAME = { STRING : ::: 8662
NAME . NAME and NAME . ::: 8662
NEWLINE NAME ( STRING + NAME ::: 8651
NEWLINE INDENT return STRING % ( ::: 8649
( NAME ) as NAME : ::: 8647
INDENT try : NEWLINE INDENT return ::: 8645
def NAME ( NAME = None ::: 8642
. NAME + NAME . NAME ::: 8640
NAME . NAME ( * NAME ::: 8639
raise NAME ( ) NEWLINE DEDENT ::: 8623
( NAME ) , NAME = ::: 8621
= False ) NEWLINE NAME = ::: 8618
NEWLINE INDENT NAME ( STRING . ::: 8615
INDENT NAME ( STRING . NAME ::: 8615
NAME = [ NAME for NAME ::: 8601
) NEWLINE if NAME is not ::: 8599
= STRING % ( NAME , ::: 8598
STRING ] = NAME NEWLINE NAME ::: 8594
( STRING + NAME ) NEWLINE ::: 8591
= NAME ( ) , NAME ::: 8589
NAME . NAME + NAME . ::: 8577
NAME ( NAME ) == NAME ::: 8569
NUMBER : NEWLINE INDENT raise NAME ::: 8559
. NAME ( ) NEWLINE assert ::: 8559
= NAME ( ) NEWLINE EOS ::: 8546
NAME ( { STRING : STRING ::: 8544
NUMBER ] . NAME ( ) ::: 8538
: NEWLINE INDENT return { STRING ::: 8533
( NAME ) NEWLINE assert NAME ::: 8533
] : NEWLINE INDENT NAME . ::: 8524
NEWLINE INDENT if not NAME : ::: 8507
( ) NEWLINE NAME = [ ::: 8505
* NEWLINE from . NAME import ::: 8503
INDENT return STRING % ( NAME ::: 8495
NAME , NAME NEWLINE NAME ( ::: 8480
NAME . NAME , NAME ( ::: 8470
. NAME = False NEWLINE DEDENT ::: 8467
( ) NEWLINE DEDENT NAME = ::: 8462
NEWLINE with NAME ( NAME , ::: 8447
. NAME is not None : ::: 8444
NAME ) , STRING ) NEWLINE ::: 8443
NEWLINE INDENT NAME = ( NAME ::: 8443
import * NEWLINE NAME = NAME ::: 8442
NEWLINE INDENT return { STRING : ::: 8441
NAME ( [ NUMBER , NUMBER ::: 8440
DEDENT except NAME . NAME : ::: 8427
NEWLINE NAME = NAME + STRING ::: 8418
except NAME . NAME : NEWLINE ::: 8413
= NAME ( ) . NAME ::: 8408
= [ NUMBER , NUMBER , ::: 8400
. NAME ( ) ) : ::: 8374
INDENT NAME . NAME = NUMBER ::: 8372
NEWLINE INDENT raise NAME ( NAME ::: 8357
STRING , STRING ) . NAME ::: 8349
if NAME ( NAME , STRING ::: 8347
) NEWLINE return NAME , NAME ::: 8340
NAME = STRING ) , ] ::: 8339
NAME ( STRING ) NEWLINE assert ::: 8338
[ ] NEWLINE NAME = NAME ::: 8308
. NAME ( ) ) , ::: 8306
NAME = NAME ( ) . ::: 8301
NEWLINE INDENT if not NAME ( ::: 8293
) : NEWLINE INDENT return False ::: 8274
NAME = NAME ( NUMBER ) ::: 8272
INDENT if NAME == STRING : ::: 8270
= False ) NEWLINE NAME . ::: 8257
NEWLINE INDENT NAME , NAME , ::: 8256
NEWLINE NAME ( ) NEWLINE NAME ::: 8255
lambda NAME : NAME . NAME ::: 8253
) : NEWLINE INDENT return { ::: 8244
return STRING % ( NAME . ::: 8244
) NEWLINE class NAME : NEWLINE ::: 8235
. NAME = True NEWLINE DEDENT ::: 8230
= STRING ) , ) NEWLINE ::: 8228
INDENT NAME , NAME , NAME ::: 8227
{ STRING : NAME } ) ::: 8220
not NAME . NAME ( NAME ::: 8214
NAME ) , NUMBER ) NEWLINE ::: 8214
, NAME NEWLINE NAME = [ ::: 8212
, STRING , STRING , NAME ::: 8203
return NAME NEWLINE DEDENT return NAME ::: 8197
NAME [ NUMBER ] ) ) ::: 8195
NEWLINE if NAME . NAME is ::: 8192
NAME . NAME . NAME == ::: 8160
{ STRING : STRING } NEWLINE ::: 8156
NAME = STRING % NAME NEWLINE ::: 8153
[ NAME ] NEWLINE DEDENT DEDENT ::: 8145
( NAME . NAME [ NAME ::: 8138
NEWLINE NAME . NAME ( ( ::: 8134
= [ NAME for NAME in ::: 8132
assert NAME . NAME . NAME ::: 8119
NAME ) NEWLINE DEDENT NAME ( ::: 8116
NAME import NAME NEWLINE try : ::: 8108
NAME in NAME ( NAME , ::: 8107
. NAME . NAME [ STRING ::: 8106
NEWLINE assert NAME ( NAME ) ::: 8103
INDENT return None NEWLINE DEDENT DEDENT ::: 8087
None ) NEWLINE NAME . NAME ::: 8084
, STRING : STRING } , ::: 8084
[ NAME ( NAME ) for ::: 8083
NEWLINE NAME = NUMBER NEWLINE while ::: 8079
NAME ) NEWLINE if NAME == ::: 8078
NAME ( ) NEWLINE assert NAME ::: 8077
, NAME . NAME , STRING ::: 8077
= NAME NEWLINE DEDENT return NAME ::: 8077
) NEWLINE DEDENT NAME ( STRING ::: 8075
. NAME ( [ NAME . ::: 8072
NAME ( NAME = [ STRING ::: 8071
( ) NEWLINE DEDENT DEDENT DEDENT ::: 8069
NAME . NAME ) ) , ::: 8059
= NAME . NAME NEWLINE EOS ::: 8048
STRING ) NEWLINE NAME = ( ::: 8047
= STRING ) , ] NEWLINE ::: 8040
STRING ) , ] NEWLINE EOS ::: 8038
) . NAME ( ) , ::: 8030
NAME ( ) NEWLINE NAME [ ::: 8022
NAME . NAME NEWLINE DEDENT return ::: 8017
NAME : NEWLINE INDENT return STRING ::: 8017
True : NEWLINE INDENT NAME = ::: 8002
return NAME ( NAME ( NAME ::: 8002
STRING ) ) NEWLINE DEDENT DEDENT ::: 8002
, STRING . NAME ( NAME ::: 7997
return None NEWLINE DEDENT DEDENT EOS ::: 7991
= NUMBER , NAME = NAME ::: 7989
NUMBER , NUMBER ] ) NEWLINE ::: 7983
INDENT return True NEWLINE DEDENT DEDENT ::: 7980
( STRING , { STRING : ::: 7978
DEDENT for NAME in NAME : ::: 7974
: NEWLINE INDENT if STRING in ::: 7958
from . . NAME . NAME ::: 7954
STRING , STRING , NAME ) ::: 7954
, NAME ) NEWLINE DEDENT def ::: 7951
NAME [ NAME ] [ NAME ::: 7950
NEWLINE NAME ( STRING % ( ::: 7949
NEWLINE NAME = NAME ( [ ::: 7944
NEWLINE INDENT if STRING in NAME ::: 7937
INDENT if not NAME : NEWLINE ::: 7935
[ STRING ] NEWLINE DEDENT EOS ::: 7929
] NEWLINE NAME = [ ] ::: 7921
NEWLINE INDENT STRING NEWLINE NAME , ::: 7917
NEWLINE if not NAME ( NAME ::: 7910
NEWLINE STRING NEWLINE import NAME as ::: 7908
) , NAME = True , ::: 7901
NAME not in NAME . NAME ::: 7900
= [ STRING ] NEWLINE EOS ::: 7900
class NAME : NEWLINE INDENT STRING ::: 7897
STRING ) NEWLINE DEDENT DEDENT DEDENT ::: 7895
STRING , STRING ) NEWLINE EOS ::: 7891
+ NAME ( NAME ) + ::: 7891
] NEWLINE DEDENT def NAME ( ::: 7889
( NAME , NAME , STRING ::: 7885
NEWLINE DEDENT DEDENT DEDENT return NAME ::: 7883
NAME , STRING , NAME = ::: 7877
NEWLINE NAME = STRING % ( ::: 7876
, STRING : [ STRING , ::: 7874
INDENT STRING NEWLINE NAME , NAME ::: 7866
. NAME ) , NAME ( ::: 7864
INDENT if not NAME ( NAME ::: 7861
) , NAME = STRING , ::: 7859
NEWLINE NAME = NUMBER NEWLINE DEDENT ::: 7853
NAME = STRING NEWLINE DEDENT DEDENT ::: 7835
NEWLINE DEDENT if NAME : NEWLINE ::: 7819
. NAME [ NAME ] . ::: 7816
) NEWLINE NAME = ( NAME ::: 7814
NAME ( NAME ) ] NEWLINE ::: 7809
NEWLINE return NAME , NAME NEWLINE ::: 7804
NAME ) NEWLINE NAME = NUMBER ::: 7804
( STRING , STRING ) . ::: 7801
False ) : NEWLINE INDENT STRING ::: 7798
return NAME NEWLINE DEDENT else : ::: 7796
NEWLINE from . . NAME . ::: 7794
: STRING , STRING : [ ::: 7784
NAME ) NEWLINE if NAME ( ::: 7778
INDENT NAME = ( STRING , ::: 7769
. NAME , NAME = True ::: 7765
= True , NAME = NAME ::: 7765
, STRING : NAME } NEWLINE ::: 7763
NAME = STRING NEWLINE if NAME ::: 7759
) NEWLINE DEDENT DEDENT NAME . ::: 7758
, ) NEWLINE NAME = NAME ::: 7737
NAME , NAME ) = NAME ::: 7730
( STRING , NAME = NUMBER ::: 7728
INDENT NAME ( STRING % ( ::: 7728
+ STRING + NAME . NAME ::: 7727
( NUMBER , NAME ) NEWLINE ::: 7720
= NAME ( NAME [ NUMBER ::: 7711
NAME ( NAME + STRING ) ::: 7709
= NAME . NAME ( ( ::: 7708
NAME ( NAME ( NUMBER ) ::: 7700
: NEWLINE INDENT @ NAME NEWLINE ::: 7688
= NAME ( NAME ( STRING ::: 7686
NAME . NAME ] ) NEWLINE ::: 7684
, ) , NAME . NAME ::: 7683
def NAME ( * NAME , ::: 7683
NAME : NAME . NAME ( ::: 7683
None : NEWLINE INDENT return NAME ::: 7675
if NAME ( NAME ) > ::: 7658
% ( NAME , NAME , ::: 7656
. NAME ) NEWLINE DEDENT return ::: 7652
] . NAME ( NAME ) ::: 7643
, NUMBER , NUMBER ] NEWLINE ::: 7635
NAME + STRING ) NEWLINE NAME ::: 7633
) , NAME ) NEWLINE NAME ::: 7626
with NAME ( NAME . NAME ::: 7600
( ( NAME , NAME ) ::: 7600
NAME = NAME ) ) NEWLINE ::: 7599
[ NAME ] [ NAME ] ::: 7596
] NEWLINE DEDENT return NAME NEWLINE ::: 7595
STRING + NAME + STRING + ::: 7594
NAME = NAME NEWLINE if NAME ::: 7593
NAME = NUMBER NEWLINE while NAME ::: 7591
NAME ) : NEWLINE INDENT global ::: 7590
NAME not in NAME : NEWLINE ::: 7589
NUMBER , NAME . NAME . ::: 7588
= False ) NEWLINE DEDENT EOS ::: 7580
= NAME NEWLINE return NAME NEWLINE ::: 7578
+ NAME + STRING + NAME ::: 7564
NAME += NUMBER NEWLINE DEDENT DEDENT ::: 7564
) : NEWLINE INDENT return [ ::: 7554
[ NAME ] NEWLINE NAME = ::: 7553
[ STRING ] ) ) NEWLINE ::: 7537
, NAME [ STRING ] , ::: 7534
= STRING NEWLINE from NAME . ::: 7532
class NAME ( ) : NEWLINE ::: 7529
( STRING ) NEWLINE import NAME ::: 7528
, NAME , NAME , ) ::: 7524
) . NAME ( ) . ::: 7521
NAME ) NEWLINE assert NAME . ::: 7516
NAME = True ) , NAME ::: 7516
( ) , NAME = NAME ::: 7515
( NAME ) NEWLINE if not ::: 7515
NAME = STRING NEWLINE NAME ( ::: 7504
NUMBER ) ) NEWLINE DEDENT EOS ::: 7502
NAME = [ STRING , ] ::: 7502
NAME ( STRING ) NEWLINE import ::: 7491
try : NEWLINE INDENT NAME ( ::: 7480
[ ] NEWLINE NAME = [ ::: 7475
( STRING , STRING ) ] ::: 7468
NAME . NAME ( [ NUMBER ::: 7456
. . NAME . NAME import ::: 7456
) NEWLINE NAME = NAME + ::: 7454
NAME ) NEWLINE NAME [ STRING ::: 7452
DEDENT DEDENT def NAME ( NAME ::: 7450
= NUMBER ) NEWLINE DEDENT EOS ::: 7448
STRING . NAME ( NAME = ::: 7446
: NEWLINE INDENT STRING NEWLINE from ::: 7441
NUMBER ) : NEWLINE INDENT if ::: 7439
NAME + STRING NEWLINE NAME = ::: 7439
[ NAME ] : NEWLINE INDENT ::: 7438
NAME = lambda NAME : NAME ::: 7430
NAME : NEWLINE INDENT return None ::: 7428
NAME = NAME NEWLINE DEDENT NAME ::: 7427
NEWLINE class NAME ( ) : ::: 7424
) : NEWLINE INDENT yield NAME ::: 7423
if NAME == NAME : NEWLINE ::: 7422
NAME ) , NAME ( STRING ::: 7417
not NAME . NAME ( ) ::: 7415
NAME ( NAME , NUMBER , ::: 7407
STRING + NAME ( NAME . ::: 7405
: NAME . NAME ( ) ::: 7402
] = NAME NEWLINE DEDENT DEDENT ::: 7401
NAME = { } NEWLINE DEDENT ::: 7393
INDENT return NAME . NAME [ ::: 7388
, NUMBER , NUMBER ] ) ::: 7387
= NAME ( NUMBER , NUMBER ::: 7382
= [ STRING ] ) NEWLINE ::: 7380
NEWLINE NAME ( ) NEWLINE DEDENT ::: 7378
NEWLINE NAME += NUMBER NEWLINE DEDENT ::: 7361
DEDENT return NAME ( NAME ) ::: 7360
) NEWLINE NAME ( STRING . ::: 7359
{ STRING : STRING } , ::: 7357
NEWLINE INDENT @ NAME NEWLINE def ::: 7355
INDENT @ NAME NEWLINE def NAME ::: 7355
BOS NEWLINE class NAME ( ) ::: 7351
STRING , STRING , ) NEWLINE ::: 7350
NAME : NEWLINE INDENT return True ::: 7348
( ) : NEWLINE INDENT for ::: 7342
NEWLINE return STRING . NAME ( ::: 7341
STRING : STRING , } NEWLINE ::: 7341
NAME . NAME ( True ) ::: 7336
= NAME NEWLINE NAME = ( ::: 7332
+ STRING NEWLINE NAME = NAME ::: 7328
= NAME ( NAME ( ) ::: 7327
) NEWLINE DEDENT elif NAME == ::: 7323
True NEWLINE DEDENT else : NEWLINE ::: 7321
NAME , STRING , STRING , ::: 7307
. NAME ( True ) NEWLINE ::: 7300
NAME ] ) NEWLINE DEDENT EOS ::: 7297
. NAME import NAME NEWLINE if ::: 7296
[ STRING ] = NAME ( ::: 7291
NAME . NAME += NUMBER NEWLINE ::: 7263
( STRING ) NEWLINE DEDENT def ::: 7254
, NUMBER ) NEWLINE DEDENT DEDENT ::: 7248
. NAME ) NEWLINE DEDENT else ::: 7245
= NAME NEWLINE DEDENT else : ::: 7244
NAME ( NUMBER , STRING ) ::: 7243
INDENT NAME = NUMBER NEWLINE DEDENT ::: 7235
) NEWLINE DEDENT DEDENT else : ::: 7222
NAME ( NAME = None ) ::: 7220
STRING : [ STRING ] , ::: 7219
NEWLINE DEDENT elif NAME ( NAME ::: 7219
STRING ) NEWLINE import NAME NEWLINE ::: 7216
NAME . NAME ( ** NAME ::: 7213
STRING ) , STRING ) NEWLINE ::: 7213
( STRING + NAME + STRING ::: 7212
] NEWLINE NAME . NAME . ::: 7211
not in NAME . NAME : ::: 7209
= STRING NEWLINE NAME = ( ::: 7208
= STRING , NAME = False ::: 7204
= NAME ( NUMBER ) NEWLINE ::: 7201
STRING NEWLINE import NAME . NAME ::: 7200
STRING NEWLINE NAME = [ NAME ::: 7199
NAME ( STRING + NAME + ::: 7195
NEWLINE INDENT return NAME ( STRING ::: 7182
NAME [ STRING ] ) ) ::: 7176
NAME ( NAME ) ) , ::: 7176
( NAME ) , NAME . ::: 7173
NAME , NAME = False , ::: 7172
. NAME . NAME = STRING ::: 7172
NAME ) NEWLINE DEDENT DEDENT NAME ::: 7167
NAME ( ) , STRING ) ::: 7167
STRING , { STRING : NAME ::: 7161
DEDENT DEDENT DEDENT return NAME NEWLINE ::: 7158
DEDENT try : NEWLINE INDENT NAME ::: 7156
. NAME import * NEWLINE import ::: 7154
) ) . NAME ( ) ::: 7153
= { STRING : NAME } ::: 7136
. NAME ( NAME = [ ::: 7136
( STRING ) NEWLINE DEDENT if ::: 7124
NAME : NEWLINE INDENT import NAME ::: 7123
) ) ) NEWLINE DEDENT DEDENT ::: 7123
NAME = STRING ) ) NEWLINE ::: 7118
NAME ( ) , NAME ) ::: 7115
DEDENT return None NEWLINE DEDENT EOS ::: 7115
, NAME ( NAME ) , ::: 7113
. NAME for NAME in NAME ::: 7110
[ NUMBER ] ) ) NEWLINE ::: 7106
NAME ( NAME ) , NUMBER ::: 7106
( NAME = False ) NEWLINE ::: 7105
NEWLINE INDENT global NAME NEWLINE NAME ::: 7103
[ NUMBER ] [ NUMBER ] ::: 7102
NEWLINE if NAME ( NAME . ::: 7102
INDENT STRING NEWLINE if NAME is ::: 7102
INDENT NAME += NUMBER NEWLINE DEDENT ::: 7100
NAME NEWLINE import NAME NEWLINE if ::: 7098
NAME = { STRING : NUMBER ::: 7098
NAME = STRING ) NEWLINE EOS ::: 7096
( STRING , None ) NEWLINE ::: 7091
for NAME in NAME ] ) ::: 7087
NEWLINE NAME = NAME + NAME ::: 7087
+ STRING + NAME + STRING ::: 7080
) , NAME . NAME . ::: 7078
] ) : NEWLINE INDENT NAME ::: 7071
NAME = NAME ) . NAME ::: 7071
NEWLINE DEDENT DEDENT def NAME ( ::: 7071
NAME NEWLINE DEDENT DEDENT return NAME ::: 7069
= STRING NEWLINE from NAME import ::: 7066
) : NEWLINE INDENT if STRING ::: 7060
= NAME ( NAME = NUMBER ::: 7057
not NAME . NAME ( STRING ::: 7046
, NAME NEWLINE NAME ( NAME ::: 7044
] , STRING : [ STRING ::: 7044
( NAME ) > NUMBER : ::: 7039
NUMBER , NUMBER ] NEWLINE NAME ::: 7038
NUMBER , NUMBER ) , NAME ::: 7035
. NAME . NAME NEWLINE EOS ::: 7034
: NEWLINE INDENT assert NAME ( ::: 7032
STRING , STRING ) as NAME ::: 7030
STRING NEWLINE NAME , NAME = ::: 7019
: NEWLINE INDENT if NAME not ::: 7018
NEWLINE INDENT if NAME not in ::: 7018
. NAME , STRING , NAME ::: 7010
, NUMBER ) NEWLINE NAME ( ::: 7009
NEWLINE if NAME == NUMBER : ::: 7008
STRING ) NEWLINE return NAME . ::: 7008
NEWLINE import NAME NEWLINE NAME ( ::: 7007
NAME ( NAME ( NAME [ ::: 7006
NAME NEWLINE NAME . NAME [ ::: 6997
NAME < NAME : NEWLINE INDENT ::: 6996
assert NAME ( NAME ) == ::: 6993
{ STRING : [ STRING ] ::: 6986
in NAME ( NAME , NAME ::: 6981
[ NAME . NAME ] NEWLINE ::: 6977
NAME ] ) NEWLINE DEDENT DEDENT ::: 6973
. NAME ( STRING , { ::: 6966
( NAME . NAME ) . ::: 6963
NEWLINE INDENT NAME ( STRING + ::: 6962
STRING NEWLINE return NAME NEWLINE DEDENT ::: 6960
NAME ) NEWLINE DEDENT except : ::: 6958
NAME ) NEWLINE NAME = { ::: 6954
STRING ) ) , NAME ( ::: 6942
NAME [ NAME ] : NEWLINE ::: 6940
for NAME in NAME if NAME ::: 6925
STRING NEWLINE NAME = ( STRING ::: 6923
[ NAME ] = NAME . ::: 6922
STRING , NAME ( NAME ) ::: 6921
= STRING NEWLINE DEDENT DEDENT EOS ::: 6913
INDENT NAME = NUMBER NEWLINE for ::: 6911
. NAME [ NUMBER ] . ::: 6909
. NAME [ STRING ] [ ::: 6896
except NAME : NEWLINE INDENT raise ::: 6892
) ) NEWLINE DEDENT def NAME ::: 6885
NAME . NAME ( STRING STRING ::: 6884
NEWLINE DEDENT return False NEWLINE DEDENT ::: 6882
import NAME NEWLINE NAME = ( ::: 6878
[ NAME ] NEWLINE DEDENT EOS ::: 6878
, STRING , STRING ) ) ::: 6875
NAME ( ) NEWLINE if not ::: 6869
. NAME ( NUMBER , STRING ::: 6861
NAME . NAME for NAME in ::: 6861
( ) NEWLINE return NAME ( ::: 6858
) NEWLINE NAME ( STRING + ::: 6853
DEDENT NAME ( STRING ) NEWLINE ::: 6853
NAME ( NAME ) - NUMBER ::: 6851
NEWLINE DEDENT NAME ( NAME ) ::: 6849
) NEWLINE NAME [ NAME ] ::: 6846
if STRING in NAME . NAME ::: 6839
NUMBER ] ) NEWLINE DEDENT EOS ::: 6837
, NAME = NAME [ STRING ::: 6835
NAME ( NUMBER ) , NAME ::: 6834
NAME = NAME + NUMBER NEWLINE ::: 6825
return NAME ( ) NEWLINE DEDENT ::: 6815
( STRING + NAME . NAME ::: 6809
+ NAME ( NAME ) ) ::: 6808
INDENT NAME . NAME [ STRING ::: 6800
. NAME ( NAME , [ ::: 6788
NEWLINE NAME = STRING + NAME ::: 6786
, NAME = NAME ) : ::: 6786
DEDENT finally : NEWLINE INDENT NAME ::: 6769
NAME ( NAME . NAME + ::: 6768
NAME ( ) for NAME in ::: 6763
. NAME . NAME ( [ ::: 6748
% NAME ) NEWLINE DEDENT DEDENT ::: 6747
NAME ) ) ) NEWLINE NAME ::: 6747
. NAME NEWLINE DEDENT return NAME ::: 6745
= NAME ( STRING ) . ::: 6725
] ) NEWLINE NAME ( NAME ::: 6720
, NAME NEWLINE import NAME as ::: 6703
( ) for NAME in NAME ::: 6702
( ) NEWLINE if not NAME ::: 6697
STRING NEWLINE import NAME , NAME ::: 6697
( NAME ) NEWLINE def NAME ::: 6689
} ) NEWLINE NAME = NAME ::: 6686
STRING NEWLINE if not NAME . ::: 6683
NAME NEWLINE import NAME NEWLINE try ::: 6682
NAME . NAME = [ NAME ::: 6681
) ) NEWLINE DEDENT NAME = ::: 6680
NEWLINE DEDENT return True NEWLINE DEDENT ::: 6677
NAME ( NAME ) NEWLINE def ::: 6676
NAME ) : NEWLINE INDENT import ::: 6675
NUMBER , NUMBER ] , [ ::: 6674
NAME NEWLINE DEDENT except : NEWLINE ::: 6666
[ NAME , NAME , NAME ::: 6663
NEWLINE NAME = STRING % NAME ::: 6661
NAME in NAME [ STRING ] ::: 6660
) , NAME = NAME ( ::: 6652
return NAME ( NAME , STRING ::: 6645
INDENT NAME ( STRING + NAME ::: 6640
NAME ( ( NAME . NAME ::: 6638
return NEWLINE DEDENT NAME . NAME ::: 6637
NAME ( NAME ( NAME = ::: 6636
True ) : NEWLINE INDENT NAME ::: 6633
NAME . NAME + STRING + ::: 6627
] , [ NUMBER , NUMBER ::: 6627
NEWLINE from . . import NAME ::: 6624
( NUMBER ) ) NEWLINE NAME ::: 6623
!= NUMBER : NEWLINE INDENT NAME ::: 6608
. NAME NEWLINE from NAME import ::: 6598
NEWLINE DEDENT NAME ( NAME , ::: 6598
True , NAME = STRING ) ::: 6597
: NEWLINE INDENT STRING NEWLINE with ::: 6592
@ NAME . NAME NEWLINE def ::: 6590
NEWLINE assert NAME . NAME . ::: 6588
NEWLINE DEDENT finally : NEWLINE INDENT ::: 6585
. NAME = NAME ( STRING ::: 6585
STRING , NAME , NAME ) ::: 6584
NEWLINE INDENT STRING NEWLINE with NAME ::: 6576
STRING , ] , NAME = ::: 6561
INDENT NAME . NAME = True ::: 6560
DEDENT NAME ( NAME , NAME ::: 6560
INDENT if NAME not in NAME ::: 6559
BOS NEWLINE def NAME ( * ::: 6559
[ NAME ] = NAME ( ::: 6544
: NEWLINE INDENT yield NAME NEWLINE ::: 6539
( STRING ) , NAME . ::: 6536
= ( NUMBER , NUMBER , ::: 6533
, NAME [ NUMBER ] , ::: 6522
NAME . NAME ( ) + ::: 6514
NAME != STRING : NEWLINE INDENT ::: 6513
NAME ( STRING , { STRING ::: 6504
, [ STRING , STRING ] ::: 6502
( STRING ) NEWLINE assert NAME ::: 6499
, STRING ) NEWLINE return NAME ::: 6492
NAME ( STRING + NAME . ::: 6485
NEWLINE INDENT NAME = STRING + ::: 6480
, [ STRING ] ) NEWLINE ::: 6480
NUMBER ] , [ NUMBER , ::: 6476
NAME = STRING NEWLINE DEDENT NAME ::: 6475
INDENT import NAME NEWLINE DEDENT except ::: 6468
STRING ] . NAME ( ) ::: 6464
= True , NAME = False ::: 6462
, NAME ) NEWLINE DEDENT except ::: 6459
( NUMBER , STRING ) NEWLINE ::: 6458
INDENT NAME ( ) NEWLINE DEDENT ::: 6456
] NEWLINE NAME = NUMBER NEWLINE ::: 6446
: [ STRING , STRING , ::: 6443
INDENT NAME = STRING % ( ::: 6440
NEWLINE STRING NEWLINE from . NAME ::: 6436
) NEWLINE import NAME NEWLINE import ::: 6433
[ NAME . NAME ( STRING ::: 6424
) : NEWLINE INDENT return ( ::: 6423
assert NAME ( NAME . NAME ::: 6422
. NAME ( NAME ) [ ::: 6417
NAME ( ) NEWLINE try : ::: 6416
] ) NEWLINE DEDENT return NAME ::: 6415
assert NAME ( NAME , NAME ::: 6407
( ** NAME ) NEWLINE DEDENT ::: 6406
. NAME NEWLINE NAME = STRING ::: 6398
NEWLINE INDENT if NAME [ NAME ::: 6393
NAME ] . NAME ( NAME ::: 6393
] NEWLINE DEDENT except NAME : ::: 6391
, [ STRING , STRING , ::: 6390
NEWLINE from . NAME . NAME ::: 6388
: NEWLINE INDENT return ( NAME ::: 6386
, NAME = True ) ) ::: 6379
( ) ) NEWLINE NAME ( ::: 6379
. NAME ( STRING ) ] ::: 6377
. NAME + STRING + NAME ::: 6355
, NUMBER , NUMBER ) ) ::: 6355
NAME , NAME ) for NAME ::: 6354
if NAME not in NAME : ::: 6353
) NEWLINE NAME = STRING % ::: 6348
( NAME ) NEWLINE DEDENT if ::: 6347
( ) NEWLINE try : NEWLINE ::: 6343
< NAME : NEWLINE INDENT NAME ::: 6334
= NAME NEWLINE NAME = STRING ::: 6329
from . NAME . NAME import ::: 6328
NEWLINE INDENT if NAME == NAME ::: 6327
. NAME ( [ NUMBER , ::: 6327
as NAME : NEWLINE INDENT for ::: 6326
. NAME ( ) for NAME ::: 6324
DEDENT except : NEWLINE INDENT pass ::: 6321
NEWLINE NAME ( NUMBER ) NEWLINE ::: 6321
) + STRING + NAME ( ::: 6320
( ) NEWLINE if NAME : ::: 6317
except : NEWLINE INDENT pass NEWLINE ::: 6317
raise NAME ( STRING . NAME ::: 6312
STRING NEWLINE assert NAME . NAME ::: 6309
( [ STRING , STRING ] ::: 6308
, NUMBER , NUMBER ] , ::: 6305
} NEWLINE NAME = NAME ( ::: 6305
[ NAME ] ) NEWLINE NAME ::: 6303
NAME , NAME [ STRING ] ::: 6301
] NEWLINE def NAME ( NAME ::: 6297
( NUMBER ) NEWLINE NAME ( ::: 6297
NEWLINE INDENT STRING NEWLINE from NAME ::: 6296
from . NAME import ( NAME ::: 6294
NAME NEWLINE NAME ( STRING ) ::: 6288
) ) NEWLINE return NAME . ::: 6286
STRING NEWLINE NAME = { } ::: 6281
NAME ] : NEWLINE INDENT NAME ::: 6280
NAME ) ) NEWLINE if NAME ::: 6280
import NAME NEWLINE if NAME . ::: 6269
) , NAME = NAME ) ::: 6269
NAME + STRING ) NEWLINE DEDENT ::: 6269
return NAME ( NAME = NAME ::: 6263
: NAME } ) NEWLINE DEDENT ::: 6261
: NAME . NAME } NEWLINE ::: 6259
STRING NEWLINE NAME [ STRING ] ::: 6259
STRING NEWLINE NAME = None NEWLINE ::: 6252
NAME , NAME , STRING ) ::: 6249
= NAME . NAME NEWLINE return ::: 6246
STRING , NAME = False ) ::: 6243
. NAME ( ) ] NEWLINE ::: 6236
NEWLINE INDENT import NAME as NAME ::: 6233
: NEWLINE INDENT import NAME as ::: 6233
NAME [ STRING ] == STRING ::: 6233
NAME ) + STRING + NAME ::: 6231
INDENT import NAME as NAME NEWLINE ::: 6231
NAME , NAME , NAME ] ::: 6226
] NEWLINE for NAME , NAME ::: 6224
NAME ( STRING ) NEWLINE from ::: 6222
= NAME ) . NAME ( ::: 6221
, ( NUMBER , NUMBER ) ::: 6219
( NAME + STRING ) NEWLINE ::: 6210
NAME , STRING , NAME . ::: 6208
STRING ) NEWLINE DEDENT if NAME ::: 6205
. NAME ( NAME , * ::: 6204
NAME = STRING , ) NEWLINE ::: 6203
INDENT NAME . NAME = { ::: 6202
NEWLINE from . NAME import ( ::: 6202
INDENT if NAME in NAME : ::: 6197
. NAME , NAME ) ) ::: 6197
, NAME = NUMBER ) , ::: 6195
NAME . NAME [ NUMBER : ::: 6194
: NEWLINE INDENT return [ NAME ::: 6190
. NAME = NAME NEWLINE return ::: 6187
= NAME [ STRING ] [ ::: 6185
NAME = NAME NEWLINE return NAME ::: 6181
NAME [ : - NUMBER ] ::: 6175
, NAME , NAME NEWLINE DEDENT ::: 6174
NUMBER , NUMBER ) NEWLINE DEDENT ::: 6173
STRING ) NEWLINE DEDENT except NAME ::: 6169
, NUMBER ] , [ NUMBER ::: 6169
INDENT NAME . NAME ( [ ::: 6161
NAME ] = NAME ( NAME ::: 6155
NAME . NAME == NUMBER NEWLINE ::: 6154
[ NAME . NAME ] = ::: 6153
, { STRING : STRING } ::: 6151
if NAME not in NAME . ::: 6146
NAME = False NEWLINE DEDENT EOS ::: 6145
: STRING } ) NEWLINE NAME ::: 6142
NEWLINE NAME = [ NUMBER , ::: 6139
NEWLINE NAME = [ ( STRING ::: 6134
STRING ] ) NEWLINE DEDENT DEDENT ::: 6134
NAME . NAME ] NEWLINE NAME ::: 6131
( ) NEWLINE NAME [ STRING ::: 6128
!= STRING : NEWLINE INDENT NAME ::: 6126
NUMBER NEWLINE DEDENT return NAME NEWLINE ::: 6124
NAME = NAME + NAME NEWLINE ::: 6122
STRING , NAME ) NEWLINE return ::: 6118
, NUMBER , NUMBER ) , ::: 6105
( [ NUMBER , NUMBER , ::: 6101
( NAME ) , NUMBER ) ::: 6097
return NAME NEWLINE DEDENT def NAME ::: 6095
NEWLINE DEDENT DEDENT NAME = NAME ::: 6088
STRING . NAME ( [ NAME ::: 6085
[ NUMBER ] [ STRING ] ::: 6081
else : NEWLINE INDENT return False ::: 6080
return NEWLINE DEDENT NAME = NAME ::: 6073
) ) ) NEWLINE NAME = ::: 6072
= STRING NEWLINE NAME ( NAME ::: 6064
NAME = [ NAME ] NEWLINE ::: 6063
) ) : NEWLINE INDENT if ::: 6061
NAME + STRING + NAME + ::: 6055
STRING % NAME . NAME ( ::: 6052
( STRING , NAME = [ ::: 6052
, ( NAME , NAME ) ::: 6048
NAME ] ) NEWLINE NAME . ::: 6046
NAME for NAME in NAME if ::: 6043
NAME ( NAME , ( NAME ::: 6042
NAME NEWLINE NAME ( NAME , ::: 6040
STRING + NAME . NAME ( ::: 6033
NAME , NAME = NAME NEWLINE ::: 6031
. NAME [ NAME ] [ ::: 6029
, ( STRING , STRING , ::: 6023
} , STRING : { STRING ::: 6019
( NAME ) NEWLINE NAME [ ::: 6015
NEWLINE INDENT NAME ( NAME ( ::: 6014
{ STRING : NAME } NEWLINE ::: 6005
( ) , STRING ) NEWLINE ::: 6005
STRING : True , STRING : ::: 6003
NEWLINE NAME = ( NUMBER , ::: 6002
STRING , [ STRING , STRING ::: 6000
[ NUMBER ] NEWLINE DEDENT EOS ::: 5998
( STRING ) , STRING ) ::: 5996
NAME in NAME . NAME ] ::: 5995
NAME [ NUMBER ] , STRING ::: 5995
INDENT if NAME ( NAME . ::: 5994
STRING , STRING ] NEWLINE DEDENT ::: 5993
NAME ] NEWLINE DEDENT DEDENT EOS ::: 5991
NAME . NAME = [ STRING ::: 5984
( ) ) ) NEWLINE DEDENT ::: 5977
( NUMBER ) NEWLINE DEDENT NAME ::: 5977
( STRING ) NEWLINE from NAME ::: 5973
( STRING ) ) , NAME ::: 5972
NAME = NUMBER ) , NAME ::: 5972
NAME , NAME ( NAME . ::: 5972
: [ STRING ] , STRING ::: 5968
. NAME . NAME ) , ::: 5964
STRING : NAME [ STRING ] ::: 5962
STRING ) : NEWLINE INDENT if ::: 5961
. NAME ) NEWLINE for NAME ::: 5954
NAME in NAME ] NEWLINE NAME ::: 5954
, STRING , NAME = NAME ::: 5953
NAME . NAME ] NEWLINE DEDENT ::: 5953
] , NAME = NAME . ::: 5952
+ NAME . NAME + STRING ::: 5951
, STRING ) NEWLINE for NAME ::: 5949
finally : NEWLINE INDENT NAME . ::: 5937
( NAME , NAME ) = ::: 5937
, STRING : [ STRING ] ::: 5933
STRING ] [ STRING ] NEWLINE ::: 5933
BOS NEWLINE from . import NAME ::: 5931
NAME = NAME NEWLINE DEDENT else ::: 5929
NUMBER , NAME = STRING , ::: 5928
with NAME ( NAME ) as ::: 5925
NAME [ NUMBER ] [ NUMBER ::: 5925
) ) NEWLINE DEDENT except NAME ::: 5920
NAME ( NAME ) [ NUMBER ::: 5919
NUMBER ] . NAME ( STRING ::: 5911
with NAME ( STRING , STRING ::: 5911
INDENT NAME = STRING + NAME ::: 5908
NAME . NAME ) NEWLINE for ::: 5907
NAME ( * NAME ) NEWLINE ::: 5905
( ) NEWLINE NAME ( ) ::: 5903
) ) NEWLINE NAME = STRING ::: 5903
+ STRING ) NEWLINE NAME . ::: 5897
with NAME . NAME ( ) ::: 5895
) NEWLINE DEDENT @ NAME NEWLINE ::: 5890
( STRING , STRING ) as ::: 5887
. NAME = NAME NEWLINE if ::: 5887
and NAME . NAME . NAME ::: 5887
= NAME + STRING NEWLINE NAME ::: 5887
{ STRING : [ STRING , ::: 5886
NUMBER , NAME = True , ::: 5885
: STRING , STRING : NUMBER ::: 5882
% NAME ) NEWLINE NAME . ::: 5882
NEWLINE NAME = True NEWLINE DEDENT ::: 5879
] = NAME . NAME . ::: 5877
} NEWLINE NAME = { STRING ::: 5877
NAME = NAME ) NEWLINE if ::: 5874
raise NAME ( NAME ) NEWLINE ::: 5870
, NAME , NAME , ** ::: 5869
( STRING , ) NEWLINE NAME ::: 5868
NAME NEWLINE return NAME ( NAME ::: 5867
INDENT with NAME ( NAME , ::: 5865
BOS NEWLINE from NAME import ( ::: 5865
NEWLINE NAME . NAME ( { ::: 5864
STRING NEWLINE NAME = NAME + ::: 5861
NAME NEWLINE NAME = [ ] ::: 5855
STRING ) , NAME = NAME ::: 5854
STRING NEWLINE if NAME is None ::: 5854
( STRING ) NEWLINE def NAME ::: 5853
INDENT NAME = None NEWLINE DEDENT ::: 5846
NAME ] ) NEWLINE NAME = ::: 5842
NAME : NEWLINE INDENT NAME , ::: 5842
[ STRING ] , STRING ) ::: 5841
STRING ] , STRING : [ ::: 5836
, STRING , STRING ) , ::: 5835
NEWLINE try : NEWLINE INDENT return ::: 5823
NAME NEWLINE NAME ( NAME ) ::: 5815
NAME ( ) ) NEWLINE return ::: 5799
STRING ) NEWLINE from NAME . ::: 5796
, NAME in NAME : NEWLINE ::: 5796
( NAME . NAME ) == ::: 5795
[ STRING ] [ NUMBER ] ::: 5789
) . NAME ( ** NAME ::: 5789
NAME , NAME in NAME : ::: 5788
STRING + NAME + STRING ) ::: 5787
NAME . NAME ( ( STRING ::: 5783
NAME ( [ NAME , NAME ::: 5782
assert NAME . NAME ( NAME ::: 5781
True NEWLINE NAME . NAME = ::: 5781
( ) : NEWLINE INDENT global ::: 5778
) NEWLINE NAME ( NUMBER ) ::: 5774
DEDENT for NAME in NAME . ::: 5773
NAME ( STRING , NAME [ ::: 5769
, STRING , { STRING : ::: 5764
if NAME < NUMBER : NEWLINE ::: 5763
else : NEWLINE INDENT return STRING ::: 5762
= True ) , NAME = ::: 5759
, NUMBER ] ) NEWLINE NAME ::: 5759
= False , NAME = STRING ::: 5749
NAME : NEWLINE INDENT if not ::: 5747
NEWLINE INDENT NAME . NAME += ::: 5740
NEWLINE return NAME ( NAME ( ::: 5739
NAME > NAME : NEWLINE INDENT ::: 5737
return NAME [ NAME ] NEWLINE ::: 5735
NAME as NAME NEWLINE DEDENT except ::: 5733
, STRING ) , NAME ( ::: 5732
NUMBER ] , NAME . NAME ::: 5732
INDENT STRING NEWLINE raise NAME ( ::: 5731
from NAME import NAME NEWLINE if ::: 5729
= True , NAME = NUMBER ::: 5728
[ NAME . NAME , NAME ::: 5726
. NAME ( ) == STRING ::: 5723
, NAME , STRING , NAME ::: 5721
NEWLINE NAME ( NAME , STRING ::: 5718
, STRING , STRING , ) ::: 5717
NAME ) ) NEWLINE DEDENT else ::: 5717
, NAME ) , ( STRING ::: 5716
NAME ( STRING ) NEWLINE def ::: 5712
NAME != NUMBER : NEWLINE INDENT ::: 5710
NAME = [ NAME , NAME ::: 5704
NEWLINE DEDENT NAME ( STRING ) ::: 5704
STRING % NAME . NAME NEWLINE ::: 5694
STRING ] , NAME . NAME ::: 5694
( ** NAME ) NEWLINE NAME ::: 5692
STRING ) , STRING : NAME ::: 5691
STRING : [ STRING ] } ::: 5685
for NAME in NAME [ STRING ::: 5683
] ) ) NEWLINE DEDENT EOS ::: 5681
STRING ] NEWLINE DEDENT DEDENT EOS ::: 5679
NEWLINE NAME = STRING NEWLINE if ::: 5673
] , NAME ) NEWLINE DEDENT ::: 5668
, [ NUMBER , NUMBER , ::: 5666
NAME ) NEWLINE import NAME NEWLINE ::: 5666
] NEWLINE if NAME . NAME ::: 5665
NAME ( STRING ) ) ) ::: 5664
+ NUMBER ) : NEWLINE INDENT ::: 5659
NAME NEWLINE if NAME ( NAME ::: 5659
+ NAME . NAME . NAME ::: 5656
for NAME , NAME , NAME ::: 5654
NAME , NAME , NAME in ::: 5641
INDENT if NAME [ NAME ] ::: 5638
NAME [ NAME . NAME ( ::: 5636
, { STRING : STRING , ::: 5633
NEWLINE INDENT STRING NEWLINE return STRING ::: 5630
NAME NEWLINE NAME = True NEWLINE ::: 5627
, NAME . NAME [ NUMBER ::: 5623
. NAME ( NUMBER ) , ::: 5615
= NAME [ STRING ] , ::: 5615
NAME = ( NAME , NAME ::: 5614
. NAME ( NAME ) for ::: 5613
NAME . NAME == STRING NEWLINE ::: 5612
NAME ( STRING ) as NAME ::: 5612
STRING ) NEWLINE assert NAME . ::: 5611
) NEWLINE DEDENT elif NAME . ::: 5608
in NAME : NEWLINE INDENT for ::: 5607
] = NAME NEWLINE NAME . ::: 5595
, NAME , NAME in NAME ::: 5595
STRING in NAME . NAME : ::: 5591
* NEWLINE NAME = NAME ( ::: 5590
. NAME , NAME ( NAME ::: 5586
NEWLINE for NAME in NAME [ ::: 5586
return True NEWLINE DEDENT else : ::: 5586
. NAME . NAME NEWLINE from ::: 5585
) NEWLINE NAME += NUMBER NEWLINE ::: 5583
NAME in NAME ] NEWLINE DEDENT ::: 5583
) NEWLINE while True : NEWLINE ::: 5582
[ STRING ] NEWLINE DEDENT DEDENT ::: 5580
STRING , NAME ) , ( ::: 5576
) NEWLINE NAME = { } ::: 5575
- NUMBER ) : NEWLINE INDENT ::: 5575
import NAME NEWLINE NAME ( STRING ::: 5572
[ NAME ] = NAME [ ::: 5571
True , NAME = True , ::: 5570
if NAME > NUMBER : NEWLINE ::: 5567
: NEWLINE INDENT STRING NEWLINE DEDENT ::: 5565
global NAME NEWLINE NAME = NAME ::: 5565
None : NEWLINE INDENT raise NAME ::: 5562
STRING , NAME = [ NAME ::: 5562
NEWLINE INDENT assert NAME ( NAME ::: 5558
] , NAME = { STRING ::: 5558
( ) , NAME ) NEWLINE ::: 5554
BOS NEWLINE try : NEWLINE INDENT ::: 5553
NAME , ( NAME , NAME ::: 5548
( NAME , STRING ) , ::: 5546
= STRING % ( NAME . ::: 5545
. NAME ( STRING , ( ::: 5545
except NAME : NEWLINE INDENT import ::: 5541
= ( NUMBER , NUMBER ) ::: 5536
, STRING ] ) NEWLINE DEDENT ::: 5536
, ( STRING , NAME ) ::: 5535
NEWLINE if STRING in NAME : ::: 5533
INDENT raise NAME ( STRING . ::: 5533
NUMBER ] == STRING : NEWLINE ::: 5532
. NAME == NUMBER : NEWLINE ::: 5531
. NAME , STRING , STRING ::: 5529
: NEWLINE INDENT STRING NEWLINE @ ::: 5529
STRING NEWLINE if NAME : NEWLINE ::: 5529
NEWLINE INDENT STRING NEWLINE @ NAME ::: 5529
+ NAME + STRING ) NEWLINE ::: 5529
assert NAME . NAME == NUMBER ::: 5526
. NAME ( NAME ( NUMBER ::: 5526
NAME . NAME ( ) for ::: 5520
( STRING ) as NAME : ::: 5517
NAME NEWLINE from . . import ::: 5515
NAME , NAME ) in NAME ::: 5512
] , NAME . NAME [ ::: 5508
NAME ) = NAME . NAME ::: 5508
NAME = NAME ( [ NAME ::: 5503
) == STRING : NEWLINE INDENT ::: 5501
NEWLINE INDENT pass NEWLINE DEDENT NAME ::: 5500
NAME . NAME == NUMBER : ::: 5499
NAME ( NAME ( NUMBER , ::: 5489
NEWLINE NAME = ( NAME . ::: 5486
( NAME ) ) NEWLINE EOS ::: 5478
raise NAME . NAME ( STRING ::: 5477
INDENT STRING NEWLINE NAME ( STRING ::: 5476
) ] NEWLINE NAME . NAME ::: 5476
( NAME = None ) : ::: 5475
INDENT import NAME NEWLINE NAME = ::: 5466
, NAME ) for NAME in ::: 5456
, NAME = True , ) ::: 5453
NUMBER ) NEWLINE NAME ( STRING ::: 5452
( STRING ) NEWLINE DEDENT except ::: 5448
STRING ) ) NEWLINE NAME ( ::: 5446
STRING ] . NAME ( NAME ::: 5446
STRING ] , STRING ) NEWLINE ::: 5445
NAME [ NUMBER : NUMBER ] ::: 5445
. NAME ) NEWLINE DEDENT except ::: 5444
STRING , STRING : [ STRING ::: 5443
NAME ( STRING STRING ) NEWLINE ::: 5442
STRING NEWLINE NAME = True NEWLINE ::: 5439
= NAME ( NAME [ STRING ::: 5438
, STRING ] ) NEWLINE EOS ::: 5437
= False , NAME = False ::: 5433
+ NAME . NAME ( NAME ::: 5433
raise NAME . NAME ( NAME ::: 5432
NAME ( STRING , NUMBER , ::: 5427
, NAME = [ ] , ::: 5427
) , ( NUMBER , NUMBER ::: 5426
. NAME ( False ) NEWLINE ::: 5423
= { STRING : NUMBER , ::: 5418
) [ NUMBER ] NEWLINE DEDENT ::: 5411
DEDENT DEDENT except NAME : NEWLINE ::: 5411
) ) NEWLINE DEDENT DEDENT return ::: 5409
STRING ) NEWLINE if NAME . ::: 5405
, STRING : NAME ( NAME ::: 5401
NAME [ NUMBER : ] ) ::: 5396
INDENT return NEWLINE DEDENT NAME = ::: 5393
return NAME ( STRING ) NEWLINE ::: 5392
INDENT return False NEWLINE DEDENT return ::: 5392
NAME ( [ NAME ( NAME ::: 5392
INDENT NAME = STRING % NAME ::: 5389
( NAME , NAME ) for ::: 5389
NAME NEWLINE if NAME : NEWLINE ::: 5389
NAME , NAME ] ) NEWLINE ::: 5388
NEWLINE INDENT import NAME . NAME ::: 5387
: NEWLINE INDENT import NAME . ::: 5387
NEWLINE DEDENT from NAME . NAME ::: 5382
( ) NEWLINE def NAME ( ::: 5381
) NEWLINE return NEWLINE DEDENT EOS ::: 5380
NAME ] = NAME [ NAME ::: 5372
) : NEWLINE INDENT return NEWLINE ::: 5366
= NAME ( NAME ) . ::: 5365
[ NAME ] [ STRING ] ::: 5362
NEWLINE INDENT yield NAME NEWLINE DEDENT ::: 5358
STRING ) , NAME = STRING ::: 5357
NAME = NAME [ NUMBER : ::: 5352
DEDENT if NAME . NAME ( ::: 5352
NEWLINE if NAME not in NAME ::: 5351
, NAME . NAME [ STRING ::: 5350
NAME = True ) , ) ::: 5346
NAME NEWLINE from . NAME . ::: 5343
NAME . NAME ] = NAME ::: 5341
NUMBER , STRING : NUMBER } ::: 5341
NAME = None NEWLINE DEDENT DEDENT ::: 5338
NEWLINE INDENT continue NEWLINE DEDENT NAME ::: 5335
NEWLINE STRING NEWLINE import NAME , ::: 5334
NAME ) [ NUMBER ] NEWLINE ::: 5333
, STRING ] : NEWLINE INDENT ::: 5332
as NAME NEWLINE NAME . NAME ::: 5329
NAME as NAME NEWLINE NAME . ::: 5329
NEWLINE INDENT raise NAME ( ) ::: 5328
NAME ) NEWLINE from NAME import ::: 5328
} NEWLINE NAME = STRING NEWLINE ::: 5325
( STRING , [ STRING , ::: 5325
= NAME , NAME = NUMBER ::: 5324
STRING ) [ NUMBER ] NEWLINE ::: 5317
NAME , NAME . NAME [ ::: 5315
, NUMBER ] NEWLINE NAME = ::: 5313
INDENT raise NAME ( ) NEWLINE ::: 5313
( ) [ NUMBER ] NEWLINE ::: 5313
STRING , STRING ) : NEWLINE ::: 5305
. NAME ( STRING ) == ::: 5305
( ) : NEWLINE INDENT def ::: 5304
, NAME [ NAME ] ) ::: 5304
NAME ( ) NEWLINE DEDENT if ::: 5303
NAME . NAME ( ) - ::: 5301
NAME NEWLINE DEDENT return NAME . ::: 5299
= None , ** NAME ) ::: 5293
NAME [ NUMBER ] == STRING ::: 5292
* NAME . NAME ( NAME ::: 5291
NAME = None , ** NAME ::: 5290
. NAME ( [ NAME , ::: 5289
NEWLINE assert NAME ( NAME , ::: 5289
NAME + STRING + NAME . ::: 5289
] = NAME [ NAME ] ::: 5285
[ STRING , STRING , ] ::: 5283
) NEWLINE return False NEWLINE DEDENT ::: 5279
= STRING NEWLINE DEDENT else : ::: 5279
from . . import NAME NEWLINE ::: 5274
NAME NEWLINE DEDENT @ NAME NEWLINE ::: 5273
NAME . NAME ( False ) ::: 5272
, NUMBER ) ) NEWLINE DEDENT ::: 5269
NEWLINE NAME = STRING NEWLINE for ::: 5269
] ) NEWLINE DEDENT else : ::: 5268
INDENT NAME . NAME = False ::: 5262
INDENT NAME = [ NAME . ::: 5256
return NAME ( STRING , NAME ::: 5255
INDENT NAME = NAME ( NUMBER ::: 5248
NAME in NAME ] ) NEWLINE ::: 5248
( STRING , STRING , None ::: 5247
NAME ( ) ) NEWLINE EOS ::: 5246
( NAME = NUMBER ) ) ::: 5245
STRING , STRING ] : NEWLINE ::: 5243
= STRING ) , ) , ::: 5241
NAME += NAME . NAME ( ::: 5241
STRING ) NEWLINE try : NEWLINE ::: 5232
, STRING ) NEWLINE if NAME ::: 5230
DEDENT except : NEWLINE INDENT return ::: 5223
None , ** NAME ) : ::: 5221
NUMBER , NUMBER ) , ( ::: 5215
STRING + NAME ) NEWLINE NAME ::: 5215
( NAME ) [ NUMBER ] ::: 5212
NAME ( ( NUMBER , NUMBER ::: 5207
, STRING ) NEWLINE DEDENT def ::: 5205
NAME in [ STRING , STRING ::: 5199
> NAME : NEWLINE INDENT NAME ::: 5197
, NAME ) = NAME . ::: 5196
= NAME , NAME = True ::: 5191
, NAME = NAME ) ) ::: 5191
[ STRING ] , NAME . ::: 5189
NAME import NAME NEWLINE return NAME ::: 5188
NAME != NAME : NEWLINE INDENT ::: 5187
INDENT NAME = False NEWLINE DEDENT ::: 5187
STRING + NAME . NAME + ::: 5186
NAME NEWLINE NAME ( NAME . ::: 5181
DEDENT return NAME . NAME . ::: 5179
NEWLINE INDENT return NAME [ NAME ::: 5178
NEWLINE STRING NEWLINE import NAME . ::: 5178
STRING ] = NAME NEWLINE DEDENT ::: 5175
NUMBER ] ) NEWLINE DEDENT DEDENT ::: 5174
] = STRING NEWLINE NAME . ::: 5173
, STRING : STRING } ) ::: 5173
if NAME ( NAME ) : ::: 5173
return { STRING : NAME . ::: 5172
) NEWLINE from . NAME import ::: 5167
NEWLINE NAME = [ NAME for ::: 5166
. NAME ( ( STRING , ::: 5161
) , STRING : NAME ( ::: 5159
= STRING , NAME = None ::: 5155
, NAME NEWLINE from . . ::: 5155
( STRING , [ STRING ] ::: 5153
NAME ( ) , NAME ( ::: 5148
INDENT NAME = NAME + NAME ::: 5147
NUMBER , NAME ) NEWLINE NAME ::: 5145
, NAME . NAME ( NUMBER ::: 5142
STRING : NAME } NEWLINE NAME ::: 5141
STRING ) NEWLINE NAME = { ::: 5140
NAME ) NEWLINE assert NAME ( ::: 5138
if NAME == NAME . NAME ::: 5137
. NAME . NAME ( { ::: 5132
NAME . NAME ( ( NUMBER ::: 5128
= True ) , ) , ::: 5127
NAME ( NAME [ NUMBER : ::: 5125
NAME [ NUMBER : ] NEWLINE ::: 5125
INDENT return NAME NEWLINE DEDENT NAME ::: 5119
= NAME NEWLINE NAME = [ ::: 5115
: NEWLINE INDENT assert NAME . ::: 5114
NEWLINE INDENT assert NAME . NAME ::: 5114
[ STRING ] = NAME [ ::: 5109
INDENT return NAME NEWLINE DEDENT else ::: 5105
. NAME ( [ STRING ] ::: 5101
NAME ) . NAME ( ** ::: 5101
= NAME ( ) NEWLINE if ::: 5099
not NAME : NEWLINE INDENT raise ::: 5096
NEWLINE DEDENT NAME = NAME [ ::: 5094
) NEWLINE DEDENT if not NAME ::: 5094
= [ ] NEWLINE DEDENT EOS ::: 5092
NAME . NAME ( None , ::: 5086
. NAME [ NAME ] ) ::: 5081
STRING ] = NAME ( NAME ::: 5072
DEDENT if NAME . NAME : ::: 5065
, NAME ( NAME , NAME ::: 5065
STRING NEWLINE @ NAME NEWLINE def ::: 5059
except : NEWLINE INDENT NAME ( ::: 5055
STRING + NAME ) NEWLINE DEDENT ::: 5054
, NAME = None , ** ::: 5051
. NAME ( ) NEWLINE try ::: 5049
) ] NEWLINE NAME = NAME ::: 5047
NUMBER : NEWLINE INDENT NAME += ::: 5046
NAME = NAME NEWLINE NAME ( ::: 5042
= NAME ( NAME = [ ::: 5039
NAME ( ) NEWLINE with NAME ::: 5038
) NEWLINE DEDENT DEDENT except NAME ::: 5038
STRING } NEWLINE NAME . NAME ::: 5031
) NEWLINE import NAME NEWLINE NAME ::: 5027
. NAME . NAME ( ( ::: 5024
DEDENT if not NAME . NAME ::: 5021
STRING . NAME ( NAME [ ::: 5017
( NAME = NAME ( NAME ::: 5015
NAME = True ) ) NEWLINE ::: 5012
NEWLINE NAME ( ) . NAME ::: 5002
( STRING ) , NAME ( ::: 5000
as NAME : NEWLINE INDENT return ::: 4994
= STRING % NAME . NAME ::: 4991
NAME . NAME NEWLINE NAME ( ::: 4990
STRING , NAME = False , ::: 4988
[ NUMBER , NUMBER ] , ::: 4985
NAME NEWLINE assert NAME . NAME ::: 4984
NEWLINE return { STRING : NAME ::: 4981
NAME ] NEWLINE DEDENT else : ::: 4981
else : NEWLINE INDENT NAME [ ::: 4980
NAME ( NAME = { STRING ::: 4978
NAME . NAME ) , STRING ::: 4977
( ) NEWLINE for NAME , ::: 4977
STRING : False , STRING : ::: 4970
NAME ( NAME = None , ::: 4970
return True NEWLINE DEDENT DEDENT EOS ::: 4967
STRING NEWLINE NAME . NAME [ ::: 4966
= False , NAME = True ::: 4964
( NAME ( NAME , STRING ::: 4960
= NUMBER ) , NAME = ::: 4957
NUMBER ) , ( NUMBER , ::: 4956
. NAME ( ( NUMBER , ::: 4956
} NEWLINE def NAME ( NAME ::: 4953
== NAME . NAME . NAME ::: 4952
NAME ( STRING ) ] NEWLINE ::: 4951
( NAME = { STRING : ::: 4949
NUMBER , NAME ) : NEWLINE ::: 4943
( NAME = None , NAME ::: 4941
= STRING , NAME = { ::: 4940
STRING } NEWLINE NAME = NAME ::: 4939
. . NAME import NAME , ::: 4939
DEDENT DEDENT return False NEWLINE DEDENT ::: 4938
( NAME . NAME ) + ::: 4934
NAME ( * NAME ) : ::: 4933
NAME ( ) NEWLINE from NAME ::: 4933
NAME = NUMBER ) ) NEWLINE ::: 4932
] = STRING NEWLINE NAME [ ::: 4932
( NAME ( STRING , NAME ::: 4931
= STRING % NAME NEWLINE NAME ::: 4929
INDENT global NAME NEWLINE NAME = ::: 4922
, ) NEWLINE NAME . NAME ::: 4921
( NAME ) NEWLINE DEDENT elif ::: 4921
, ) NEWLINE NAME = ( ::: 4915
) != NUMBER : NEWLINE INDENT ::: 4915
True , NAME = STRING , ::: 4913
NEWLINE INDENT NAME += NAME ( ::: 4904
) < NUMBER : NEWLINE INDENT ::: 4904
) for NAME , NAME in ::: 4903
NUMBER ] : NEWLINE INDENT NAME ::: 4903
: STRING } NEWLINE NAME . ::: 4903
NAME = STRING NEWLINE DEDENT else ::: 4902
INDENT NAME = True NEWLINE DEDENT ::: 4895
( * NAME ) : NEWLINE ::: 4893
STRING , [ STRING ] ) ::: 4892
STRING : NAME } NEWLINE DEDENT ::: 4888
NAME ( ) ) , NAME ::: 4886
INDENT return { STRING : NAME ::: 4881
NAME ) NEWLINE NAME = ( ::: 4880
) ] ) NEWLINE NAME = ::: 4879
NAME , NAME [ NAME ] ::: 4878
= STRING NEWLINE NAME [ STRING ::: 4878
STRING ) NEWLINE return NAME ( ::: 4877
, NAME ( ) ) NEWLINE ::: 4863
NEWLINE INDENT if NAME == NUMBER ::: 4861
assert NAME . NAME ( ) ::: 4859
STRING : STRING } , NAME ::: 4856
NAME ( NAME ( ) , ::: 4851
. NAME ( NAME , None ::: 4843
) ) for NAME in NAME ::: 4842
STRING NEWLINE DEDENT NAME = NAME ::: 4834
STRING ) NEWLINE if not NAME ::: 4827
, NAME ( STRING ) , ::: 4827
] ) ) NEWLINE DEDENT DEDENT ::: 4826
NAME ( ) NEWLINE def NAME ::: 4826
NAME == None : NEWLINE INDENT ::: 4823
NAME : NEWLINE INDENT yield NAME ::: 4822
NAME [ STRING ] [ NUMBER ::: 4820
[ NUMBER ] , NAME . ::: 4818
NAME . NAME ( - NUMBER ::: 4817
] = NAME NEWLINE return NAME ::: 4812
NAME = STRING % NAME . ::: 4811
NEWLINE DEDENT NAME = STRING NEWLINE ::: 4810
NAME . NAME NEWLINE DEDENT except ::: 4809
NAME NEWLINE NAME = None NEWLINE ::: 4804
* NEWLINE import NAME NEWLINE import ::: 4803
NAME = True NEWLINE DEDENT DEDENT ::: 4801
STRING + NAME + STRING NEWLINE ::: 4801
NEWLINE DEDENT if not NAME . ::: 4799
NEWLINE DEDENT DEDENT except NAME : ::: 4796
NAME , NAME . NAME ] ::: 4796
DEDENT else : NEWLINE INDENT if ::: 4796
. NAME ( ( NAME . ::: 4794
] , NAME = STRING ) ::: 4791
STRING ] . NAME ( STRING ::: 4789
as NAME NEWLINE DEDENT except NAME ::: 4786
NAME NEWLINE NAME , NAME = ::: 4779
( ) ) ) NEWLINE NAME ::: 4776
. NAME ( NAME ) ] ::: 4771
STRING ) NEWLINE NAME = NUMBER ::: 4770
. NAME import NAME NEWLINE try ::: 4765
: NEWLINE INDENT STRING NEWLINE assert ::: 4765
[ NAME . NAME for NAME ::: 4765
as NAME NEWLINE NAME = STRING ::: 4764
= STRING ) NEWLINE NAME ( ::: 4761
NAME = True NEWLINE DEDENT EOS ::: 4759
return NAME NEWLINE DEDENT NAME = ::: 4751
] NEWLINE DEDENT NAME = NAME ::: 4748
NEWLINE INDENT break NEWLINE DEDENT DEDENT ::: 4748
, None ) NEWLINE NAME . ::: 4747
NEWLINE INDENT return NAME ( ) ::: 4744
. NAME [ NUMBER : ] ::: 4737
= NAME ) NEWLINE if NAME ::: 4732
def NAME ( * NAME ) ::: 4731
= True NEWLINE NAME = NAME ::: 4731
( STRING ) ) ) NEWLINE ::: 4727
) , NAME ( NAME . ::: 4725
, NUMBER ) , ( NUMBER ::: 4718
NAME ) : NEWLINE INDENT yield ::: 4717
. NAME ( * NAME ) ::: 4717
) ) NEWLINE NAME = [ ::: 4716
] , NAME = NAME [ ::: 4714
) , NAME ( STRING ) ::: 4713
) ) NEWLINE return NAME ( ::: 4712
( STRING , NAME , STRING ::: 4706
NEWLINE assert NAME ( NAME . ::: 4706
STRING ] ) ) NEWLINE DEDENT ::: 4704
, STRING : NAME } ) ::: 4704
. NAME ( ) - NAME ::: 4702
, NAME , ) NEWLINE from ::: 4701
) for NAME in NAME ) ::: 4696
) NEWLINE if STRING in NAME ::: 4694
def NAME ( NAME = STRING ::: 4692
NEWLINE return True NEWLINE DEDENT EOS ::: 4690
, NAME ) NEWLINE assert NAME ::: 4689
] , STRING ) NEWLINE NAME ::: 4686
. NAME . NAME [ NAME ::: 4686
NUMBER , STRING ) NEWLINE NAME ::: 4686
NAME ( STRING % NAME ( ::: 4682
NEWLINE DEDENT return None NEWLINE DEDENT ::: 4680
. NAME ( ) == NAME ::: 4679
STRING , STRING ] , STRING ::: 4679
( NAME , ( NAME , ::: 4673
NAME ) NEWLINE return NEWLINE DEDENT ::: 4672
NAME . NAME ) == NUMBER ::: 4667
import ( NAME , NAME ) ::: 4667
NAME . NAME , NUMBER , ::: 4666
NAME in NAME . NAME [ ::: 4660
( ) ) NEWLINE return NAME ::: 4659
= NAME NEWLINE def NAME ( ::: 4658
, NAME ) NEWLINE import NAME ::: 4654
. NAME ) , NAME . ::: 4647
] = NAME NEWLINE DEDENT return ::: 4647
NUMBER NEWLINE NAME . NAME . ::: 4644
] = NAME NEWLINE NAME [ ::: 4643
assert NAME . NAME == STRING ::: 4639
STRING ) ( NAME = NUMBER ::: 4638
is None : NEWLINE INDENT raise ::: 4638
. NAME NEWLINE DEDENT except NAME ::: 4636
DEDENT NAME = NAME ( ) ::: 4635
INDENT return NEWLINE DEDENT NAME . ::: 4633
( { STRING : STRING , ::: 4633
NAME = NAME NEWLINE def NAME ::: 4625
as NAME NEWLINE from . NAME ::: 4625
) [ NUMBER ] . NAME ::: 4622
NAME = STRING ) ) , ::: 4618
INDENT STRING NEWLINE NAME = ( ::: 4617
) ] ) NEWLINE DEDENT EOS ::: 4616
% ( NAME . NAME . ::: 4613
, STRING : NAME , } ::: 4609
NAME ] , NAME [ NAME ::: 4604
except : NEWLINE INDENT NAME . ::: 4604
[ NAME ] , NAME ) ::: 4599
= [ NAME ( NAME ) ::: 4598
] ) NEWLINE return NAME NEWLINE ::: 4596
[ STRING ] = NUMBER NEWLINE ::: 4595
) , NAME = [ STRING ::: 4594
= NUMBER NEWLINE NAME = [ ::: 4592
True NEWLINE DEDENT return False NEWLINE ::: 4589
NAME [ NAME - NUMBER ] ::: 4587
) NEWLINE NAME ( NAME [ ::: 4587
( NAME , NAME ) in ::: 4585
return True NEWLINE DEDENT return False ::: 4585
) NEWLINE import NAME . NAME ::: 4584
NUMBER , NAME ) NEWLINE DEDENT ::: 4584
] NEWLINE return NAME . NAME ::: 4581
) NEWLINE NAME ( NAME = ::: 4579
, NAME ) NEWLINE for NAME ::: 4578
STRING , NAME ) NEWLINE if ::: 4577
None NEWLINE DEDENT def NAME ( ::: 4577
. NAME ( ) , NUMBER ::: 4574
STRING ) NEWLINE from NAME import ::: 4573
NAME = STRING NEWLINE STRING NEWLINE ::: 4571
STRING , NAME , STRING , ::: 4565
NAME [ NAME ] [ STRING ::: 4565
NAME ( ) as NAME : ::: 4559
( ) as NAME : NEWLINE ::: 4558
) NEWLINE DEDENT DEDENT DEDENT return ::: 4555
, STRING , NUMBER ) NEWLINE ::: 4552
NAME ( ) , STRING : ::: 4552
NEWLINE INDENT if NAME [ STRING ::: 4550
NAME , NAME ( STRING ) ::: 4546
] ) ) NEWLINE NAME . ::: 4546
INDENT if NAME in NAME . ::: 4545
STRING NEWLINE NAME = False NEWLINE ::: 4544
NUMBER : STRING , NUMBER : ::: 4542
. NAME ( NAME ) + ::: 4541
NAME , NAME . NAME NEWLINE ::: 4541
NUMBER NEWLINE DEDENT def NAME ( ::: 4541
: STRING , NUMBER : STRING ::: 4540
INDENT if NAME [ STRING ] ::: 4539
BOS NEWLINE NAME = NAME ( ::: 4537
% ( NAME , NAME . ::: 4535
, STRING ) , ) NEWLINE ::: 4533
STRING NEWLINE for NAME , NAME ::: 4527
NAME ( NAME , NAME + ::: 4526
NAME for NAME in NAME ] ::: 4525
) NEWLINE DEDENT finally : NEWLINE ::: 4524
, ) NEWLINE DEDENT DEDENT EOS ::: 4520
DEDENT return NAME , NAME NEWLINE ::: 4519
NUMBER : NEWLINE INDENT return NUMBER ::: 4515
NAME ) NEWLINE for NAME , ::: 4514
NAME . NAME as NAME : ::: 4514
STRING ) NEWLINE DEDENT elif NAME ::: 4510
NAME ( ) ] ) NEWLINE ::: 4509
: NAME . NAME } ) ::: 4509
STRING % NAME ( NAME ) ::: 4507
: NUMBER , STRING : STRING ::: 4507
: NEWLINE INDENT class NAME ( ::: 4505
[ NAME . NAME ] ) ::: 4504
. NAME NEWLINE return NAME NEWLINE ::: 4502
NAME = STRING ) NEWLINE return ::: 4501
as NAME : NEWLINE INDENT raise ::: 4496
= NAME . NAME ( { ::: 4496
= NAME ( NAME = True ::: 4496
[ STRING ] , NAME ) ::: 4493
NUMBER ) NEWLINE DEDENT else : ::: 4491
NAME ( [ STRING ] ) ::: 4490
NUMBER == NUMBER : NEWLINE INDENT ::: 4488
( NUMBER , NAME ) : ::: 4488
DEDENT elif NAME ( NAME , ::: 4488
return NAME NEWLINE DEDENT DEDENT DEDENT ::: 4487
} NEWLINE NAME [ STRING ] ::: 4480
) = NAME . NAME ( ::: 4480
NAME ) NEWLINE NAME [ NAME ::: 4479
( NAME ) + STRING + ::: 4478
] = NAME [ STRING ] ::: 4478
NEWLINE INDENT NAME += NAME NEWLINE ::: 4477
= None NEWLINE DEDENT DEDENT EOS ::: 4471
NAME import NAME NEWLINE STRING NEWLINE ::: 4470
) , STRING ) ) NEWLINE ::: 4470
NAME ( NAME , None ) ::: 4468
INDENT return True NEWLINE DEDENT else ::: 4467
( NAME [ NAME ] , ::: 4466
NAME } ) NEWLINE DEDENT EOS ::: 4465
( ) : NEWLINE INDENT try ::: 4464
) NEWLINE DEDENT DEDENT def NAME ::: 4463
( ) NEWLINE if NAME == ::: 4462
NAME . NAME . NAME ] ::: 4462
NAME . NAME ) ) ) ::: 4452
NUMBER ] ) ) NEWLINE DEDENT ::: 4445
NAME = [ ] , NAME ::: 4441
. NAME == NAME : NEWLINE ::: 4440
: [ ] , STRING : ::: 4439
. NAME . NAME [ NUMBER ::: 4438
STRING : [ ] , STRING ::: 4436
if NAME . NAME == NUMBER ::: 4436
STRING ] NEWLINE for NAME in ::: 4435
True ) : NEWLINE INDENT STRING ::: 4435
[ NAME ] [ NUMBER ] ::: 4433
] [ STRING ] NEWLINE NAME ::: 4422
NAME ) NEWLINE return NAME , ::: 4421
NAME ) ) , NAME ( ::: 4421
: [ STRING , STRING ] ::: 4420
NEWLINE INDENT class NAME ( NAME ::: 4420
] NEWLINE DEDENT NAME . NAME ::: 4417
= NAME [ STRING ] ) ::: 4417
= NAME ) NEWLINE NAME ( ::: 4416
assert NAME . NAME ( STRING ::: 4416
NAME ) ) NEWLINE for NAME ::: 4413
NAME ( NAME , NAME : ::: 4410
) NEWLINE NAME = None NEWLINE ::: 4410
( [ NAME . NAME ( ::: 4410
= [ ] , NAME = ::: 4409
[ NAME ] NEWLINE NAME . ::: 4407
INDENT return True NEWLINE DEDENT return ::: 4404
NAME NEWLINE NAME ( ) NEWLINE ::: 4404
STRING , { STRING : STRING ::: 4403
+ NAME . NAME ) NEWLINE ::: 4402
NAME [ STRING ] = NUMBER ::: 4400
. NAME ) , NAME = ::: 4400
NEWLINE INDENT return STRING % NAME ::: 4398
NAME . NAME == NAME : ::: 4394
< NUMBER : NEWLINE INDENT return ::: 4393
NAME . NAME } ) NEWLINE ::: 4393
STRING ] ) NEWLINE NAME ( ::: 4392
{ } NEWLINE NAME = NAME ::: 4386
. NAME , NAME = NUMBER ::: 4386
NAME ) NEWLINE DEDENT for NAME ::: 4386
, NAME = ( NUMBER , ::: 4385
NAME ] . NAME ( ) ::: 4385
NEWLINE NAME = NAME - NAME ::: 4385
. NAME as NAME : NEWLINE ::: 4384
[ ] NEWLINE for NAME , ::: 4384
NAME == NAME . NAME NEWLINE ::: 4383
NAME ) + STRING ) NEWLINE ::: 4383
. NAME ( NAME , ** ::: 4382
in NAME [ STRING ] : ::: 4377
STRING : STRING } , STRING ::: 4368
NAME ) ) . NAME ( ::: 4367
STRING , None ) NEWLINE NAME ::: 4363
NAME ( ) . NAME NEWLINE ::: 4363
NUMBER : NEWLINE INDENT return STRING ::: 4359
raise NAME NEWLINE DEDENT DEDENT EOS ::: 4358
INDENT if NAME == NUMBER : ::: 4358
STRING NEWLINE with NAME . NAME ::: 4356
, NAME ) ) NEWLINE return ::: 4356
NEWLINE DEDENT return NAME , NAME ::: 4355
NAME [ STRING ] NEWLINE if ::: 4351
NEWLINE NAME = [ NAME , ::: 4351
= STRING ) NEWLINE DEDENT DEDENT ::: 4350
NAME [ NAME ] [ NUMBER ::: 4348
= None , NAME = STRING ::: 4346
NAME , NAME = NAME [ ::: 4346
NAME = NAME ( lambda NAME ::: 4343
[ ( STRING , STRING , ::: 4342
= [ ( STRING , NAME ::: 4337
: STRING } , NAME = ::: 4331
NAME + NUMBER ) : NEWLINE ::: 4329
% NAME ) NEWLINE NAME = ::: 4325
( ( STRING , STRING ) ::: 4324
DEDENT DEDENT return NAME . NAME ::: 4321
NEWLINE NAME . NAME = ( ::: 4319
. NAME NEWLINE if NAME . ::: 4319
DEDENT return STRING . NAME ( ::: 4316
NAME ) : NEWLINE INDENT while ::: 4315
with NAME ( STRING ) as ::: 4311
NUMBER , NAME = NAME ) ::: 4310
for NAME in NAME ) NEWLINE ::: 4310
NEWLINE DEDENT if NAME == STRING ::: 4309
NAME , NAME [ NUMBER ] ::: 4304
= NAME ( NAME ( NUMBER ::: 4302
NAME , STRING , NAME , ::: 4301
NEWLINE return NAME . NAME [ ::: 4300
DEDENT for NAME in NAME ( ::: 4300
None ) NEWLINE NAME = NAME ::: 4295
STRING ) NEWLINE if NAME : ::: 4292
( NAME , NAME : NAME ::: 4292
[ STRING ] NEWLINE if NAME ::: 4291
return NAME , NAME , NAME ::: 4288
( ) NEWLINE DEDENT if NAME ::: 4288
not None : NEWLINE INDENT return ::: 4288
NUMBER NEWLINE def NAME ( NAME ::: 4288
] , NAME [ NAME ] ::: 4288
( NAME = NAME [ STRING ::: 4287
( NAME = NUMBER ) , ::: 4286
( NAME = NAME ) . ::: 4283
) NEWLINE NAME , NAME , ::: 4283
, [ NUMBER , NUMBER ] ::: 4281
NAME ] NEWLINE DEDENT return NAME ::: 4281
STRING ] , ) NEWLINE EOS ::: 4280
DEDENT except ( NAME , NAME ::: 4275
( ) NEWLINE NAME = { ::: 4273
NEWLINE STRING NEWLINE NAME = NAME ::: 4273
[ NAME ] , NAME [ ::: 4270
( STRING ) , STRING : ::: 4267
) ) : NEWLINE INDENT return ::: 4261
( STRING % NAME ( NAME ::: 4256
) -> NAME : NEWLINE INDENT ::: 4252
( ) : NEWLINE INDENT from ::: 4249
: NAME . NAME , } ::: 4246
INDENT NAME . NAME ( ( ::: 4243
) NEWLINE return NAME ( STRING ::: 4243
( NAME ) NEWLINE try : ::: 4241
NAME ( True ) NEWLINE NAME ::: 4240
( NAME [ STRING ] [ ::: 4239
NEWLINE NAME = STRING NEWLINE STRING ::: 4239
NAME . NAME NEWLINE NAME [ ::: 4237
NEWLINE NAME = NAME * NAME ::: 4236
) , ) NEWLINE NAME = ::: 4235
if NAME [ STRING ] == ::: 4235
) NEWLINE NAME = True NEWLINE ::: 4229
STRING ) , ) , ] ::: 4227
NUMBER ) , NAME . NAME ::: 4225
, STRING , NAME , NAME ::: 4224
( ) : NEWLINE INDENT with ::: 4219
, NUMBER , STRING ) NEWLINE ::: 4219
% NUMBER == NUMBER : NEWLINE ::: 4217
) , NAME = False , ::: 4216
( ) NEWLINE NAME = NUMBER ::: 4215
NEWLINE return NAME ( STRING , ::: 4213
= NAME [ STRING ] . ::: 4211
( NAME , NAME , ) ::: 4211
NEWLINE DEDENT DEDENT return NAME ( ::: 4210
DEDENT if NAME ( NAME ) ::: 4208
= True NEWLINE NAME = STRING ::: 4207
NUMBER NEWLINE DEDENT NAME = NAME ::: 4206
NAME [ NAME + NUMBER ] ::: 4204
NAME ( NAME ) NEWLINE try ::: 4203
NAME , NAME = { STRING ::: 4200
) NEWLINE DEDENT if NAME ( ::: 4200
NAME = STRING ) . NAME ::: 4200
STRING NEWLINE NAME = NAME [ ::: 4196
] , NAME = NAME ) ::: 4195
NAME ) , STRING ) ) ::: 4195
INDENT raise NAME ( STRING STRING ::: 4194
NAME . NAME , ) NEWLINE ::: 4193
NUMBER NEWLINE assert NAME . NAME ::: 4193
NAME , NAME . NAME = ::: 4192
True NEWLINE NAME . NAME ( ::: 4192
INDENT yield NAME NEWLINE DEDENT DEDENT ::: 4191
% NAME . NAME . NAME ::: 4190
NEWLINE NAME = None NEWLINE EOS ::: 4187
[ STRING ] ) NEWLINE EOS ::: 4185
NUMBER ] for NAME in NAME ::: 4184
( lambda NAME : NAME . ::: 4183
DEDENT if NAME == STRING : ::: 4181
. NAME NEWLINE DEDENT NAME = ::: 4181
( STRING , ( STRING , ::: 4180
INDENT import NAME NEWLINE NAME . ::: 4179
( NAME , None ) NEWLINE ::: 4179
( STRING ) NEWLINE DEDENT elif ::: 4178
] NEWLINE NAME = { STRING ::: 4177
INDENT raise NAME NEWLINE DEDENT DEDENT ::: 4170
= NAME NEWLINE DEDENT NAME . ::: 4167
NAME . NAME + STRING NEWLINE ::: 4166
NAME , NAME = [ STRING ::: 4165
NEWLINE with NAME ( STRING , ::: 4164
STRING , STRING ) NEWLINE return ::: 4163
DEDENT elif NAME . NAME == ::: 4163
STRING ] , STRING : NAME ::: 4159
STRING NEWLINE NAME = STRING % ::: 4159
NAME ( ) , NUMBER ) ::: 4156
NAME , NAME ) NEWLINE assert ::: 4154
STRING NEWLINE with NAME ( NAME ::: 4153
NAME . NAME ) , ( ::: 4152
, NAME ) ) : NEWLINE ::: 4152
. NAME ( NAME , ( ::: 4151
, NAME = [ ( STRING ::: 4150
NAME ( NAME = NAME [ ::: 4150
+ NAME NEWLINE NAME = NAME ::: 4149
) . NAME ( ) : ::: 4149
INDENT NAME += NAME ( NAME ::: 4147
) NEWLINE import NAME NEWLINE from ::: 4145
NUMBER ) , NAME = False ::: 4143
INDENT if STRING in NAME : ::: 4140
) ; NEWLINE NAME . NAME ::: 4138
) NEWLINE if NAME == NUMBER ::: 4138
[ NUMBER ] , STRING ) ::: 4137
NEWLINE DEDENT DEDENT return False NEWLINE ::: 4137
STRING , NAME [ STRING ] ::: 4136
( { STRING : NAME . ::: 4136
NAME , STRING . NAME ( ::: 4133
NAME ) NEWLINE with NAME ( ::: 4131
( NAME . NAME + STRING ::: 4130
NAME in ( STRING , STRING ::: 4129
NEWLINE INDENT NAME += STRING NEWLINE ::: 4126
NAME NEWLINE DEDENT return NAME ( ::: 4126
not NAME ( NAME , STRING ::: 4124
NAME ) < NUMBER : NEWLINE ::: 4124
STRING , ] NEWLINE NAME = ::: 4122
else : NEWLINE INDENT return None ::: 4122
+ NAME . NAME ( ) ::: 4120
, NAME = [ NAME ( ::: 4111
!= NAME : NEWLINE INDENT NAME ::: 4109
NAME = - NUMBER NEWLINE NAME ::: 4108
NAME : NEWLINE INDENT break NEWLINE ::: 4108
STRING , STRING : NAME . ::: 4106
[ NAME , NAME ] ) ::: 4103
INDENT return None NEWLINE DEDENT NAME ::: 4100
STRING ] , NAME = { ::: 4099
STRING , STRING ) , ) ::: 4096
( STRING , NAME = { ::: 4095
= NAME NEWLINE DEDENT NAME = ::: 4094
NAME ( STRING % NAME , ::: 4094
STRING ) NEWLINE NAME ( ) ::: 4093
NAME ] = NAME NEWLINE NAME ::: 4092
: NEWLINE INDENT while True : ::: 4091
if NAME ( NAME ) != ::: 4090
NAME . NAME NEWLINE DEDENT if ::: 4089
NAME for NAME in NAME ( ::: 4088
NEWLINE INDENT while True : NEWLINE ::: 4088
INDENT while True : NEWLINE INDENT ::: 4088
. NAME - NAME . NAME ::: 4086
= NAME + NUMBER NEWLINE DEDENT ::: 4085
= NAME . NAME + NAME ::: 4085
( NAME ( NUMBER ) ) ::: 4083
, { STRING : NAME } ::: 4082
, STRING : True , STRING ::: 4082
= NAME ( STRING ) , ::: 4081
} ) NEWLINE DEDENT DEDENT EOS ::: 4079
NAME ( NAME ) + NAME ::: 4079
INDENT return False NEWLINE DEDENT NAME ::: 4079
. NAME ) ) , NAME ::: 4077
, NAME = None ) NEWLINE ::: 4076
= NAME ) ) NEWLINE DEDENT ::: 4075
NEWLINE if NAME in NAME : ::: 4075
, STRING : [ ] , ::: 4074
NAME , NAME , STRING , ::: 4073
NAME = NAME - NAME NEWLINE ::: 4070
: STRING } , STRING : ::: 4069
= NUMBER NEWLINE def NAME ( ::: 4069
in NAME ( NAME ) ] ::: 4068
INDENT NAME ( ) NEWLINE NAME ::: 4067
NUMBER ) NEWLINE for NAME in ::: 4067
) NEWLINE return NEWLINE DEDENT NAME ::: 4066
INDENT STRING NEWLINE if NAME : ::: 4064
( NAME = [ STRING , ::: 4063
] [ STRING ] ) NEWLINE ::: 4063
NAME = NUMBER NEWLINE def NAME ::: 4060
STRING ) ) : NEWLINE INDENT ::: 4056
STRING NEWLINE if not NAME : ::: 4055
= NAME ( STRING ) ) ::: 4054
NAME ) ] NEWLINE DEDENT EOS ::: 4054
STRING : NAME , } NEWLINE ::: 4051
+ STRING NEWLINE NAME . NAME ::: 4049
NAME ) , NAME = STRING ::: 4049
( NAME ) NEWLINE from NAME ::: 4048
, STRING , ] , NAME ::: 4047
, STRING ] , STRING : ::: 4044
= NAME NEWLINE NAME [ STRING ::: 4041
= NAME ( lambda NAME : ::: 4041
NAME = NAME NEWLINE DEDENT return ::: 4038
NAME ] ) ) NEWLINE DEDENT ::: 4037
{ STRING : NAME ( NAME ::: 4034
, NAME ) NEWLINE from . ::: 4034
] , NAME . NAME ) ::: 4033
NAME [ NAME ( NAME ) ::: 4032
, NAME , NUMBER ) NEWLINE ::: 4032
NAME . NAME - NAME . ::: 4030
+ NAME ( NAME ) NEWLINE ::: 4030
) NEWLINE DEDENT try : NEWLINE ::: 4030
NAME ) ) NEWLINE DEDENT except ::: 4029
except : NEWLINE INDENT NAME = ::: 4029
STRING ) NEWLINE return NEWLINE DEDENT ::: 4028
( NAME ) + STRING ) ::: 4024
NEWLINE INDENT NAME += NAME . ::: 4021
INDENT NAME += NAME . NAME ::: 4021
( NAME . NAME == NAME ::: 4019
: NAME ( NAME . NAME ::: 4017
NAME . NAME NEWLINE assert NAME ::: 4015
) , NAME = NUMBER ) ::: 4015
True ) NEWLINE DEDENT DEDENT EOS ::: 4014
INDENT STRING NEWLINE if NAME == ::: 4013
NAME . NAME + STRING ) ::: 4013
, STRING : NUMBER } NEWLINE ::: 4011
True NEWLINE NAME = STRING NEWLINE ::: 4008
[ NUMBER ] NEWLINE DEDENT DEDENT ::: 4006
= STRING ) NEWLINE return NAME ::: 4006
( NAME ( NUMBER , NUMBER ::: 4006
INDENT NAME ( NAME ( NAME ::: 4006
NAME = NUMBER NEWLINE DEDENT DEDENT ::: 4004
, NUMBER ) , NAME = ::: 4004
. NAME ( NAME + NAME ::: 4002
STRING NEWLINE if not NAME ( ::: 4001
: NEWLINE INDENT return [ ] ::: 4000
( NAME = NAME ) ) ::: 3999
NEWLINE NAME [ NUMBER ] = ::: 3999
( STRING , ) NEWLINE DEDENT ::: 3997
. NAME NEWLINE DEDENT NAME . ::: 3995
STRING ) NEWLINE DEDENT NAME ( ::: 3995
NEWLINE NAME ( STRING , STRING ::: 3995
assert NAME . NAME == NAME ::: 3993
( NAME , ) ) NEWLINE ::: 3992
INDENT return NAME ( NAME ( ::: 3991
) [ NUMBER ] ) NEWLINE ::: 3990
= [ NAME . NAME . ::: 3989
else : NEWLINE INDENT if NAME ::: 3988
raise NAME ( STRING % ( ::: 3982
NUMBER , NAME = NAME . ::: 3977
) . NAME ( NUMBER ) ::: 3974
NEWLINE DEDENT @ NAME . NAME ::: 3969
. NAME ( lambda NAME : ::: 3969
( NAME = [ STRING ] ::: 3968
) . NAME . NAME ( ::: 3968
INDENT return NAME NEWLINE DEDENT return ::: 3967
INDENT NAME = [ STRING ] ::: 3967
NAME ( NAME = False , ::: 3967
( ( NUMBER , NUMBER ) ::: 3966
NEWLINE DEDENT DEDENT NAME ( NAME ::: 3965
return NAME [ NUMBER ] NEWLINE ::: 3963
NEWLINE return NAME ( NAME = ::: 3962
INDENT return NUMBER NEWLINE DEDENT DEDENT ::: 3961
[ NUMBER ] NEWLINE if NAME ::: 3961
NAME ( STRING , ( STRING ::: 3959
( NAME = False , NAME ::: 3957
% NAME ) NEWLINE DEDENT EOS ::: 3955
NAME % NUMBER == NUMBER : ::: 3955
STRING , NAME ) ) NEWLINE ::: 3953
% ( NAME . NAME ( ::: 3952
] NEWLINE return NAME ( NAME ::: 3951
( ) , NAME = True ::: 3951
NAME ) != NUMBER : NEWLINE ::: 3948
[ NUMBER ] == STRING : ::: 3943
NAME = [ ] NEWLINE if ::: 3943
NAME , NAME ) NEWLINE import ::: 3943
for ( NAME , NAME ) ::: 3943
NAME ( NAME ) NEWLINE from ::: 3940
NEWLINE INDENT return [ ] NEWLINE ::: 3936
. NAME ( STRING ) or ::: 3936
[ { STRING : STRING , ::: 3936
STRING % NAME . NAME . ::: 3935
INDENT return [ ] NEWLINE DEDENT ::: 3934
return ( NAME , NAME ) ::: 3934
) NEWLINE DEDENT if NAME : ::: 3930
NAME = None NEWLINE if NAME ::: 3930
NEWLINE with NAME ( NAME ) ::: 3927
False NEWLINE DEDENT else : NEWLINE ::: 3927
= NAME NEWLINE NAME ( NAME ::: 3927
NAME ( ) NEWLINE NAME , ::: 3923
> NUMBER : NEWLINE INDENT return ::: 3922
NAME . NAME ) + STRING ::: 3922
STRING % ( NAME ( NAME ::: 3920
DEDENT DEDENT return True NEWLINE DEDENT ::: 3919
, STRING ] NEWLINE NAME . ::: 3918
DEDENT DEDENT return NAME ( NAME ::: 3916
) NEWLINE DEDENT NAME = STRING ::: 3914
STRING , STRING : NUMBER , ::: 3910
STRING , NAME , NAME , ::: 3906
NEWLINE NAME += NAME . NAME ::: 3902
] NEWLINE NAME [ STRING ] ::: 3902
STRING , ) NEWLINE DEDENT EOS ::: 3901
INDENT return NAME [ NAME ] ::: 3898
STRING : { STRING : NAME ::: 3897
STRING , STRING ) ] NEWLINE ::: 3897
= STRING + NAME . NAME ::: 3897
NAME = STRING + NAME NEWLINE ::: 3896
NAME NEWLINE NAME = False NEWLINE ::: 3895
NAME ( ) ) NEWLINE if ::: 3893
: NEWLINE INDENT from . NAME ::: 3891
NAME <= NUMBER : NEWLINE INDENT ::: 3890
None NEWLINE DEDENT NAME = NAME ::: 3888
, ( STRING , NAME ( ::: 3888
NAME NEWLINE NAME = ( NAME ::: 3887
NAME : NEWLINE INDENT continue NEWLINE ::: 3887
NAME , STRING , None ) ::: 3886
) NEWLINE DEDENT DEDENT NAME = ::: 3886
( ) NEWLINE if NAME ( ::: 3884
: NEWLINE INDENT if NAME != ::: 3884
== STRING NEWLINE assert NAME . ::: 3881
( ) NEWLINE NAME , NAME ::: 3881
NAME ) , STRING : NAME ::: 3881
) ) , ) NEWLINE EOS ::: 3877
True ) , ) , ] ::: 3870
NAME . NAME ) NEWLINE assert ::: 3870
NAME += NUMBER NEWLINE DEDENT NAME ::: 3869
INDENT NAME = NAME ( [ ::: 3868
= STRING ) , NAME = ::: 3862
( NAME ) ) NEWLINE if ::: 3859
NAME = NAME + STRING + ::: 3859
] for NAME in NAME ] ::: 3859
= STRING . NAME ( [ ::: 3853
NEWLINE if NAME [ STRING ] ::: 3850
[ NUMBER : ] ) NEWLINE ::: 3845
[ NUMBER ] : NEWLINE INDENT ::: 3842
. NAME | NAME . NAME ::: 3842
. NAME ( [ NAME ( ::: 3841
= None , NAME = False ::: 3841
. NAME ( ) + STRING ::: 3838
STRING ] = NAME [ STRING ::: 3833
NEWLINE with NAME ( NAME . ::: 3830
STRING NEWLINE NAME ( STRING ) ::: 3829
!= NAME . NAME : NEWLINE ::: 3829
NUMBER NEWLINE return NAME NEWLINE DEDENT ::: 3828
STRING NEWLINE if NAME == STRING ::: 3825
NAME . NAME | NAME . ::: 3824
= ( NAME . NAME , ::: 3824
STRING ] , NAME ) NEWLINE ::: 3823
( ) , NUMBER ) NEWLINE ::: 3820
( NAME . NAME ) > ::: 3818
NEWLINE NAME = NAME [ : ::: 3817
NUMBER ) NEWLINE DEDENT NAME = ::: 3816
. NAME ( ) if NAME ::: 3815
NEWLINE INDENT STRING NEWLINE assert NAME ::: 3815
NAME = True , ) , ::: 3815
NEWLINE INDENT if NAME is not ::: 3812
: NAME [ STRING ] , ::: 3811
if NAME > NAME : NEWLINE ::: 3810
return NUMBER NEWLINE DEDENT DEDENT EOS ::: 3807
. NAME , NAME ) : ::: 3807
INDENT return NAME ( ) NEWLINE ::: 3805
( STRING , NUMBER ) , ::: 3803
NUMBER ) NEWLINE DEDENT def NAME ::: 3802
( { STRING : STRING } ::: 3799
NAME . NAME ( lambda NAME ::: 3799
( STRING , NAME ) ) ::: 3799
, NAME , ) NEWLINE EOS ::: 3797
NAME , STRING ) . NAME ::: 3796
return None NEWLINE DEDENT NAME = ::: 3792
, None ) NEWLINE if NAME ::: 3791
NUMBER , NAME + NUMBER ) ::: 3791
STRING NEWLINE DEDENT return NAME NEWLINE ::: 3788
+ STRING ) NEWLINE DEDENT DEDENT ::: 3787
NEWLINE NAME = ( NAME , ::: 3787
NAME , NAME ) ) : ::: 3787
NAME [ NUMBER ] ) , ::: 3787
. NAME ) ) ) NEWLINE ::: 3786
STRING : None , STRING : ::: 3786
NEWLINE NAME += STRING NEWLINE NAME ::: 3784
NAME . NAME ( STRING in ::: 3783
= [ STRING , ] NEWLINE ::: 3781
( NUMBER ) ) NEWLINE DEDENT ::: 3781
NUMBER , NAME . NAME ( ::: 3780
NEWLINE DEDENT except ( NAME , ::: 3779
INDENT NAME = STRING NEWLINE for ::: 3779
[ NAME [ NUMBER ] ] ::: 3779
. NAME NEWLINE NAME ( NAME ::: 3779
( STRING STRING ) NEWLINE DEDENT ::: 3778
( NAME , NAME [ NAME ::: 3778
NAME ( NUMBER , NAME = ::: 3775
NAME [ NUMBER ] = NAME ::: 3774
STRING , None ) ) NEWLINE ::: 3772
elif NAME ( NAME , NAME ::: 3772
] NEWLINE if NAME ( NAME ::: 3772
NAME = NAME ( [ STRING ::: 3767
STRING , STRING ) , STRING ::: 3765
. NAME NEWLINE NAME [ STRING ::: 3764
if NAME [ NUMBER ] == ::: 3760
NEWLINE DEDENT DEDENT return NAME . ::: 3758
, STRING : False , STRING ::: 3754
STRING ] , NAME = True ::: 3754
( NAME ) NEWLINE NAME , ::: 3754
NAME = STRING + NAME + ::: 3753
NAME . NAME NEWLINE for NAME ::: 3753
, NAME = NAME NEWLINE NAME ::: 3753
) NEWLINE if NAME == NAME ::: 3751
[ NUMBER ] , NAME = ::: 3751
True ) , NAME = False ::: 3750
NAME >= NUMBER : NEWLINE INDENT ::: 3748
NUMBER ] ) NEWLINE NAME ( ::: 3747
>= NUMBER : NEWLINE INDENT NAME ::: 3747
. NAME ( STRING in NAME ::: 3747
. NAME ( STRING , False ::: 3746
NEWLINE DEDENT NAME . NAME [ ::: 3744
NEWLINE return ( NAME , NAME ::: 3742
NEWLINE if NAME . NAME [ ::: 3742
NEWLINE INDENT with NAME ( STRING ::: 3739
False , NAME = STRING ) ::: 3738
NAME ( ) NEWLINE DEDENT elif ::: 3735
DEDENT if NAME ( NAME , ::: 3735
NAME = STRING + NAME . ::: 3730
( ) NEWLINE assert NAME . ::: 3730
( NAME , NAME ( ) ::: 3730
= { } NEWLINE NAME [ ::: 3728
. NAME * NAME . NAME ::: 3727
) == NAME : NEWLINE INDENT ::: 3727
import NAME NEWLINE NAME ( ) ::: 3726
STRING , NUMBER : STRING , ::: 3725
NAME . NAME ( ) if ::: 3725
) , NAME ) ) NEWLINE ::: 3724
] = NAME NEWLINE DEDENT EOS ::: 3724
= STRING NEWLINE NAME = True ::: 3723
NAME = ( ( STRING , ::: 3722
NAME ) NEWLINE return True NEWLINE ::: 3720
import * NEWLINE NAME = STRING ::: 3720
) NEWLINE return { STRING : ::: 3718
= NAME + STRING + NAME ::: 3716
. NAME ( NAME = { ::: 3716
NUMBER NEWLINE DEDENT DEDENT return NAME ::: 3715
= NAME ( NAME , NUMBER ::: 3715
= NAME [ NAME . NAME ::: 3711
] ) NEWLINE DEDENT DEDENT DEDENT ::: 3707
NAME ( ) [ STRING ] ::: 3707
NUMBER ) NEWLINE return NAME NEWLINE ::: 3706
NAME . NAME * NAME . ::: 3704
import NAME NEWLINE STRING NEWLINE EOS ::: 3703
NAME . NAME = ( NAME ::: 3703
( ) NEWLINE if NAME is ::: 3701
NAME ( [ ( STRING , ::: 3701
( NAME ( NAME [ NUMBER ::: 3700
NAME , NAME , NUMBER ) ::: 3700
) , NAME . NAME , ::: 3698
NEWLINE assert NAME [ STRING ] ::: 3697
NEWLINE raise NAME ( STRING ) ::: 3694
: { STRING : STRING } ::: 3694
] : NEWLINE INDENT if NAME ::: 3691
, STRING , ] NEWLINE NAME ::: 3691
NAME = True ) ) , ::: 3691
: NEWLINE INDENT if NAME < ::: 3690
= [ STRING ] NEWLINE DEDENT ::: 3687
] : NEWLINE INDENT NAME ( ::: 3686
( NAME , NAME , NUMBER ::: 3684
STRING NEWLINE NAME = STRING . ::: 3683
NEWLINE INDENT STRING NEWLINE return [ ::: 3683
) NEWLINE DEDENT elif NAME ( ::: 3683
NUMBER ) NEWLINE DEDENT NAME . ::: 3681
return NAME NEWLINE DEDENT DEDENT return ::: 3679
) NEWLINE if NAME in NAME ::: 3679
in [ STRING , STRING , ::: 3677
NAME . NAME ) > NUMBER ::: 3676
NAME ( STRING ) == STRING ::: 3676
. NAME ( [ NAME ] ::: 3673
NAME import NAME NEWLINE from ... ::: 3671
, NAME . NAME = NAME ::: 3669
NAME ( NAME - NAME ) ::: 3668
) : NEWLINE INDENT return NUMBER ::: 3668
( ) ) NEWLINE DEDENT NAME ::: 3667
( ) , NAME = [ ::: 3666
] , STRING : NAME [ ::: 3666
NUMBER NEWLINE DEDENT NAME . NAME ::: 3665
) ) NEWLINE if NAME . ::: 3665
NAME = STRING NEWLINE return NAME ::: 3665
import NAME NEWLINE from ... NAME ::: 3665
NAME , NAME : NAME ) ::: 3661
, NAME ) , NAME = ::: 3661
[ NUMBER , NUMBER ] ) ::: 3657
+ STRING ) NEWLINE NAME = ::: 3657
NEWLINE INDENT return NAME [ NUMBER ::: 3652
] [ STRING ] [ STRING ::: 3651
. NAME import NAME NEWLINE return ::: 3650
NAME ( STRING , False ) ::: 3647
INDENT STRING NEWLINE from NAME . ::: 3647
STRING ] [ STRING ] [ ::: 3641
. NAME = NAME [ NUMBER ::: 3640
NAME [ NUMBER ] [ STRING ::: 3640
[ NUMBER ] , NAME ) ::: 3639
NAME , ) NEWLINE NAME = ::: 3639
} NEWLINE for NAME , NAME ::: 3639
DEDENT DEDENT return None NEWLINE DEDENT ::: 3638
= NUMBER , NAME = False ::: 3638
STRING ] [ STRING ] = ::: 3637
False NEWLINE DEDENT return True NEWLINE ::: 3634
return False NEWLINE DEDENT return True ::: 3634
, NAME , NAME ( NAME ::: 3633
: NEWLINE INDENT if NAME % ::: 3632
== NAME . NAME NEWLINE DEDENT ::: 3632
, NAME , * NAME ) ::: 3632
NAME ( NUMBER , NAME + ::: 3630
] , STRING ) NEWLINE DEDENT ::: 3629
DEDENT elif NAME . NAME ( ::: 3629
NEWLINE INDENT from . NAME import ::: 3628
= STRING NEWLINE DEDENT NAME = ::: 3627
STRING ) NEWLINE NAME , NAME ::: 3624
STRING NEWLINE raise NAME NEWLINE DEDENT ::: 3621
( ) , STRING : NAME ::: 3619
NAME NEWLINE NAME = { } ::: 3618
= ( NAME , NAME ) ::: 3617
NEWLINE NAME . NAME ( True ::: 3616
INDENT STRING NEWLINE raise NAME NEWLINE ::: 3616
, NAME . NAME [ NAME ::: 3612
STRING , STRING , None ) ::: 3611
NAME [ STRING ] ) , ::: 3611
STRING ) NEWLINE if NAME == ::: 3609
= STRING + NAME + STRING ::: 3608
, STRING ) NEWLINE from NAME ::: 3607
NAME ) NEWLINE NAME ( ) ::: 3604
, NAME = NUMBER ) ) ::: 3602
NAME , ) NEWLINE from NAME ::: 3600
) NEWLINE return NUMBER NEWLINE DEDENT ::: 3597
NAME , NAME ( NAME , ::: 3596
NEWLINE for NAME , NAME , ::: 3595
= NAME ( NAME ) ) ::: 3594
NEWLINE INDENT if NAME [ NUMBER ::: 3593
. NAME . NAME = NUMBER ::: 3593
True , NAME = NAME . ::: 3592
STRING NEWLINE NAME ( NAME ) ::: 3591
[ NAME ] NEWLINE DEDENT except ::: 3591
. NAME ) , ( STRING ::: 3590
NEWLINE if NAME . NAME != ::: 3587
NEWLINE if NAME == NAME : ::: 3586
NEWLINE DEDENT NAME += NUMBER NEWLINE ::: 3585
NAME = NAME ( ( NAME ::: 3585
NUMBER ) NEWLINE DEDENT return NAME ::: 3584
NAME , NAME , NAME ( ::: 3583
) . NAME NEWLINE NAME = ::: 3582
NAME NEWLINE NAME = NAME [ ::: 3580
NAME = NAME , ** NAME ::: 3576
NAME += NAME ( NAME ) ::: 3575
[ NAME ] NEWLINE DEDENT else ::: 3574
* NEWLINE NAME = STRING NEWLINE ::: 3574
NUMBER ) : NEWLINE INDENT for ::: 3571
INDENT NAME = NAME + STRING ::: 3570
, ) ) NEWLINE NAME . ::: 3570
= NAME [ NUMBER ] . ::: 3566
STRING , STRING , NAME , ::: 3566
STRING NEWLINE NAME += STRING NEWLINE ::: 3565
NUMBER ] NEWLINE DEDENT else : ::: 3565
NAME : NAME , NAME : ::: 3564
[ NAME ] NEWLINE DEDENT return ::: 3564
INDENT if NAME is not None ::: 3558
NAME . NAME ( None ) ::: 3556
: NEWLINE INDENT NAME ( NUMBER ::: 3555
( NAME ) NEWLINE NAME += ::: 3554
) + STRING ) NEWLINE DEDENT ::: 3553
( STRING , NUMBER ) ) ::: 3553
NAME ( NAME ) < NUMBER ::: 3553
] = NAME ( NAME ) ::: 3552
. NAME . NAME , NUMBER ::: 3552
( STRING % ( NAME ) ::: 3551
in NAME . NAME ] NEWLINE ::: 3550
NUMBER ) NEWLINE NAME = STRING ::: 3546
NAME } NEWLINE NAME = NAME ::: 3545
NAME ) -> NAME : NEWLINE ::: 3544
( NAME = STRING ) ) ::: 3542
, STRING , ) NEWLINE NAME ::: 3541
. NAME NEWLINE DEDENT if NAME ::: 3540
STRING , NAME , STRING ) ::: 3540
NEWLINE DEDENT NAME = NUMBER NEWLINE ::: 3540
NAME [ NAME ] ) ) ::: 3539
NEWLINE if NAME < NUMBER : ::: 3539
NAME , NUMBER , NUMBER ) ::: 3538
NAME + STRING + NAME ( ::: 3537
, STRING : NAME [ STRING ::: 3535
NAME * NAME . NAME ( ::: 3534
NEWLINE if NAME > NUMBER : ::: 3534
NAME ] NEWLINE DEDENT except NAME ::: 3533
. NAME ] ) NEWLINE DEDENT ::: 3533
) , NAME = NAME , ::: 3531
, NAME ) NEWLINE if not ::: 3530
, STRING ) ) ) NEWLINE ::: 3530
) ) NEWLINE DEDENT NAME ( ::: 3528
NAME ( ) ) . NAME ::: 3527
; NEWLINE NAME . NAME ( ::: 3526
lambda NAME : NAME ( NAME ::: 3525
NAME . NAME . NAME + ::: 3524
STRING ) ( NAME = True ::: 3523
: NAME , NAME : NAME ::: 3519
, NAME ] ) NEWLINE DEDENT ::: 3518
. NAME NEWLINE for NAME in ::: 3517
STRING } , STRING : { ::: 3516
INDENT STRING NEWLINE @ NAME NEWLINE ::: 3514
NAME = [ { STRING : ::: 3510
True ) NEWLINE def NAME ( ::: 3510
NAME , STRING ) NEWLINE return ::: 3509
** NAME ) NEWLINE NAME = ::: 3509
INDENT STRING NEWLINE with NAME ( ::: 3509
** NAME ) NEWLINE DEDENT return ::: 3506
] , STRING : [ ] ::: 3505
, NAME NEWLINE import NAME , ::: 3504
NEWLINE return STRING % ( NAME ::: 3502
NAME = NAME [ NAME . ::: 3502
= NAME . NAME + STRING ::: 3501
NUMBER ] ) ) NEWLINE NAME ::: 3501
True NEWLINE NAME = True NEWLINE ::: 3499
= True NEWLINE NAME = True ::: 3498
NAME , STRING ) NEWLINE EOS ::: 3497
== NUMBER NEWLINE assert NAME . ::: 3496
= None NEWLINE NAME = NAME ::: 3496
, NAME = [ ] ) ::: 3495
, NUMBER , NAME . NAME ::: 3495
NEWLINE INDENT NAME ( NAME [ ::: 3494
= NAME NEWLINE DEDENT DEDENT return ::: 3492
= NAME . NAME ) : ::: 3492
STRING % ( NAME ) ) ::: 3492
in NAME ] NEWLINE NAME = ::: 3491
NAME ( STRING , ( NAME ::: 3490
try : NEWLINE INDENT if NAME ::: 3490
{ } NEWLINE NAME [ STRING ::: 3488
else : NEWLINE INDENT NAME += ::: 3488
, STRING ) NEWLINE DEDENT NAME ::: 3487
INDENT return STRING NEWLINE DEDENT elif ::: 3487
NUMBER ] NEWLINE NAME = [ ::: 3486
return True NEWLINE DEDENT DEDENT return ::: 3485
INDENT return False NEWLINE DEDENT if ::: 3481
NAME ) for NAME , NAME ::: 3481
return None NEWLINE DEDENT return NAME ::: 3481
. NAME or NAME . NAME ::: 3480
NAME NEWLINE STRING NEWLINE NAME = ::: 3480
NAME [ STRING ] == NAME ::: 3479
STRING + NAME . NAME . ::: 3477
. NAME != NAME . NAME ::: 3477
( NUMBER ) , NAME = ::: 3472
) NEWLINE NAME = False NEWLINE ::: 3471
NAME ] for NAME in NAME ::: 3469
. NAME ( ) ] ) ::: 3467
INDENT NAME += STRING NEWLINE DEDENT ::: 3466
NAME . NAME [ - NUMBER ::: 3465
INDENT NAME ( NAME , STRING ::: 3462
NAME = NAME ( ) ) ::: 3462
NUMBER ) NEWLINE def NAME ( ::: 3459
INDENT NAME = True NEWLINE NAME ::: 3458
NEWLINE DEDENT DEDENT return True NEWLINE ::: 3458
] , NAME = True ) ::: 3456
NEWLINE INDENT STRING NEWLINE import NAME ::: 3454
( NAME , NAME [ STRING ::: 3454
= True ) NEWLINE def NAME ::: 3454
: NEWLINE INDENT STRING NEWLINE import ::: 3454
= NAME ( NAME [ NAME ::: 3454
NAME = True ) NEWLINE def ::: 3454
) == NUMBER NEWLINE assert NAME ::: 3453
NAME . NAME or NAME . ::: 3453
return STRING % ( NAME , ::: 3450
) , ) , NAME . ::: 3449
NUMBER ] NEWLINE DEDENT DEDENT EOS ::: 3449
NAME = STRING , ) , ::: 3448
% ( NAME ) ) NEWLINE ::: 3447
, STRING , NAME , STRING ::: 3446
NUMBER , STRING ) NEWLINE DEDENT ::: 3446
( NAME , NAME = [ ::: 3445
, NAME = [ NAME . ::: 3444
NAME != None : NEWLINE INDENT ::: 3443
NAME = NAME ( * NAME ::: 3443
, NAME = False , ) ::: 3442
NAME ( ) == STRING : ::: 3441
NEWLINE while NAME : NEWLINE INDENT ::: 3441
NAME == NAME . NAME . ::: 3440
( STRING , STRING ) : ::: 3440
( NAME + STRING + NAME ::: 3440
= STRING NEWLINE DEDENT def NAME ::: 3436
STRING } ) NEWLINE NAME . ::: 3436
if NAME . NAME and NAME ::: 3435
except ( NAME , NAME ) ::: 3433
NAME ) NEWLINE from . NAME ::: 3429
[ NAME ( NAME . NAME ::: 3427
. NAME NEWLINE NAME = [ ::: 3427
except NAME . NAME as NAME ::: 3426
, STRING ) , NAME = ::: 3425
STRING ] [ STRING ] ) ::: 3425
% NAME . NAME NEWLINE DEDENT ::: 3423
[ NUMBER ] NEWLINE return NAME ::: 3422
( NAME [ NUMBER ] . ::: 3422
DEDENT except NAME . NAME as ::: 3421
( NAME , STRING , { ::: 3420
NAME += NUMBER NEWLINE DEDENT return ::: 3420
( NAME , NAME ( STRING ::: 3418
[ NAME ] NEWLINE if NAME ::: 3417
( NAME , STRING , None ::: 3415
STRING , STRING ) NEWLINE if ::: 3414
if NAME % NUMBER == NUMBER ::: 3412
NEWLINE if NAME in NAME . ::: 3411
NAME , None ) NEWLINE DEDENT ::: 3410
] ) NEWLINE for NAME in ::: 3408
, NUMBER : STRING , NUMBER ::: 3407
, { STRING : NAME . ::: 3406
STRING ) , NAME ) NEWLINE ::: 3404
( [ NAME , NAME ] ::: 3401
NAME , NAME as NAME NEWLINE ::: 3400
NAME [ NAME ] NEWLINE if ::: 3399
( NAME ) ] NEWLINE DEDENT ::: 3398
STRING not in NAME : NEWLINE ::: 3398
INDENT return None NEWLINE DEDENT return ::: 3397
INDENT return NAME ( STRING ) ::: 3396
: NEWLINE INDENT ( NAME , ::: 3393
NAME ( NAME + STRING + ::: 3392
NEWLINE INDENT NAME [ NAME . ::: 3391
NAME for NAME , NAME in ::: 3391
INDENT NAME [ NAME . NAME ::: 3391
( [ STRING ] ) NEWLINE ::: 3391
NAME ( NAME . NAME == ::: 3391
NAME . NAME != NAME . ::: 3390
, STRING , None ) ) ::: 3389
= NAME , ** NAME ) ::: 3389
( ) NEWLINE DEDENT elif NAME ::: 3389
NEWLINE DEDENT elif NAME == NUMBER ::: 3388
INDENT if NAME [ NUMBER ] ::: 3386
) NEWLINE DEDENT except ( NAME ::: 3385
NEWLINE STRING NEWLINE NAME = [ ::: 3385
= None NEWLINE DEDENT def NAME ::: 3383
: STRING , } NEWLINE NAME ::: 3383
( NUMBER , NAME + NUMBER ::: 3380
NAME = None NEWLINE DEDENT def ::: 3378
None NEWLINE NAME . NAME ( ::: 3378
. NAME ( NAME , { ::: 3376
return NAME ( * NAME , ::: 3376
STRING : NEWLINE INDENT return STRING ::: 3376
: STRING } ) NEWLINE DEDENT ::: 3375
, NAME ( NAME ( NAME ::: 3375
( NAME = NAME ( STRING ::: 3375
, NAME = { } ) ::: 3374
[ NAME , NAME ] NEWLINE ::: 3374
) NEWLINE DEDENT NAME = [ ::: 3373
= NAME ( STRING , [ ::: 3373
NEWLINE INDENT break NEWLINE DEDENT NAME ::: 3373
STRING ) , NAME = True ::: 3370
NAME ( NAME + STRING , ::: 3369
( ) == STRING : NEWLINE ::: 3366
NUMBER ) : NEWLINE INDENT return ::: 3366
NEWLINE NAME = - NUMBER NEWLINE ::: 3366
NEWLINE return NAME NEWLINE DEDENT def ::: 3366
, STRING , ] NEWLINE EOS ::: 3364
INDENT NAME . NAME ( { ::: 3364
DEDENT if not NAME : NEWLINE ::: 3364
NEWLINE ( NAME , NAME ) ::: 3364
import NAME NEWLINE NAME = True ::: 3363
[ STRING ] == STRING : ::: 3361
) NEWLINE return STRING . NAME ::: 3360
: NAME } ) NEWLINE NAME ::: 3359
] == NAME : NEWLINE INDENT ::: 3358
True NEWLINE DEDENT DEDENT return False ::: 3357
NAME = STRING NEWLINE DEDENT def ::: 3357
, NAME = ( STRING , ::: 3356
, NUMBER , NUMBER , NAME ::: 3355
NAME += STRING NEWLINE NAME += ::: 3355
( ) NEWLINE DEDENT except : ::: 3354
NEWLINE DEDENT NAME , NAME = ::: 3353
NAME ( NAME ) - NAME ::: 3353
= { STRING : NAME ( ::: 3352
NUMBER ) , NAME = True ::: 3351
NUMBER : NEWLINE INDENT if NAME ::: 3351
) : NEWLINE INDENT return None ::: 3347
. NAME = [ STRING , ::: 3346
( NAME = STRING ) : ::: 3341
NAME ( NAME ) if NAME ::: 3340
def NAME ( NAME = NUMBER ::: 3339
= { } NEWLINE DEDENT EOS ::: 3338
: NAME , STRING : STRING ::: 3337
NEWLINE NAME = NAME + NUMBER ::: 3335
% NAME ) NEWLINE DEDENT NAME ::: 3335
STRING NEWLINE NAME = [ ( ::: 3335
- NUMBER ] NEWLINE NAME = ::: 3332
from NAME import NAME NEWLINE try ::: 3332
[ STRING ] ) , NAME ::: 3332
STRING ] == STRING : NEWLINE ::: 3331
, NAME ) , NAME ( ::: 3330
NAME = NUMBER NEWLINE if NAME ::: 3330
( NAME ( NUMBER ) , ::: 3330
) NEWLINE assert NAME == NAME ::: 3329
( True ) NEWLINE NAME . ::: 3328
INDENT NAME += NAME NEWLINE DEDENT ::: 3326
] , NAME ) NEWLINE NAME ::: 3325
elif NAME == NUMBER : NEWLINE ::: 3324
, None ) NEWLINE DEDENT EOS ::: 3324
NAME + STRING + NAME NEWLINE ::: 3324
NEWLINE NAME . NAME += NUMBER ::: 3323
= NAME ( STRING , ( ::: 3322
False , NAME = False ) ::: 3322
DEDENT elif NAME == NUMBER : ::: 3321
STRING , NUMBER ) ) NEWLINE ::: 3321
{ STRING : STRING , } ::: 3320
NEWLINE if STRING in NAME . ::: 3319
STRING NEWLINE DEDENT NAME . NAME ::: 3315
) NEWLINE DEDENT DEDENT NAME ( ::: 3314
STRING , ] , STRING : ::: 3312
NAME NEWLINE def NAME ( ) ::: 3308
NEWLINE INDENT if ( NAME . ::: 3307
NEWLINE INDENT NAME = [ NUMBER ::: 3307
NUMBER ) ) NEWLINE NAME ( ::: 3307
INDENT if ( NAME . NAME ::: 3307
( { STRING : NAME } ::: 3305
NAME ) NEWLINE DEDENT @ NAME ::: 3301
, NAME ) ) ) NEWLINE ::: 3297
NAME . NAME NEWLINE DEDENT elif ::: 3295
% NAME . NAME ( ) ::: 3295
NAME [ NAME [ NUMBER ] ::: 3294
. NAME + STRING ) NEWLINE ::: 3293
return STRING NEWLINE DEDENT def NAME ::: 3293
NEWLINE NAME = NAME ( ( ::: 3293
NAME . NAME ( ) } ::: 3293
NUMBER ) . NAME ( ) ::: 3292
[ ] ) : NEWLINE INDENT ::: 3292
NEWLINE INDENT ( NAME , NAME ::: 3292
= NAME NEWLINE DEDENT DEDENT DEDENT ::: 3291
STRING ] = NUMBER NEWLINE NAME ::: 3290
if NAME == None : NEWLINE ::: 3288
[ STRING ] = True NEWLINE ::: 3288
. NAME ) ) : NEWLINE ::: 3287
( NAME . NAME , ) ::: 3286
, ) NEWLINE from NAME . ::: 3284
NEWLINE INDENT pass NEWLINE DEDENT EOS ::: 3283
with NAME . NAME ( STRING ::: 3282
, NAME NEWLINE from . import ::: 3281
NAME [ STRING ] [ NAME ::: 3281
[ STRING ] NEWLINE return NAME ::: 3280
. NAME [ - NUMBER ] ::: 3279
, NAME = lambda NAME : ::: 3278
( NAME . NAME + NAME ::: 3278
INDENT pass NEWLINE DEDENT DEDENT DEDENT ::: 3278
NAME . NAME , } NEWLINE ::: 3276
NAME . NAME ) ) : ::: 3276
NEWLINE pass NEWLINE DEDENT DEDENT EOS ::: 3275
= [ ] NEWLINE if NAME ::: 3274
( ) : NEWLINE INDENT assert ::: 3272
NAME NEWLINE DEDENT if NAME . ::: 3271
, { STRING : NAME , ::: 3268
. NAME [ NUMBER ] == ::: 3266
= NUMBER , NAME = None ::: 3265
INDENT return NAME ( NAME = ::: 3265
True : NEWLINE INDENT NAME . ::: 3265
NUMBER : NEWLINE INDENT return False ::: 3264
NEWLINE DEDENT NAME = NAME NEWLINE ::: 3264
= STRING ) . NAME ( ::: 3263
NAME is not None and NAME ::: 3261
NAME ) NEWLINE with NAME . ::: 3260
NEWLINE return NAME , NAME , ::: 3259
: NAME } NEWLINE NAME = ::: 3259
[ NAME ] NEWLINE DEDENT NAME ::: 3259
STRING , NAME = None ) ::: 3258
STRING ] , STRING : STRING ::: 3255
NEWLINE if ( NAME . NAME ::: 3254
DEDENT NAME , NAME = NAME ::: 3254
STRING ) ) NEWLINE return NAME ::: 3254
= False , NAME = NAME ::: 3252
. NAME ( ) NEWLINE from ::: 3252
NEWLINE DEDENT return STRING . NAME ::: 3250
NAME = NUMBER ) , ) ::: 3250
NEWLINE NAME = ( STRING STRING ::: 3250
NEWLINE def NAME ( NAME : ::: 3249
NUMBER ] ) : NEWLINE INDENT ::: 3248
STRING NEWLINE from NAME import * ::: 3247
True , NAME = False ) ::: 3245
None : NEWLINE INDENT NAME ( ::: 3245
NAME . NAME ( [ ] ::: 3244
NAME != NAME . NAME : ::: 3242
) ) ) NEWLINE NAME ( ::: 3242
) NEWLINE return None NEWLINE DEDENT ::: 3241
, NAME = NAME , ) ::: 3240
( ) : NEWLINE INDENT import ::: 3239
def NAME ( NAME : NAME ::: 3239
= NAME ) NEWLINE DEDENT except ::: 3238
. NAME ( ) NEWLINE with ::: 3238
( ( NAME . NAME , ::: 3236
NAME , NAME ) ) ) ::: 3236
= [ STRING , ] , ::: 3236
. NAME ( ) as NAME ::: 3235
in NAME ] NEWLINE DEDENT EOS ::: 3232
] NEWLINE try : NEWLINE INDENT ::: 3232
NAME ( [ NAME ] ) ::: 3229
= False NEWLINE NAME = NAME ::: 3229
, NAME . NAME , NUMBER ::: 3229
= None , NAME = NUMBER ::: 3229
[ NAME ] ) ) NEWLINE ::: 3228
return STRING % NAME . NAME ::: 3227
: NAME } NEWLINE DEDENT EOS ::: 3226
NUMBER ) NEWLINE NAME = NUMBER ::: 3226
( NAME . NAME , [ ::: 3225
: NEWLINE INDENT @ NAME . ::: 3225
NEWLINE INDENT @ NAME . NAME ::: 3225
BOS NEWLINE NAME = [ STRING ::: 3223
NAME . NAME } NEWLINE DEDENT ::: 3222
True , NAME = False , ::: 3222
: NEWLINE INDENT del NAME . ::: 3221
NEWLINE INDENT del NAME . NAME ::: 3221
DEDENT NAME += NUMBER NEWLINE DEDENT ::: 3220
( [ NAME ( NAME ) ::: 3217
NAME ( NUMBER ) . NAME ::: 3217
( STRING , STRING , ) ::: 3217
NAME ( NAME + NUMBER ) ::: 3217
} , { STRING : STRING ::: 3216
[ ( STRING , NAME . ::: 3213
NAME , NAME = { } ::: 3213
NAME and NAME . NAME . ::: 3212
. NAME ( NAME [ : ::: 3210
. NAME ( None ) NEWLINE ::: 3210
NAME = ( STRING STRING ) ::: 3209
NAME = STRING NEWLINE DEDENT return ::: 3208
STRING % NAME NEWLINE NAME = ::: 3206
) NEWLINE NAME = STRING + ::: 3205
= ( NAME . NAME ( ::: 3204
STRING : STRING } NEWLINE DEDENT ::: 3203
INDENT return NAME [ NUMBER ] ::: 3203
return False NEWLINE DEDENT DEDENT return ::: 3201
( NAME , NAME ) ] ::: 3199
return STRING NEWLINE DEDENT else : ::: 3199
DEDENT return NAME ( NAME . ::: 3198
( NAME , NUMBER , NAME ::: 3197
. NAME : NEWLINE INDENT for ::: 3197
NEWLINE DEDENT NAME [ NAME ] ::: 3197
[ NUMBER ] for NAME in ::: 3196
NAME , NAME = [ ] ::: 3195
. NAME ) NEWLINE assert NAME ::: 3195
NAME ) == NAME ( NAME ::: 3195
) NEWLINE DEDENT if NAME == ::: 3191
( NAME ) + STRING NEWLINE ::: 3191
( ) NEWLINE DEDENT NAME ( ::: 3190
( NAME ) , STRING , ::: 3190
] ) NEWLINE NAME ( STRING ::: 3189
= STRING , NAME = ( ::: 3189
DEDENT NAME = [ ] NEWLINE ::: 3189
, NAME + NUMBER ) : ::: 3187
NAME ( False ) NEWLINE NAME ::: 3187
NAME [ NUMBER ] : NEWLINE ::: 3187
DEDENT NAME . NAME ( NUMBER ::: 3185
STRING ) ] NEWLINE NAME = ::: 3184
= True ) NEWLINE DEDENT DEDENT ::: 3184
[ STRING ] , ) NEWLINE ::: 3183
NAME , NAME ) NEWLINE for ::: 3183
( NAME = STRING ) , ::: 3182
import NAME , NAME NEWLINE DEDENT ::: 3179
( NUMBER , STRING ) , ::: 3178
NEWLINE @ NAME . NAME NEWLINE ::: 3177
NAME [ - NUMBER ] NEWLINE ::: 3177
NAME ] , NAME = NAME ::: 3177
STRING , NAME = None , ::: 3172
) , } NEWLINE DEDENT EOS ::: 3171
NEWLINE import NAME NEWLINE STRING NEWLINE ::: 3168
NAME NEWLINE NAME ( STRING , ::: 3167
NEWLINE return NAME NEWLINE DEDENT return ::: 3165
( NAME , NUMBER , NUMBER ::: 3164
- NUMBER : NEWLINE INDENT NAME ::: 3163
None ) : NEWLINE INDENT return ::: 3161
NEWLINE assert not NAME . NAME ::: 3156
DEDENT DEDENT except : NEWLINE INDENT ::: 3155
if NAME ( NAME ) < ::: 3155
INDENT with NAME ( NAME . ::: 3152
) , STRING , STRING ) ::: 3151
: STRING , STRING : { ::: 3150
NEWLINE DEDENT from NAME import NAME ::: 3150
STRING NEWLINE assert NAME ( NAME ::: 3150
NEWLINE with NAME ( STRING ) ::: 3150
NEWLINE global NAME NEWLINE NAME = ::: 3149
== NUMBER ) : NEWLINE INDENT ::: 3147
STRING : NAME ( STRING ) ::: 3147
NAME NEWLINE DEDENT elif NAME == ::: 3146
. NAME NEWLINE DEDENT elif NAME ::: 3146
) ) NEWLINE DEDENT if NAME ::: 3145
( NAME ( NAME ) - ::: 3144
STRING , ] , ) NEWLINE ::: 3143
NAME . NAME ) ] NEWLINE ::: 3143
) . NAME ( NAME ( ::: 3143
( ) ) . NAME ( ::: 3142
STRING : NUMBER } NEWLINE NAME ::: 3141
. NAME . NAME == STRING ::: 3140
, NAME , NAME ] NEWLINE ::: 3140
] NEWLINE NAME ( NAME , ::: 3138
INDENT if NAME . NAME [ ::: 3136
= NUMBER ) , ) , ::: 3136
, ] , ) NEWLINE EOS ::: 3135
None ) NEWLINE DEDENT DEDENT EOS ::: 3132
, } NEWLINE NAME = NAME ::: 3131
( NAME ) == NUMBER NEWLINE ::: 3129
( NAME = NAME ( ) ::: 3128
( NAME [ NUMBER : ] ::: 3125
} NEWLINE return NAME NEWLINE DEDENT ::: 3124
INDENT NAME . NAME += NUMBER ::: 3124
NAME == STRING NEWLINE assert NAME ::: 3123
DEDENT from NAME . NAME import ::: 3122
. NAME ( ) + NAME ::: 3122
) + NAME . NAME ( ::: 3117
NUMBER ] NEWLINE for NAME in ::: 3114
DEDENT if NAME . NAME . ::: 3114
] NEWLINE DEDENT DEDENT return NAME ::: 3114
, NAME , NAME , * ::: 3113
. NAME , NAME = False ::: 3112
] NEWLINE if NAME : NEWLINE ::: 3111
] ) for NAME in NAME ::: 3109
NAME = NAME ( NAME + ::: 3109
return NAME . NAME [ STRING ::: 3108
( NAME ( ) , NAME ::: 3107
for NAME in [ STRING , ::: 3104
( ) ) NEWLINE if NAME ::: 3103
True , NAME = NUMBER ) ::: 3100
, NAME ( ) , NAME ::: 3100
, None ) NEWLINE NAME = ::: 3100
return STRING NEWLINE DEDENT elif NAME ::: 3098
NAME . NAME ( ) as ::: 3097
% NAME ( NAME ) ) ::: 3097
( NAME ( NAME = NAME ::: 3096
NUMBER ) ) NEWLINE DEDENT DEDENT ::: 3094
: NEWLINE INDENT @ NAME ( ::: 3092
STRING ) ) ) NEWLINE DEDENT ::: 3090
NAME = ( NAME , ) ::: 3090
( STRING , NAME [ STRING ::: 3088
INDENT STRING NEWLINE NAME = None ::: 3088
= NAME NEWLINE NAME = NUMBER ::: 3087
NAME = STRING NEWLINE try : ::: 3087
NEWLINE DEDENT if STRING in NAME ::: 3086
NEWLINE raise NAME ( ) NEWLINE ::: 3085
[ STRING ] ) NEWLINE return ::: 3082
NAME = NAME NEWLINE for NAME ::: 3080
( NAME ( NAME ) + ::: 3079
[ ] NEWLINE DEDENT DEDENT EOS ::: 3078
( NAME , { STRING : ::: 3077
( NAME , STRING ) . ::: 3075
[ NUMBER ] ) , NAME ::: 3075
NEWLINE DEDENT DEDENT return None NEWLINE ::: 3074
STRING ) NEWLINE if NAME ( ::: 3073
INDENT if NAME == NAME : ::: 3073
as NAME NEWLINE NAME = [ ::: 3072
+= NUMBER NEWLINE DEDENT return NAME ::: 3070
STRING NEWLINE NAME = ( NAME ::: 3069
NAME = False NEWLINE DEDENT DEDENT ::: 3069
@ NAME ( NAME ) NEWLINE ::: 3068
in NAME : NEWLINE INDENT try ::: 3068
if NAME != STRING : NEWLINE ::: 3068
None NEWLINE def NAME ( NAME ::: 3068
NEWLINE INDENT NAME = NAME * ::: 3068
NAME ( NAME - NUMBER ) ::: 3067
return False NEWLINE DEDENT NAME = ::: 3066
NAME = True ) NEWLINE EOS ::: 3066
= NUMBER NEWLINE while NAME < ::: 3065
NAME ) NEWLINE DEDENT DEDENT else ::: 3064
import NAME NEWLINE for NAME in ::: 3064
+ STRING ) NEWLINE DEDENT EOS ::: 3061
NEWLINE INDENT STRING NEWLINE return ( ::: 3060
{ } ) : NEWLINE INDENT ::: 3058
. NAME ( STRING ) + ::: 3055
NAME = NUMBER NEWLINE DEDENT NAME ::: 3054
( NAME ) NEWLINE with NAME ::: 3053
NAME ) , NAME , NAME ::: 3051
NAME NEWLINE DEDENT NAME ( NAME ::: 3051
( * NAME ) NEWLINE DEDENT ::: 3050
+ STRING + NAME ) NEWLINE ::: 3050
, NAME ) , NAME ) ::: 3049
INDENT NAME = NAME [ : ::: 3049
True NEWLINE DEDENT except NAME : ::: 3048
= None NEWLINE def NAME ( ::: 3048
STRING , STRING ) NEWLINE for ::: 3047
NAME = None NEWLINE def NAME ::: 3043
, STRING ] NEWLINE DEDENT EOS ::: 3042
NAME = STRING + NAME ( ::: 3042
: NEWLINE INDENT if NAME > ::: 3041
NAME = NAME , ) NEWLINE ::: 3038
NAME = { } NEWLINE EOS ::: 3038
NAME = NUMBER ) ) , ::: 3033
from . import NAME , NAME ::: 3033
NAME ( NAME ) NEWLINE with ::: 3032
= [ NAME ] NEWLINE DEDENT ::: 3031
if NAME . NAME != NAME ::: 3029
NUMBER ] , STRING ) NEWLINE ::: 3029
INDENT NAME = None NEWLINE NAME ::: 3029
INDENT return STRING NEWLINE DEDENT else ::: 3029
STRING , NAME ) , NAME ::: 3029
INDENT raise NAME ( NAME ) ::: 3024
= True , ) , ] ::: 3022
== STRING ) : NEWLINE INDENT ::: 3021
True , ) , ] NEWLINE ::: 3021
) ) NEWLINE NAME = NUMBER ::: 3018
NEWLINE NAME = lambda NAME : ::: 3017
in [ STRING , STRING ] ::: 3017
( STRING , STRING , { ::: 3014
NAME + NAME . NAME NEWLINE ::: 3014
] NEWLINE NAME ( NAME ) ::: 3013
( { STRING : NAME , ::: 3012
INDENT from NAME import NAME , ::: 3011
= NAME + NAME NEWLINE NAME ::: 3011
= [ NUMBER , NUMBER ] ::: 3010
with NAME . NAME . NAME ::: 3008
( STRING , NAME ( ) ::: 3007
NAME [ STRING ] = True ::: 3007
NAME ( STRING , { } ::: 3006
NAME ) NEWLINE NAME += NAME ::: 3005
NAME ( NAME , { STRING ::: 3004
NAME ( NAME ) / NAME ::: 3001
NAME == NAME NEWLINE DEDENT EOS ::: 3001
- NAME . NAME ( NAME ::: 3000
NAME [ : , NUMBER ] ::: 3000
NAME ) NEWLINE if NAME != ::: 3000
= [ NAME , NAME , ::: 2999
STRING ] ) ) NEWLINE NAME ::: 2998
. NAME ( ) NEWLINE def ::: 2998
NUMBER , STRING : STRING , ::: 2998
STRING , STRING ) ] ) ::: 2996
STRING ) NEWLINE with NAME ( ::: 2995
+ NAME . NAME NEWLINE DEDENT ::: 2993
== None : NEWLINE INDENT NAME ::: 2992
NAME ( NAME ) != NUMBER ::: 2991
STRING ] ) NEWLINE return NAME ::: 2990
NEWLINE pass NEWLINE DEDENT def NAME ::: 2989
NAME : NEWLINE INDENT return NUMBER ::: 2987
= NAME [ NUMBER : ] ::: 2983
( ) . NAME . NAME ::: 2982
. NAME ] = NAME NEWLINE ::: 2982
NAME , STRING ) NEWLINE if ::: 2981
NAME ( ) . NAME . ::: 2980
[ : : - NUMBER ] ::: 2979
{ } NEWLINE for NAME , ::: 2978
( STRING ) NEWLINE return NEWLINE ::: 2977
, True ) NEWLINE NAME . ::: 2977
pass NEWLINE DEDENT else : NEWLINE ::: 2974
) ) NEWLINE import NAME NEWLINE ::: 2974
STRING ] = STRING NEWLINE DEDENT ::: 2974
INDENT STRING NEWLINE with NAME . ::: 2973
NAME , STRING , { STRING ::: 2973
( ) , NAME ( ) ::: 2972
[ NAME ( NAME ) ] ::: 2971
= STRING NEWLINE try : NEWLINE ::: 2971
= NUMBER NEWLINE DEDENT DEDENT EOS ::: 2971
( NUMBER , NUMBER , NAME ::: 2970
NAME ( NAME + NAME ) ::: 2970
] , NAME = True , ::: 2969
INDENT class NAME ( NAME ) ::: 2969
STRING ) , ( NUMBER , ::: 2968
NUMBER , STRING ) , ( ::: 2968
False , NAME = True ) ::: 2967
False ) : NEWLINE INDENT if ::: 2967
if not NAME ( NAME ) ::: 2965
] = NAME . NAME [ ::: 2964
STRING ) ) ) NEWLINE NAME ::: 2963
del NAME . NAME [ NAME ::: 2963
while NAME : NEWLINE INDENT NAME ::: 2962
( NAME , NAME [ NUMBER ::: 2962
NEWLINE NAME ( ) NEWLINE EOS ::: 2961
if NAME : NEWLINE INDENT if ::: 2960
NEWLINE from . import NAME , ::: 2959
and NAME . NAME : NEWLINE ::: 2959
= STRING NEWLINE DEDENT return NAME ::: 2957
( STRING ) NEWLINE if not ::: 2957
. NAME ( ) ) . ::: 2953
NAME , STRING : STRING , ::: 2953
NAME == STRING NEWLINE DEDENT EOS ::: 2952
+ STRING . NAME ( NAME ::: 2952
+ NAME ) NEWLINE NAME . ::: 2951
NEWLINE DEDENT NAME = [ ] ::: 2951
STRING : NAME ( NAME ) ::: 2950
NAME } NEWLINE NAME . NAME ::: 2949
import NAME NEWLINE return NAME ( ::: 2947
NEWLINE NAME = [ NAME ] ::: 2947
NAME NEWLINE NAME = NAME + ::: 2947
) == NUMBER NEWLINE DEDENT EOS ::: 2946
NAME = NAME * NAME NEWLINE ::: 2946
STRING ] NEWLINE NAME = { ::: 2945
DEDENT DEDENT NAME = NAME ( ::: 2945
return NAME [ STRING ] NEWLINE ::: 2944
INDENT NAME = [ NAME ( ::: 2944
+ NAME + STRING NEWLINE NAME ::: 2943
. NAME ( NAME ) == ::: 2942
, NUMBER , NAME ) NEWLINE ::: 2941
NEWLINE return NAME NEWLINE DEDENT except ::: 2940
STRING . NAME ( [ STRING ::: 2940
] = NAME [ NUMBER ] ::: 2940
] . NAME ( ) ) ::: 2939
NAME ( ) , ) NEWLINE ::: 2937
[ NAME ] , NAME = ::: 2936
* NAME ) NEWLINE DEDENT EOS ::: 2933
global NAME NEWLINE global NAME NEWLINE ::: 2933
NEWLINE NAME = NUMBER * NAME ::: 2932
NEWLINE DEDENT elif NAME == NAME ::: 2928
NEWLINE INDENT return NEWLINE DEDENT if ::: 2927
. NAME ( ) == NUMBER ::: 2927
None : NEWLINE INDENT return None ::: 2926
STRING + NAME . NAME ) ::: 2926
NEWLINE if NAME [ NUMBER ] ::: 2925
NAME + NAME . NAME ( ::: 2924
NAME = [ ] NEWLINE EOS ::: 2924
) NEWLINE if NAME and NAME ::: 2923
NAME ( ) [ NAME ] ::: 2923
( STRING ) NEWLINE try : ::: 2923
if NAME . NAME [ NUMBER ::: 2922
NAME = True ) NEWLINE return ::: 2921
STRING , NAME ) NEWLINE EOS ::: 2921
NEWLINE from ... NAME import NAME ::: 2920
NAME ( NAME = [ NAME ::: 2919
= NAME ( NUMBER , NAME ::: 2919
STRING not in NAME . NAME ::: 2918
== STRING : NEWLINE INDENT if ::: 2917
( NAME ) . NAME NEWLINE ::: 2916
) NEWLINE NAME . NAME += ::: 2916
. NAME ( ) NEWLINE while ::: 2915
STRING ) ) , ( STRING ::: 2915
NAME ( NAME ) ] ) ::: 2915
[ NAME ] = NUMBER NEWLINE ::: 2914
= STRING + NAME ( NAME ::: 2912
NAME += NAME . NAME NEWLINE ::: 2912
INDENT from . NAME import NAME ::: 2912
] ) NEWLINE DEDENT NAME . ::: 2911
NEWLINE INDENT yield NAME . NAME ::: 2910
: NEWLINE INDENT yield NAME . ::: 2910
= STRING ) ) NEWLINE NAME ::: 2909
. NAME . NAME == NAME ::: 2907
, STRING ) , ( NUMBER ::: 2907
if STRING not in NAME : ::: 2906
NAME ) NEWLINE DEDENT DEDENT except ::: 2905
[ STRING ] [ NAME ] ::: 2904
NAME [ NUMBER ] == NUMBER ::: 2904
NAME , NAME NEWLINE DEDENT DEDENT ::: 2903
( NAME ) ) , STRING ::: 2903
NAME ( STRING ) NEWLINE try ::: 2903
NAME ) NEWLINE return ( NAME ::: 2902
( NAME ) ) , NAME ::: 2902
, STRING ) , STRING ) ::: 2899
. NAME ] ) NEWLINE NAME ::: 2899
+= NUMBER NEWLINE NAME . NAME ::: 2897
= { } ) : NEWLINE ::: 2897
in ( STRING , STRING ) ::: 2897
) NEWLINE NAME = NAME - ::: 2896
= STRING NEWLINE NAME = False ::: 2896
NAME = { } ) : ::: 2896
, STRING , STRING ] : ::: 2896
] for NAME in NAME . ::: 2896
NUMBER ] , NAME = NAME ::: 2893
NEWLINE INDENT pass NEWLINE DEDENT else ::: 2889
INDENT pass NEWLINE DEDENT else : ::: 2889
[ : - NUMBER ] NEWLINE ::: 2888
NAME , NAME NEWLINE try : ::: 2888
STRING ] : NEWLINE INDENT return ::: 2888
NUMBER , NUMBER ] , NAME ::: 2888
= NAME NEWLINE for NAME in ::: 2888
) , ) NEWLINE DEDENT EOS ::: 2886
NAME = True NEWLINE DEDENT except ::: 2885
= NAME . NAME ) . ::: 2885
and NAME . NAME == NAME ::: 2885
NAME [ NAME : NAME + ::: 2884
INDENT return STRING NEWLINE DEDENT def ::: 2884
) and NAME . NAME ( ::: 2882
STRING STRING ) NEWLINE NAME = ::: 2882
DEDENT return STRING NEWLINE DEDENT EOS ::: 2882
False NEWLINE NAME = False NEWLINE ::: 2881
NAME [ NAME ] = NUMBER ::: 2880
NAME ] NEWLINE NAME = [ ::: 2880
DEDENT NAME = STRING NEWLINE NAME ::: 2880
NAME : NEWLINE INDENT with NAME ::: 2878
. . NAME import ( NAME ::: 2878
STRING ) NEWLINE NAME [ STRING ::: 2878
from . NAME import NAME as ::: 2877
from . . NAME import ( ::: 2877
= lambda NAME : NAME . ::: 2877
= False NEWLINE NAME = False ::: 2874
( NAME ( NAME ) for ::: 2874
NAME = NAME ) NEWLINE EOS ::: 2873
. NAME == STRING NEWLINE assert ::: 2870
, STRING , None ) NEWLINE ::: 2868
. NAME NEWLINE return NAME . ::: 2867
NEWLINE DEDENT with NAME . NAME ::: 2866
NAME ( NAME , STRING % ::: 2866
yield NAME NEWLINE DEDENT DEDENT DEDENT ::: 2866
, NAME ] ) NEWLINE NAME ::: 2866
STRING : [ STRING , ] ::: 2861
** NAME ) NEWLINE return NAME ::: 2860
NAME NEWLINE from NAME import ( ::: 2859
] , [ STRING , STRING ::: 2858
. NAME ] NEWLINE NAME . ::: 2857
, ( NUMBER , NUMBER , ::: 2857
INDENT if NAME . NAME != ::: 2857
NEWLINE DEDENT NAME [ STRING ] ::: 2855
: NEWLINE INDENT raise NEWLINE DEDENT ::: 2855
( NAME ( NAME ) . ::: 2854
return False NEWLINE DEDENT if NAME ::: 2853
) == STRING NEWLINE assert NAME ::: 2852
NAME ( STRING , [ ] ::: 2852
= False NEWLINE NAME = STRING ::: 2848
NAME ( True ) NEWLINE DEDENT ::: 2847
( STRING , NAME = False ::: 2846
False NEWLINE DEDENT DEDENT return True ::: 2846
NEWLINE INDENT NAME = NAME - ::: 2844
NUMBER ) , NUMBER ) NEWLINE ::: 2843
. NAME ) ) NEWLINE return ::: 2843
, NAME NEWLINE try : NEWLINE ::: 2840
INDENT NAME = STRING NEWLINE if ::: 2840
= NAME ( [ STRING , ::: 2839
NUMBER ) NEWLINE NAME = ( ::: 2838
. . import NAME NEWLINE from ::: 2837
) : NEWLINE INDENT while True ::: 2837
( NAME = True ) ) ::: 2837
NUMBER ) , ( STRING , ::: 2836
NAME ( NUMBER ) NEWLINE if ::: 2836
if NAME != NAME : NEWLINE ::: 2835
, None ) ) NEWLINE NAME ::: 2835
[ ] NEWLINE DEDENT def NAME ::: 2834
. NAME ( None , NAME ::: 2834
) NEWLINE assert STRING in NAME ::: 2833
STRING , STRING : { STRING ::: 2832
+= NAME ( NAME ) NEWLINE ::: 2832
NAME + STRING + NAME ) ::: 2832
. NAME . NAME NEWLINE if ::: 2829
NAME , NAME = ( NAME ::: 2829
, STRING % NAME ) NEWLINE ::: 2829
) ) , NAME . NAME ::: 2824
% NAME ) NEWLINE NAME ( ::: 2824
return [ NAME . NAME ( ::: 2824
= NAME ( ) NEWLINE return ::: 2823
STRING NEWLINE raise NAME ( STRING ::: 2822
NAME , { STRING : STRING ::: 2820
!= None : NEWLINE INDENT NAME ::: 2819
} , NAME = [ STRING ::: 2819
, NAME = [ NAME ] ::: 2819
. NAME . NAME = True ::: 2818
NAME , NAME NEWLINE if NAME ::: 2816
. NAME , STRING ) ) ::: 2816
( NAME ) < NUMBER : ::: 2815
) ) , ] NEWLINE EOS ::: 2814
] , NAME . NAME ( ::: 2814
. NAME ( ) ; NEWLINE ::: 2813
= STRING NEWLINE if NAME . ::: 2813
NEWLINE NAME = False NEWLINE EOS ::: 2813
DEDENT NAME ( NAME . NAME ::: 2813
NAME : NEWLINE INDENT return [ ::: 2812
NAME ) and NAME . NAME ::: 2812
STRING , ( STRING , STRING ::: 2812
) NEWLINE if NAME not in ::: 2809
NAME , STRING ) , NAME ::: 2809
None ) ) NEWLINE NAME . ::: 2808
NAME = NUMBER NEWLINE NAME ( ::: 2808
DEDENT @ NAME . NAME NEWLINE ::: 2808
( lambda NAME : NAME ( ::: 2805
+ NAME ) NEWLINE NAME = ::: 2804
{ STRING : NAME } , ::: 2803
NAME [ STRING ] NEWLINE return ::: 2801
, STRING ) ) NEWLINE EOS ::: 2800
NAME and not NAME . NAME ::: 2800
STRING , None ) NEWLINE if ::: 2800
STRING : NAME ( NAME . ::: 2799
NAME ( NAME ) + NUMBER ::: 2797
) or NAME . NAME ( ::: 2796
NAME ) NEWLINE assert NAME == ::: 2796
= True NEWLINE DEDENT DEDENT EOS ::: 2796
for NAME in NAME [ NUMBER ::: 2794
in NAME : NEWLINE INDENT raise ::: 2793
NAME = STRING NEWLINE @ NAME ::: 2793
NAME ( STRING , [ NAME ::: 2792
NAME and NAME . NAME ( ::: 2792
NAME [ NUMBER ] + STRING ::: 2792
) + STRING ) NEWLINE NAME ::: 2792
INDENT with NAME ( NAME ) ::: 2789
, NAME = NAME ) . ::: 2788
DEDENT DEDENT NAME ( NAME ) ::: 2788
[ NUMBER : - NUMBER ] ::: 2788
return NUMBER NEWLINE DEDENT else : ::: 2787
( ) NEWLINE from NAME . ::: 2787
= STRING , ) NEWLINE EOS ::: 2787
( NAME , NAME = { ::: 2786
NUMBER , NAME ( NAME . ::: 2784
. NAME ( NUMBER ) . ::: 2783
NAME . NAME ) , NUMBER ::: 2783
False NEWLINE DEDENT NAME = NAME ::: 2781
) ) . NAME ( STRING ::: 2780
NAME ) in NAME . NAME ::: 2779
INDENT NAME = NAME + NUMBER ::: 2779
NAME = STRING NEWLINE from . ::: 2779
= [ NAME . NAME ] ::: 2778
+ STRING + STRING + STRING ::: 2776
= NAME , NAME = [ ::: 2776
[ STRING , STRING , NAME ::: 2775
NEWLINE NAME += NAME ( NAME ::: 2774
) , ( NUMBER , STRING ::: 2773
NAME , ) NEWLINE DEDENT EOS ::: 2772
) ) : NEWLINE INDENT for ::: 2771
STRING ) NEWLINE assert NAME ( ::: 2771
NAME = NAME ( { STRING ::: 2768
!= NUMBER : NEWLINE INDENT raise ::: 2768
= None , NAME = NAME ::: 2768
] [ STRING ] NEWLINE DEDENT ::: 2767
NAME . NAME ( NAME * ::: 2767
, STRING : None , STRING ::: 2767
( NAME ) == NAME ( ::: 2767
True NEWLINE DEDENT def NAME ( ::: 2766
NUMBER ) NEWLINE DEDENT DEDENT DEDENT ::: 2766
NEWLINE INDENT STRING NEWLINE global NAME ::: 2766
: NEWLINE INDENT STRING NEWLINE global ::: 2766
, STRING ) , STRING : ::: 2766
NAME , NUMBER ) ) NEWLINE ::: 2765
= NAME . NAME ) ) ::: 2765
NAME = [ NAME ( ) ::: 2765
( NAME ) - NUMBER ) ::: 2765
. NAME ( ) [ STRING ::: 2765
. NAME == NUMBER NEWLINE assert ::: 2764
] for NAME in NAME ( ::: 2764
NAME NEWLINE DEDENT except NAME as ::: 2763
DEDENT return NAME NEWLINE DEDENT return ::: 2762
NAME . NAME ( [ ( ::: 2762
( NAME , STRING , NUMBER ::: 2762
( STRING ) , NAME ) ::: 2761
NEWLINE return ( NAME . NAME ::: 2761
STRING : NUMBER } ) NEWLINE ::: 2759
NAME , STRING , NUMBER ) ::: 2758
NEWLINE assert STRING in NAME NEWLINE ::: 2758
STRING ] NEWLINE def NAME ( ::: 2758
import NAME NEWLINE NAME , NAME ::: 2758
. NAME ] NEWLINE NAME = ::: 2756
. NAME : NAME . NAME ::: 2756
NAME . NAME ] , NAME ::: 2756
STRING NEWLINE raise NAME ( ) ::: 2754
) ) NEWLINE DEDENT DEDENT NAME ::: 2753
] . NAME ( STRING , ::: 2753
NEWLINE INDENT return ( NAME . ::: 2752
INDENT return ( NAME . NAME ::: 2752
NEWLINE DEDENT DEDENT except : NEWLINE ::: 2751
, NAME = STRING ) ] ::: 2749
NAME = { NAME . NAME ::: 2749
= NAME ( { STRING : ::: 2749
STRING ] [ STRING ] , ::: 2749
NAME ( STRING ) [ - ::: 2748
NAME import NAME NEWLINE DEDENT EOS ::: 2747
NAME [ STRING ] = [ ::: 2747
= [ STRING ] , ) ::: 2746
NEWLINE DEDENT DEDENT NAME ( STRING ::: 2745
( STRING , [ ] ) ::: 2745
} NEWLINE NAME = { } ::: 2745
. NAME ( NAME ) as ::: 2744
if NAME < NAME : NEWLINE ::: 2744
( STRING ) [ - NUMBER ::: 2743
NAME . NAME ( NAME - ::: 2743
] = STRING NEWLINE NAME = ::: 2743
( NUMBER ) . NAME ( ::: 2741
NAME . NAME : NAME . ::: 2740
STRING : NEWLINE INDENT if NAME ::: 2740
NUMBER , NAME = False ) ::: 2740
( STRING STRING ) NEWLINE NAME ::: 2739
) ) ) NEWLINE return NAME ::: 2739
STRING NEWLINE STRING NEWLINE NAME = ::: 2739
. NAME NEWLINE assert NAME . ::: 2738
+= STRING NEWLINE NAME += STRING ::: 2738
] ) . NAME ( ) ::: 2738
for NAME in NAME ( ) ::: 2737
BOS NEWLINE NAME = NUMBER NEWLINE ::: 2736
+= NAME . NAME ( NAME ::: 2734
NAME , NAME : NAME , ::: 2734
= NAME NEWLINE DEDENT @ NAME ::: 2734
STRING ] NEWLINE NAME ( NAME ::: 2732
** NAME ) NEWLINE DEDENT def ::: 2731
NAME ( NAME ) ) + ::: 2730
NAME ( NUMBER ) NEWLINE EOS ::: 2729
NAME . NAME , NAME [ ::: 2726
in NAME . NAME ) NEWLINE ::: 2725
= NUMBER NEWLINE DEDENT else : ::: 2724
NAME = { STRING : ( ::: 2721
( STRING % NAME , NAME ::: 2719
STRING + STRING + STRING + ::: 2716
) NEWLINE with NAME ( STRING ::: 2716
NAME NEWLINE from ... NAME import ::: 2715
* NAME NEWLINE NAME = NAME ::: 2715
( STRING , STRING , NUMBER ::: 2714
, STRING , NAME = True ::: 2712
NAME ( NAME , [ NAME ::: 2710
NAME , { STRING : NAME ::: 2710
, STRING ] NEWLINE for NAME ::: 2710
INDENT return STRING % NAME . ::: 2710
NEWLINE NAME [ STRING ] [ ::: 2709
with NAME . NAME : NEWLINE ::: 2709
[ NAME ( NAME , NAME ::: 2709
STRING , NAME = [ ( ::: 2708
] . NAME ( NAME . ::: 2708
NAME = STRING NEWLINE DEDENT elif ::: 2707
DEDENT for NAME , NAME in ::: 2707
NAME . NAME ) for NAME ::: 2707
= NAME NEWLINE DEDENT if NAME ::: 2707
NUMBER ] , NAME ) NEWLINE ::: 2707
STRING NEWLINE pass NEWLINE DEDENT DEDENT ::: 2706
) : NEWLINE INDENT continue NEWLINE ::: 2706
) ] NEWLINE NAME = [ ::: 2704
+ NAME ) NEWLINE DEDENT DEDENT ::: 2703
False NEWLINE NAME . NAME ( ::: 2703
DEDENT NAME [ STRING ] = ::: 2703
. NAME ) NEWLINE DEDENT if ::: 2701
. NAME [ STRING ] : ::: 2700
NAME += NUMBER NEWLINE NAME . ::: 2700
DEDENT NAME = { STRING : ::: 2695
DEDENT class NAME : NEWLINE INDENT ::: 2694
None , NAME = STRING ) ::: 2692
None NEWLINE DEDENT else : NEWLINE ::: 2692
NAME , NAME ) , STRING ::: 2692
NUMBER NEWLINE while NAME < NAME ::: 2692
NAME == NUMBER NEWLINE assert NAME ::: 2691
NAME NEWLINE if NAME is None ::: 2691
DEDENT with NAME . NAME ( ::: 2688
] [ NUMBER ] NEWLINE NAME ::: 2688
try : NEWLINE INDENT with NAME ::: 2688
as NAME : NEWLINE INDENT if ::: 2688
( ) ) NEWLINE DEDENT return ::: 2685
NAME = NUMBER ) NEWLINE def ::: 2684
, ( NUMBER , STRING ) ::: 2684
= NUMBER ) NEWLINE def NAME ::: 2684
NAME . NAME = STRING % ::: 2682
STRING STRING ) NEWLINE DEDENT EOS ::: 2681
INDENT STRING NEWLINE for NAME , ::: 2681
. NAME ) for NAME in ::: 2680
NAME [ NUMBER ] NEWLINE if ::: 2680
return { STRING : NAME , ::: 2680
NAME + NAME ( NAME ) ::: 2679
( STRING , { } ) ::: 2678
NUMBER , NUMBER , NAME = ::: 2678
NAME ( NAME ) and NAME ::: 2677
NAME ] ) NEWLINE DEDENT return ::: 2675
STRING NEWLINE DEDENT elif NAME == ::: 2674
STRING , NAME , NAME . ::: 2672
[ ] , STRING : [ ::: 2672
= True ) ) , ( ::: 2672
True ) ) , ( STRING ::: 2671
NAME in NAME ] NEWLINE return ::: 2671
) NEWLINE NAME = ( NUMBER ::: 2671
STRING ) [ - NUMBER ] ::: 2667
STRING ) ) . NAME ( ::: 2667
= NUMBER ) NEWLINE DEDENT DEDENT ::: 2667
INDENT return NAME ( STRING , ::: 2666
NAME ] NEWLINE return NAME NEWLINE ::: 2665
NAME , NUMBER , NUMBER , ::: 2664
NEWLINE assert NAME == NAME NEWLINE ::: 2663
not NAME ( NAME ) : ::: 2663
) NEWLINE return ( NAME , ::: 2663
{ STRING : ( STRING , ::: 2661
True , NAME = NUMBER , ::: 2660
False NEWLINE NAME = STRING NEWLINE ::: 2660
] = NAME ( NAME [ ::: 2656
NAME = NAME NEWLINE DEDENT @ ::: 2656
. NAME ( ) [ NAME ::: 2654
STRING , STRING ] NEWLINE for ::: 2654
or NAME . NAME . NAME ::: 2653
return False NEWLINE DEDENT return NAME ::: 2651
STRING , STRING ] , [ ::: 2651
in ( STRING , STRING , ::: 2650
NAME ) , STRING , STRING ::: 2650
[ NUMBER ] NEWLINE DEDENT else ::: 2650
INDENT STRING NEWLINE from NAME import ::: 2650
( ) ) NEWLINE for NAME ::: 2650
( ) : NEWLINE INDENT raise ::: 2649
[ NAME ] for NAME in ::: 2649
NAME , [ STRING , STRING ::: 2648
NAME , ) ) NEWLINE DEDENT ::: 2648
+ NAME ) NEWLINE DEDENT EOS ::: 2647
] : NEWLINE INDENT NAME [ ::: 2646
DEDENT DEDENT NAME . NAME = ::: 2646
NAME ( ) , STRING , ::: 2645
NAME + NAME NEWLINE NAME = ::: 2645
) NEWLINE NAME [ NUMBER ] ::: 2645
import NAME NEWLINE DEDENT from NAME ::: 2645
NAME ( * NAME . NAME ::: 2644
INDENT for NAME in NAME [ ::: 2642
NAME ( [ STRING , NAME ::: 2642
NAME == NUMBER NEWLINE DEDENT EOS ::: 2641
BOS NEWLINE import NAME NEWLINE if ::: 2640
as NAME NEWLINE NAME = NUMBER ::: 2640
NEWLINE NAME = NAME ( lambda ::: 2640
import NAME NEWLINE NAME = None ::: 2639
DEDENT NAME . NAME [ NAME ::: 2639
NEWLINE NAME = NAME NEWLINE EOS ::: 2639
. NAME == STRING NEWLINE DEDENT ::: 2638
NAME ( ) ) NEWLINE for ::: 2638
assert NAME [ STRING ] == ::: 2637
NAME NEWLINE DEDENT from NAME . ::: 2637
NAME ( ) ] NEWLINE NAME ::: 2636
NAME NEWLINE if not NAME . ::: 2635
STRING STRING . NAME ( NAME ::: 2634
} NEWLINE NAME . NAME . ::: 2634
STRING : STRING } NEWLINE EOS ::: 2634
) , NAME = { STRING ::: 2633
: NAME ) : NEWLINE INDENT ::: 2629
) NEWLINE if not NAME ( ::: 2629
NAME ) ) NEWLINE DEDENT def ::: 2627
NAME : NAME ) : NEWLINE ::: 2624
NAME <= NAME : NEWLINE INDENT ::: 2622
) NEWLINE DEDENT with NAME ( ::: 2622
. import NAME as NAME NEWLINE ::: 2621
. NAME += NUMBER NEWLINE DEDENT ::: 2620
True NEWLINE NAME = NAME . ::: 2620
* NEWLINE import NAME NEWLINE NAME ::: 2619
INDENT NAME += NUMBER NEWLINE NAME ::: 2619
= ( ( STRING , STRING ::: 2617
STRING NEWLINE NAME = STRING + ::: 2616
STRING , STRING : NAME , ::: 2613
NAME , NAME = [ NAME ::: 2613
. NAME ( NAME = None ::: 2613
NAME ( NAME , [ STRING ::: 2611
import NAME NEWLINE return NAME . ::: 2611
NAME ( NUMBER ) NEWLINE return ::: 2610
NAME ] , NAME . NAME ::: 2609
NAME and NAME . NAME == ::: 2609
NAME ] NEWLINE for NAME in ::: 2609
NAME . NAME = NAME or ::: 2609
DEDENT DEDENT NAME = NAME . ::: 2608
NAME ( ) NEWLINE import NAME ::: 2608
] , STRING : STRING , ::: 2607
, STRING ) NEWLINE assert NAME ::: 2607
. NAME ) , NUMBER ) ::: 2607
( ) == NAME . NAME ::: 2606
NAME ( ) == NAME . ::: 2606
NAME = STRING ) as NAME ::: 2606
, NAME = NAME [ NUMBER ::: 2602
NUMBER , NUMBER , - NUMBER ::: 2601
STRING ] ) : NEWLINE INDENT ::: 2600
NAME in NAME . NAME ) ::: 2600
import * NEWLINE NAME . NAME ::: 2598
NAME ) NEWLINE if ( NAME ::: 2598
NAME . NAME , None ) ::: 2598
NAME ) NEWLINE NAME += NUMBER ::: 2598
, NAME = NAME , ** ::: 2597
( NUMBER , NUMBER ) ] ::: 2597
) ) NEWLINE if NAME : ::: 2597
STRING + NAME . NAME NEWLINE ::: 2596
NAME ( - NUMBER , NUMBER ::: 2596
None : NEWLINE INDENT return NEWLINE ::: 2595
NAME . NAME } NEWLINE NAME ::: 2594
INDENT STRING NEWLINE import NAME NEWLINE ::: 2593
NAME import * NEWLINE NAME . ::: 2593
STRING : { STRING : { ::: 2593
[ NUMBER : ] NEWLINE DEDENT ::: 2592
= NAME ) NEWLINE DEDENT return ::: 2591
STRING STRING STRING STRING ) NEWLINE ::: 2589
STRING STRING ) NEWLINE NAME . ::: 2589
: NAME ( STRING ) , ::: 2588
NAME ( [ ] ) NEWLINE ::: 2588
= STRING NEWLINE NAME = None ::: 2587
NEWLINE NAME ( NAME = NAME ::: 2586
NEWLINE DEDENT class NAME : NEWLINE ::: 2585
= STRING ) as NAME : ::: 2585
None NEWLINE NAME = NAME . ::: 2584
[ ] ) NEWLINE NAME . ::: 2580
NAME in NAME ) NEWLINE DEDENT ::: 2580
NAME == STRING or NAME == ::: 2580
[ NUMBER ] NEWLINE NAME ( ::: 2579
. NAME . NAME ( True ::: 2578
( NAME . NAME ( [ ::: 2577
NEWLINE INDENT pass NEWLINE DEDENT @ ::: 2573
INDENT pass NEWLINE DEDENT @ NAME ::: 2573
( STRING ) NEWLINE NAME [ ::: 2573
STRING ] = NAME NEWLINE return ::: 2572
. NAME if NAME . NAME ::: 2572
] ) ) NEWLINE NAME = ::: 2570
[ STRING , ] , NAME ::: 2569
NEWLINE DEDENT if not NAME : ::: 2569
NAME ( NAME ) * NAME ::: 2568
STRING : [ { STRING : ::: 2567
DEDENT NAME = NAME ( STRING ::: 2567
, NAME : NAME , NAME ::: 2567
) NEWLINE ( NAME , NAME ::: 2567
( NAME ) NEWLINE DEDENT for ::: 2567
( ) NEWLINE with NAME . ::: 2567
STRING : NAME } , NAME ::: 2565
INDENT return STRING NEWLINE DEDENT return ::: 2565
= NAME , NAME = False ::: 2565
( NAME , NUMBER ) ) ::: 2565
} NEWLINE DEDENT def NAME ( ::: 2563
, NAME = False ) , ::: 2563
[ NAME [ STRING ] ] ::: 2563
if NAME != NUMBER : NEWLINE ::: 2560
NEWLINE DEDENT NAME = { STRING ::: 2560
DEDENT NAME [ NAME ] = ::: 2560
( NAME ) NEWLINE import NAME ::: 2560
) ) ) ) NEWLINE DEDENT ::: 2559
STRING , } NEWLINE NAME = ::: 2556
NAME . NAME ( ) ; ::: 2556
] : NEWLINE INDENT return NAME ::: 2556
import NAME NEWLINE STRING NEWLINE NAME ::: 2555
NAME . NAME ( [ [ ::: 2555
NEWLINE DEDENT with NAME ( NAME ::: 2555
( NAME ) != NUMBER : ::: 2553
NAME ] , NAME ) NEWLINE ::: 2553
NAME ( ) ] NEWLINE DEDENT ::: 2552
[ NUMBER , NUMBER ] NEWLINE ::: 2552
= True , NAME = [ ::: 2551
, { } ) NEWLINE NAME ::: 2551
, NUMBER ) NEWLINE return NAME ::: 2551
import NAME NEWLINE with NAME ( ::: 2550
NAME : NAME . NAME . ::: 2549
] = NUMBER NEWLINE NAME [ ::: 2549
NUMBER ] NEWLINE DEDENT return NAME ::: 2549
, NAME NEWLINE NAME = NUMBER ::: 2549
NAME = [ NAME ] ) ::: 2549
% ( NAME ( NAME ) ::: 2548
. NAME , STRING ) as ::: 2547
NAME [ NUMBER ] - NAME ::: 2547
STRING ) ) , ) NEWLINE ::: 2547
NEWLINE NAME = NUMBER NEWLINE def ::: 2544
, NUMBER ) , ( STRING ::: 2543
= [ NAME , NAME ] ::: 2542
= STRING ) NEWLINE def NAME ::: 2542
NAME = STRING ) NEWLINE def ::: 2542
NEWLINE INDENT pass NEWLINE DEDENT return ::: 2541
. NAME in NAME . NAME ::: 2541
NAME = NUMBER ) . NAME ::: 2541
NAME NEWLINE NAME += NUMBER NEWLINE ::: 2540
NEWLINE if STRING not in NAME ::: 2539
NUMBER ] NEWLINE NAME ( NAME ::: 2539
import NAME as NAME , NAME ::: 2538
if NAME . NAME in NAME ::: 2538
) NEWLINE NAME = NAME * ::: 2538
as NAME , NAME as NAME ::: 2538
NEWLINE DEDENT for NAME , NAME ::: 2537
DEDENT return NAME . NAME [ ::: 2537
( STRING , NUMBER , NUMBER ::: 2537
] = NAME NEWLINE DEDENT NAME ::: 2536
NAME as NAME , NAME as ::: 2535
= - NUMBER NEWLINE NAME = ::: 2531
NUMBER : NEWLINE INDENT return True ::: 2530
NAME ( ( STRING , STRING ::: 2530
, STRING ) , NAME . ::: 2529
return False NEWLINE DEDENT else : ::: 2527
STRING , NAME [ NUMBER ] ::: 2527
INDENT return NAME NEWLINE DEDENT if ::: 2526
STRING , ) NEWLINE DEDENT DEDENT ::: 2525
= NUMBER ) NEWLINE NAME ( ::: 2524
None , NAME = False ) ::: 2524
+ NAME . NAME NEWLINE NAME ::: 2523
( [ NUMBER , NUMBER ] ::: 2522
STRING NEWLINE NAME ( NAME . ::: 2520
STRING ) for NAME in NAME ::: 2519
NAME . NAME in NAME . ::: 2518
STRING % NAME ) NEWLINE return ::: 2518
NEWLINE INDENT STRING NEWLINE return { ::: 2517
lambda NAME , NAME : NAME ::: 2517
. NAME ( - NUMBER , ::: 2517
== STRING or NAME == STRING ::: 2517
NAME . NAME if NAME . ::: 2516
INDENT return NUMBER NEWLINE DEDENT else ::: 2515
NAME [ NAME , NAME ] ::: 2514
: NEWLINE INDENT yield NAME , ::: 2514
None : NEWLINE INDENT if NAME ::: 2514
NEWLINE DEDENT return STRING NEWLINE DEDENT ::: 2513
STRING ) ) NEWLINE if NAME ::: 2513
NAME [ NAME [ STRING ] ::: 2512
( NAME ) ] NEWLINE NAME ::: 2512
+ NAME . NAME ( STRING ::: 2512
NAME , None ) NEWLINE NAME ::: 2512
, NAME ) NEWLINE NAME [ ::: 2512
( NAME ) ) . NAME ::: 2510
= None , NAME = True ::: 2509
) NEWLINE def NAME ( * ::: 2508
INDENT pass NEWLINE DEDENT NAME = ::: 2507
NEWLINE NAME = [ NAME [ ::: 2506
NAME [ NUMBER ] == NAME ::: 2505
. NAME == NUMBER NEWLINE DEDENT ::: 2504
, [ ] ) NEWLINE NAME ::: 2504
= STRING NEWLINE DEDENT elif NAME ::: 2504
STRING , STRING ) NEWLINE from ::: 2504
] = NAME ( NAME , ::: 2503
, } NEWLINE NAME . NAME ::: 2502
NEWLINE { STRING : STRING , ::: 2500
NAME [ NUMBER ] for NAME ::: 2500
, NAME . NAME ] NEWLINE ::: 2500
BOS NEWLINE { STRING : STRING ::: 2500
. NAME = [ NAME . ::: 2499
( STRING ) ) NEWLINE return ::: 2498
NEWLINE NAME = ( ( STRING ::: 2498
NEWLINE NAME = NAME NEWLINE def ::: 2497
NAME in NAME [ NAME ] ::: 2496
, STRING ) NEWLINE DEDENT else ::: 2495
] , NAME = NAME , ::: 2495
in NAME ] ) NEWLINE DEDENT ::: 2494
STRING ) , NAME ( NAME ::: 2493
) == STRING NEWLINE DEDENT EOS ::: 2492
DEDENT from NAME import NAME NEWLINE ::: 2492
= [ NAME . NAME , ::: 2492
] = NAME ( NAME . ::: 2492
NAME ( NAME ) NEWLINE import ::: 2492
NEWLINE INDENT NAME += STRING % ::: 2490
NAME . NAME == NAME ) ::: 2489
. NAME = [ STRING ] ::: 2488
STRING ] , [ STRING , ::: 2488
DEDENT return NUMBER NEWLINE DEDENT EOS ::: 2487
) NEWLINE NAME += NAME ( ::: 2486
yield NAME NEWLINE DEDENT DEDENT EOS ::: 2484
NEWLINE DEDENT NAME ( NAME . ::: 2483
, False ) NEWLINE NAME . ::: 2483
. NAME ( STRING ) and ::: 2482
{ } NEWLINE NAME = { ::: 2481
* NAME . NAME ) NEWLINE ::: 2481
NAME , NAME NEWLINE DEDENT except ::: 2480
NEWLINE return [ NAME . NAME ::: 2478
, ( NAME . NAME , ::: 2477
NEWLINE INDENT NAME += NAME [ ::: 2476
return NAME NEWLINE DEDENT if NAME ::: 2475
in NAME ( NUMBER ) ] ::: 2475
( ) NEWLINE NAME = ( ::: 2473
. NAME ) > NUMBER : ::: 2473
STRING % ( NAME , ) ::: 2472
STRING NEWLINE pass NEWLINE DEDENT def ::: 2472
NEWLINE INDENT STRING NEWLINE class NAME ::: 2471
NAME NEWLINE DEDENT import NAME NEWLINE ::: 2471
: NEWLINE INDENT STRING NEWLINE class ::: 2471
: NEWLINE INDENT return STRING + ::: 2470
. NAME ( ) } NEWLINE ::: 2470
NAME ( NAME ) ) . ::: 2470
NAME ) ] ) NEWLINE DEDENT ::: 2468
DEDENT from NAME . NAME . ::: 2467
STRING , STRING , { STRING ::: 2466
STRING , STRING , NUMBER ) ::: 2466
INDENT if STRING in NAME . ::: 2466
: - NUMBER ] NEWLINE DEDENT ::: 2465
, NAME , NAME ] ) ::: 2465
else : NEWLINE INDENT return NUMBER ::: 2463
NAME ( NAME ) NEWLINE while ::: 2462
True NEWLINE NAME . NAME . ::: 2462
STRING , STRING , ] ) ::: 2462
NAME = STRING NEWLINE with NAME ::: 2462
[ - NUMBER ] NEWLINE NAME ::: 2461
NAME : NEWLINE INDENT if STRING ::: 2461
( NAME ) ) NEWLINE for ::: 2461
[ STRING ] == STRING NEWLINE ::: 2460
= NUMBER NEWLINE DEDENT def NAME ::: 2460
NAME NEWLINE import NAME NEWLINE STRING ::: 2460
( False ) NEWLINE NAME . ::: 2458
) ] ) NEWLINE NAME . ::: 2458
NAME [ NUMBER ] + NAME ::: 2457
] , NAME = NUMBER ) ::: 2457
while NAME < NAME : NEWLINE ::: 2456
[ NAME . NAME ] , ::: 2454
NAME [ STRING ] + STRING ::: 2454
and NAME . NAME ( NAME ::: 2452
= STRING , ) , NAME ::: 2451
. NAME ( [ ( STRING ::: 2451
DEDENT if NAME is None : ::: 2451
NEWLINE INDENT global NAME NEWLINE if ::: 2450
STRING ] ) , NAME = ::: 2449
== STRING : NEWLINE INDENT from ::: 2449
return NAME NEWLINE DEDENT except NAME ::: 2448
NAME ) + NAME ( NAME ::: 2448
, NAME ( NAME [ NUMBER ::: 2447
INDENT NAME = NUMBER NEWLINE while ::: 2447
NUMBER ) , ) , ] ::: 2446
NAME ) ) ) ) NEWLINE ::: 2445
DEDENT NAME ( STRING , NAME ::: 2445
. NAME [ NAME ] , ::: 2443
. NAME += NUMBER NEWLINE NAME ::: 2443
, ] , NAME = [ ::: 2443
STRING : STRING } , { ::: 2442
= NAME . NAME NEWLINE for ::: 2442
= NAME - NAME NEWLINE NAME ::: 2442
) == NAME ( NAME ) ::: 2441
NAME = { NAME : NAME ::: 2440
NAME ( NAME ) is NAME ::: 2439
import * NEWLINE import NAME . ::: 2438
* NEWLINE import NAME . NAME ::: 2438
NEWLINE INDENT NAME ( NUMBER ) ::: 2433
NAME NEWLINE DEDENT DEDENT DEDENT DEDENT ::: 2433
NAME = NAME ) , NAME ::: 2432
DEDENT DEDENT for NAME in NAME ::: 2430
, STRING , ] , ) ::: 2430
import NAME NEWLINE DEDENT except : ::: 2429
INDENT NAME = ( NAME . ::: 2429
. NAME NEWLINE DEDENT @ NAME ::: 2429
] = NAME NEWLINE NAME = ::: 2428
NAME [ NAME ] for NAME ::: 2426
- NUMBER ] ) NEWLINE DEDENT ::: 2425
) : NEWLINE INDENT ( NAME ::: 2424
, NAME ( NUMBER , NUMBER ::: 2422
[ STRING ] NEWLINE NAME ( ::: 2422
NAME + NAME . NAME + ::: 2421
NAME NEWLINE with NAME ( STRING ::: 2421
[ NUMBER ] . NAME NEWLINE ::: 2420
* NEWLINE import NAME NEWLINE EOS ::: 2420
STRING NEWLINE NAME , NAME , ::: 2420
import NAME NEWLINE if NAME ( ::: 2419
) ) ) NEWLINE DEDENT return ::: 2418
] ) NEWLINE DEDENT DEDENT return ::: 2418
NAME ) ) for NAME in ::: 2418
NAME ) NEWLINE return NAME [ ::: 2418
( NAME . NAME ) ] ::: 2417
NAME , NAME ] NEWLINE DEDENT ::: 2416
[ STRING , STRING ] : ::: 2416
, NAME ) in NAME . ::: 2416
{ STRING : NAME [ STRING ::: 2415
STRING } , { STRING : ::: 2414
not NAME ( NAME . NAME ::: 2414
NAME = None ) NEWLINE NAME ::: 2413
[ NUMBER ] ) : NEWLINE ::: 2412
DEDENT if NAME . NAME is ::: 2412
NEWLINE INDENT NAME ( NAME = ::: 2412
= NAME NEWLINE if NAME . ::: 2411
NEWLINE return NUMBER NEWLINE DEDENT EOS ::: 2411
in NAME : NEWLINE INDENT yield ::: 2411
) ) . NAME ( NAME ::: 2411
[ STRING ] NEWLINE NAME [ ::: 2410
pass NEWLINE DEDENT NAME . NAME ::: 2410
NAME . NAME , ** NAME ::: 2409
, NAME ) NEWLINE DEDENT if ::: 2409
NUMBER : ] : NEWLINE INDENT ::: 2409
, STRING ) ] NEWLINE NAME ::: 2409
( NAME [ NUMBER ] [ ::: 2408
return NAME . NAME ( NUMBER ::: 2408
for NAME in NAME [ NAME ::: 2407
, NAME , STRING , STRING ::: 2407
: - NUMBER ] ) NEWLINE ::: 2406
NAME == NAME . NAME ) ::: 2406
) , NAME , NAME ) ::: 2406
NAME = [ ] ) : ::: 2406
= [ ] ) : NEWLINE ::: 2405
NAME [ NAME . NAME . ::: 2403
INDENT STRING NEWLINE global NAME NEWLINE ::: 2403
] . NAME . NAME ( ::: 2403
NAME = None NEWLINE DEDENT NAME ::: 2403
) . NAME ( ) [ ::: 2402
] [ STRING ] = NAME ::: 2402
STRING , NUMBER ) NEWLINE DEDENT ::: 2401
== NAME . NAME and NAME ::: 2400
NAME = NUMBER NEWLINE DEDENT def ::: 2399
, NUMBER ) , NAME ( ::: 2399
NAME NEWLINE NAME = STRING % ::: 2399
, NAME = STRING ) as ::: 2399
NAME ( NAME ) : pass ::: 2398
DEDENT else : NEWLINE INDENT from ::: 2397
, NAME ) for NAME , ::: 2397
, NAME ) NEWLINE DEDENT elif ::: 2397
( [ NAME ] ) NEWLINE ::: 2395
( NAME ) : pass NEWLINE ::: 2395
, NAME = NUMBER , NUMBER ::: 2395
, ** NAME ) NEWLINE if ::: 2394
, NAME , NAME = [ ::: 2393
] NEWLINE DEDENT DEDENT DEDENT EOS ::: 2392
INDENT NAME = [ NAME for ::: 2391
and NAME . NAME ( ) ::: 2391
NAME , NAME ( ) ) ::: 2390
, NAME . NAME ] ) ::: 2390
STRING ] NEWLINE DEDENT else : ::: 2389
raise NAME NEWLINE DEDENT def NAME ::: 2389
NAME = { } NEWLINE if ::: 2388
NUMBER : NUMBER , NUMBER : ::: 2388
: STRING } , { STRING ::: 2388
= True ) NEWLINE NAME ( ::: 2388
STRING } NEWLINE NAME = STRING ::: 2387
( NAME - NAME ) NEWLINE ::: 2387
NEWLINE DEDENT if NAME is None ::: 2386
NAME , * NAME ) NEWLINE ::: 2385
NEWLINE INDENT yield NAME , NAME ::: 2385
NEWLINE NAME . NAME ( None ::: 2385
. NAME , None ) NEWLINE ::: 2384
) ( NAME = NUMBER ) ::: 2384
INDENT NAME = [ NAME ] ::: 2383
] ) NEWLINE DEDENT except NAME ::: 2383
NUMBER NEWLINE if NAME . NAME ::: 2383
NAME } ) NEWLINE NAME . ::: 2382
) NEWLINE DEDENT return NAME , ::: 2382
NAME ) ] NEWLINE NAME = ::: 2382
. NAME NEWLINE NAME = NUMBER ::: 2381
pass NEWLINE DEDENT @ NAME NEWLINE ::: 2381
- NUMBER , NUMBER , NUMBER ::: 2380
, STRING ] , [ STRING ::: 2380
NAME . NAME NEWLINE DEDENT @ ::: 2379
NAME == NAME . NAME and ::: 2379
DEDENT if NAME . NAME == ::: 2379
STRING : NEWLINE INDENT NAME += ::: 2379
= True ) ) NEWLINE NAME ::: 2379
} NEWLINE return NAME . NAME ::: 2379
DEDENT elif NAME ( NAME ) ::: 2378
) NEWLINE import NAME NEWLINE EOS ::: 2378
= True ) NEWLINE return NAME ::: 2376
] , NAME = [ ] ::: 2375
NUMBER ] [ NUMBER ] NEWLINE ::: 2375
elif NAME . NAME == STRING ::: 2374
NAME , NAME ] NEWLINE NAME ::: 2374
= ( STRING STRING ) NEWLINE ::: 2372
NAME + STRING NEWLINE NAME . ::: 2371
STRING , NAME ( ) ) ::: 2371
, STRING % NAME . NAME ::: 2369
( [ NAME . NAME , ::: 2369
NEWLINE NAME . NAME += NAME ::: 2369
, None , NAME . NAME ::: 2369
. NAME ) NEWLINE NAME [ ::: 2368
: NUMBER , NUMBER : NUMBER ::: 2368
NEWLINE NAME = False NEWLINE DEDENT ::: 2367
, NAME NEWLINE DEDENT DEDENT EOS ::: 2367
NAME = False ) , NAME ::: 2367
NAME ] = NUMBER NEWLINE DEDENT ::: 2366
) ) NEWLINE from NAME import ::: 2366
, STRING , ) NEWLINE DEDENT ::: 2366
INDENT STRING NEWLINE DEDENT def NAME ::: 2365
= True NEWLINE DEDENT except NAME ::: 2365
NEWLINE INDENT STRING NEWLINE DEDENT def ::: 2365
: { STRING : { STRING ::: 2363
) NEWLINE import NAME as NAME ::: 2363
( NAME , NAME ) and ::: 2362
INDENT NAME ( NUMBER ) NEWLINE ::: 2362
) , NAME ( NAME = ::: 2362
( NAME = STRING ) . ::: 2362
] == NUMBER : NEWLINE INDENT ::: 2361
STRING , NAME . NAME [ ::: 2360
NAME += NUMBER NEWLINE if NAME ::: 2359
STRING + STRING . NAME ( ::: 2359
( NAME + NAME ) NEWLINE ::: 2357
NAME , ) ) NEWLINE NAME ::: 2354
if NAME and NAME . NAME ::: 2353
NAME ( - NUMBER ) NEWLINE ::: 2352
NAME = ( STRING STRING STRING ::: 2352
NAME ] ) NEWLINE return NAME ::: 2352
as NAME NEWLINE from . . ::: 2351
: [ STRING ] } , ::: 2350
NAME NEWLINE DEDENT elif NAME . ::: 2350
* NEWLINE NAME = NAME . ::: 2350
return NAME . NAME ( [ ::: 2350
assert STRING in NAME . NAME ::: 2350
= [ ] NEWLINE DEDENT def ::: 2349
NAME = NAME - NUMBER NEWLINE ::: 2349
NAME = NAME NEWLINE DEDENT if ::: 2348
NAME NEWLINE DEDENT try : NEWLINE ::: 2348
( STRING , ( NAME , ::: 2347
NEWLINE NAME . NAME , NAME ::: 2347
NAME ] = NAME NEWLINE return ::: 2347
STRING : NAME . NAME [ ::: 2346
<= NUMBER : NEWLINE INDENT NAME ::: 2345
] NEWLINE NAME = [ NUMBER ::: 2345
( NAME = NUMBER ) : ::: 2342
STRING , NUMBER ) , ( ::: 2341
. NAME + STRING NEWLINE NAME ::: 2340
NEWLINE NAME [ STRING ] . ::: 2338
if NAME . NAME [ STRING ::: 2338
NAME = None NEWLINE for NAME ::: 2337
: ] NEWLINE NAME = NAME ::: 2336
NEWLINE INDENT def NAME ( ) ::: 2335
STRING ) NEWLINE DEDENT except : ::: 2335
) , ( STRING , NUMBER ::: 2335
+ NAME NEWLINE NAME . NAME ::: 2332
( ) ] ) NEWLINE NAME ::: 2332
( STRING ) NEWLINE with NAME ::: 2332
INDENT def NAME ( ) : ::: 2329
NAME ] ) NEWLINE DEDENT NAME ::: 2329
NAME ) . NAME ( NUMBER ::: 2329
INDENT NAME = False NEWLINE NAME ::: 2327
STRING : STRING } } NEWLINE ::: 2327
False ) NEWLINE DEDENT DEDENT EOS ::: 2327
[ ] NEWLINE NAME = NUMBER ::: 2325
) ) NEWLINE if not NAME ::: 2325
NAME ( STRING ) + STRING ::: 2324
: NEWLINE INDENT return ( STRING ::: 2322
NAME = NUMBER ) NEWLINE return ::: 2322
NAME ( NAME ) != NAME ::: 2322
NAME ( STRING ) NEWLINE with ::: 2321
( ) , NAME = False ::: 2319
( STRING % ( NAME ( ::: 2319
from NAME import NAME NEWLINE STRING ::: 2319
( - NUMBER , NUMBER ) ::: 2318
[ : - NUMBER ] ) ::: 2317
NUMBER ) ) : NEWLINE INDENT ::: 2316
in NAME ) NEWLINE DEDENT EOS ::: 2315
, STRING , ] ) NEWLINE ::: 2315
return NAME . NAME == NAME ::: 2314
STRING NEWLINE return STRING . NAME ::: 2314
( ) NEWLINE with NAME ( ::: 2313
NEWLINE raise NAME ( NAME ) ::: 2312
, NAME ) NEWLINE try : ::: 2312
NAME = NUMBER , NUMBER NEWLINE ::: 2311
( STRING ) ) , ( ::: 2311
( NAME for NAME in NAME ::: 2310
= [ { STRING : STRING ::: 2309
, NAME = ( NAME , ::: 2307
) NEWLINE assert not NAME . ::: 2306
yield NAME . NAME ( NAME ::: 2306
) NEWLINE DEDENT DEDENT if NAME ::: 2306
NAME + NAME . NAME ) ::: 2306
INDENT STRING NEWLINE NAME ( ) ::: 2305
NAME ( NAME ( lambda NAME ::: 2305
} NEWLINE return NAME ( NAME ::: 2304
. NAME [ NUMBER ] [ ::: 2304
NAME ( STRING ) or NAME ::: 2303
( NAME . NAME - NAME ::: 2303
: NEWLINE INDENT NAME [ NUMBER ::: 2303
NAME ) == NAME : NEWLINE ::: 2301
( NAME ) ) ) ) ::: 2298
NEWLINE INDENT STRING NEWLINE DEDENT DEDENT ::: 2298
NEWLINE assert NAME . NAME [ ::: 2297
NEWLINE DEDENT NAME ( NAME = ::: 2297
INDENT del NAME . NAME [ ::: 2297
STRING : NEWLINE INDENT raise NAME ::: 2297
NEWLINE STRING NEWLINE NAME . NAME ::: 2296
[ NUMBER ] . NAME ) ::: 2294
NUMBER , - NUMBER , NUMBER ::: 2294
NAME , NAME ) ] NEWLINE ::: 2293
= NAME ( NAME ) , ::: 2292
, NAME = NAME ) , ::: 2292
NEWLINE if NAME == NAME . ::: 2292
NEWLINE for ( NAME , NAME ::: 2291
, NUMBER ) NEWLINE if NAME ::: 2291
STRING , STRING . NAME ( ::: 2290
STRING ) ) NEWLINE DEDENT NAME ::: 2289
, } NEWLINE NAME = { ::: 2289
NEWLINE STRING NEWLINE NAME = NUMBER ::: 2287
( NAME , NAME + NUMBER ::: 2286
) [ - NUMBER ] NEWLINE ::: 2286
( NAME - NAME ) / ::: 2286
- NUMBER NEWLINE NAME . NAME ::: 2286
NAME : NEWLINE INDENT assert NAME ::: 2285
NEWLINE INDENT return STRING + NAME ::: 2285
= NUMBER ) ) NEWLINE NAME ::: 2285
] , NUMBER ) NEWLINE NAME ::: 2285
NAME - NAME . NAME ) ::: 2284
NAME = False , ) , ::: 2284
. NAME : NEWLINE INDENT try ::: 2284
, STRING , NAME ( NAME ::: 2284
return NAME NEWLINE DEDENT elif NAME ::: 2283
NEWLINE NAME ( NAME [ STRING ::: 2282
NUMBER , NAME . NAME , ::: 2281
INDENT pass NEWLINE DEDENT NAME . ::: 2280
import * NEWLINE NAME = [ ::: 2280
NAME [ - NUMBER ] ) ::: 2279
( NAME ( ) . NAME ::: 2279
NEWLINE while NAME < NAME : ::: 2279
NAME ( [ NAME for NAME ::: 2279
. NAME , { STRING : ::: 2275
STRING STRING STRING ) NEWLINE NAME ::: 2274
] [ STRING ] , NAME ::: 2274
) ( NAME = NUMBER , ::: 2273
[ NUMBER : ] : NEWLINE ::: 2272
] NEWLINE NAME = NAME NEWLINE ::: 2271
, STRING : NAME ( STRING ::: 2269
in NAME if NAME . NAME ::: 2269
, NUMBER ] , NAME = ::: 2269
( STRING STRING STRING STRING STRING ::: 2268
INDENT STRING NEWLINE return [ NAME ::: 2268
NAME . NAME , { STRING ::: 2267
STRING ) ) NEWLINE DEDENT return ::: 2267
. NAME ] NEWLINE DEDENT EOS ::: 2266
( NAME ) , STRING : ::: 2266
NEWLINE if NAME . NAME < ::: 2264
( NAME ) ] ) NEWLINE ::: 2264
% ( NAME . NAME ) ::: 2264
STRING , { } ) NEWLINE ::: 2264
NAME import NAME NEWLINE DEDENT NAME ::: 2262
NAME += NAME NEWLINE DEDENT DEDENT ::: 2261
NAME [ NAME ] == NAME ::: 2261
NAME , NAME , NAME [ ::: 2261
NEWLINE DEDENT return NEWLINE DEDENT EOS ::: 2260
NUMBER ) . NAME ( NAME ::: 2260
* NAME ) NEWLINE NAME = ::: 2259
except NAME . NAME . NAME ::: 2259
NAME ( ) NEWLINE return NEWLINE ::: 2259
from ... NAME import NAME NEWLINE ::: 2258
STRING ] for NAME in NAME ::: 2258
NAME in NAME if NAME . ::: 2256
, NAME , NAME ) = ::: 2256
STRING ] } , NAME = ::: 2255
( ) NEWLINE return NEWLINE DEDENT ::: 2254
DEDENT if NAME == NUMBER : ::: 2254
= NAME ( ) ) NEWLINE ::: 2253
NUMBER ) NEWLINE NAME = [ ::: 2253
, NAME , NAME , STRING ::: 2253
DEDENT except NAME . NAME . ::: 2253
INDENT from NAME import NAME as ::: 2253
, STRING % ( NAME , ::: 2251
NAME ( [ STRING ] , ::: 2250
( NAME ) , NAME , ::: 2250
] != STRING : NEWLINE INDENT ::: 2249
NEWLINE if NAME > NAME : ::: 2249
: NEWLINE INDENT global NAME , ::: 2248
NAME = NUMBER NEWLINE DEDENT else ::: 2248
NEWLINE INDENT global NAME , NAME ::: 2248
. NAME ) == NUMBER : ::: 2248
NAME = NAME [ : - ::: 2247
and NAME . NAME ( STRING ::: 2247
NAME ( NAME ) ; NEWLINE ::: 2246
= STRING NEWLINE STRING NEWLINE NAME ::: 2246
NAME . NAME ( NUMBER * ::: 2245
{ STRING : STRING } } ::: 2245
@ NAME . NAME ( NAME ::: 2244
STRING ) ( NAME = STRING ::: 2244
INDENT STRING NEWLINE DEDENT DEDENT EOS ::: 2243
] NEWLINE NAME [ NAME ] ::: 2243
NAME [ NUMBER ] ) : ::: 2243
NAME = STRING NEWLINE NAME += ::: 2242
[ NUMBER : ] NEWLINE NAME ::: 2241
NAME . NAME = - NUMBER ::: 2241
= STRING NEWLINE from . NAME ::: 2239
: [ STRING , ] , ::: 2239
NAME . NAME ) , ] ::: 2237
NAME and NAME : NEWLINE INDENT ::: 2237
NAME , [ ] ) NEWLINE ::: 2237
: NAME } , NAME = ::: 2237
NAME ) , NAME ) ) ::: 2236
( NAME . NAME , ( ::: 2235
. NAME ) NEWLINE if not ::: 2235
( NAME ( NAME [ STRING ::: 2234
= ( NAME . NAME . ::: 2234
NUMBER ) , NAME ( NUMBER ::: 2233
STRING + NAME [ STRING ] ::: 2232
NAME , NAME + NUMBER ) ::: 2230
** NAME ) NEWLINE if NAME ::: 2230
** NAME . NAME ) NEWLINE ::: 2230
= NAME + NAME . NAME ::: 2230
= NUMBER ) . NAME ( ::: 2229
STRING ) NEWLINE with NAME . ::: 2229
INDENT return NEWLINE DEDENT if NAME ::: 2228
STRING : NEWLINE INDENT from NAME ::: 2227
[ STRING ] for NAME in ::: 2227
NEWLINE NAME ( NAME ( STRING ::: 2226
in NAME ] NEWLINE return NAME ::: 2226
NAME . NAME . NAME } ::: 2225
NEWLINE from ... NAME . NAME ::: 2224
NEWLINE DEDENT NAME ( STRING , ::: 2224
INDENT ( NAME , NAME ) ::: 2224
NEWLINE NAME . NAME ( False ::: 2224
. NAME . NAME = [ ::: 2223
continue NEWLINE DEDENT NAME = NAME ::: 2223
NEWLINE DEDENT DEDENT for NAME in ::: 2222
NAME , STRING ) NEWLINE for ::: 2222
, NAME = { } , ::: 2221
) ] NEWLINE DEDENT DEDENT EOS ::: 2221
] ) , NAME ( NAME ::: 2221
. NAME = NAME ( NUMBER ::: 2221
STRING ) [ NUMBER ] . ::: 2220
NAME + NAME ) NEWLINE DEDENT ::: 2220
, STRING ) NEWLINE DEDENT except ::: 2219
) NEWLINE return STRING NEWLINE DEDENT ::: 2218
NUMBER NEWLINE for NAME , NAME ::: 2217
} ) NEWLINE return NAME NEWLINE ::: 2217
NAME . NAME += NAME NEWLINE ::: 2216
NAME : NEWLINE INDENT del NAME ::: 2216
del NAME [ STRING ] NEWLINE ::: 2214
, ** NAME ) NEWLINE return ::: 2214
+= NUMBER NEWLINE DEDENT DEDENT EOS ::: 2213
, STRING , STRING ) : ::: 2213
NAME ) NEWLINE return [ NAME ::: 2210
NAME : NAME ) -> NAME ::: 2209
( ( STRING , NAME . ::: 2209
. NAME } ) NEWLINE DEDENT ::: 2208
{ STRING : NAME , } ::: 2208
NAME = NAME . NAME - ::: 2208
NUMBER ] ) NEWLINE return NAME ::: 2207
STRING ) NEWLINE if NAME is ::: 2207
) : NEWLINE INDENT from . ::: 2207
] ) NEWLINE NAME = STRING ::: 2207
NAME = NAME / NUMBER NEWLINE ::: 2205
NAME NEWLINE if not NAME : ::: 2205
STRING : NEWLINE INDENT import NAME ::: 2204
NAME import NAME as NAME , ::: 2204
NEWLINE DEDENT return NUMBER NEWLINE DEDENT ::: 2204
, ] , NAME = STRING ::: 2201
NEWLINE return NAME [ STRING ] ::: 2200
STRING ) , NAME = False ::: 2200
) ) NEWLINE from NAME . ::: 2199
STRING ) ) NEWLINE from NAME ::: 2199
NAME = NAME ( ** NAME ::: 2198
, STRING : STRING } } ::: 2196
NEWLINE assert NAME [ NUMBER ] ::: 2196
NAME = STRING ) ] NEWLINE ::: 2195
= [ NAME ] NEWLINE NAME ::: 2195
, STRING ) NEWLINE DEDENT return ::: 2195
NEWLINE INDENT return NEWLINE DEDENT DEDENT ::: 2195
NAME = NAME [ : NAME ::: 2195
STRING } ) NEWLINE NAME = ::: 2194
) NEWLINE if NAME [ STRING ::: 2193
pass NEWLINE DEDENT DEDENT DEDENT EOS ::: 2193
NEWLINE NAME = None NEWLINE DEDENT ::: 2193
if ( NAME . NAME ( ::: 2191
. NAME . NAME ( ** ::: 2190
STRING ] NEWLINE NAME [ STRING ::: 2190
- NUMBER ) NEWLINE NAME = ::: 2189
NAME = NAME + NAME . ::: 2187
NAME ( NAME * NAME ) ::: 2187
NEWLINE return NAME [ NUMBER ] ::: 2187
NAME ) ) NEWLINE DEDENT if ::: 2187
INDENT continue NEWLINE DEDENT NAME = ::: 2187
- NUMBER , - NUMBER , ::: 2187
NUMBER : NEWLINE INDENT NAME [ ::: 2185
if NAME [ NAME ] == ::: 2183
% NAME ) NEWLINE DEDENT return ::: 2183
. NAME ( - NUMBER ) ::: 2183
NEWLINE NAME = NUMBER NEWLINE if ::: 2182
NAME . NAME + STRING , ::: 2182
def NAME ( NAME = NAME ::: 2181
. NAME . NAME ( False ::: 2180
= NAME or NAME . NAME ::: 2180
. NAME ( STRING STRING STRING ::: 2180
: NEWLINE INDENT return NAME + ::: 2179
) ) , STRING ) NEWLINE ::: 2177
NAME = ( NAME ( NAME ::: 2176
INDENT STRING NEWLINE return NAME NEWLINE ::: 2175
- NUMBER ) NEWLINE NAME . ::: 2175
/ NUMBER NEWLINE NAME = NAME ::: 2174
NUMBER * NAME . NAME ( ::: 2174
, ] NEWLINE NAME = NAME ::: 2173
NAME += NUMBER NEWLINE NAME = ::: 2172
: NUMBER } NEWLINE NAME = ::: 2172
( STRING , NAME [ NUMBER ::: 2172
NAME import * NEWLINE NAME ( ::: 2172
= NAME . NAME ( * ::: 2172
) NEWLINE NAME ( ) . ::: 2171
STRING ) NEWLINE NAME ( NUMBER ::: 2171
NAME , STRING ) , STRING ::: 2171
, ] , STRING : [ ::: 2170
STRING , NAME = ( STRING ::: 2170
STRING + NAME NEWLINE NAME = ::: 2170
+ NAME ( NAME ( NAME ::: 2170
NEWLINE NAME = STRING NEWLINE try ::: 2169
NAME ( False ) NEWLINE DEDENT ::: 2169
STRING , NAME ) : NEWLINE ::: 2169
, NAME . NAME ) ] ::: 2168
NEWLINE DEDENT NAME = NAME + ::: 2166
DEDENT if STRING in NAME : ::: 2166
NAME = NAME or NAME . ::: 2165
, } NEWLINE def NAME ( ::: 2165
STRING : NAME [ NUMBER ] ::: 2164
] NEWLINE NAME . NAME [ ::: 2164
raise NAME ( NAME . NAME ::: 2163
. NAME NEWLINE DEDENT DEDENT DEDENT ::: 2162
, STRING ) ] ) NEWLINE ::: 2162
DEDENT DEDENT except NAME as NAME ::: 2161
NUMBER NEWLINE while True : NEWLINE ::: 2160
. NAME import NAME NEWLINE STRING ::: 2157
. NAME NEWLINE if not NAME ::: 2157
NAME , NAME , NUMBER , ::: 2156
= NAME ) ) NEWLINE NAME ::: 2155
NAME += STRING . NAME ( ::: 2155
INDENT import NAME NEWLINE import NAME ::: 2155
[ STRING ] NEWLINE DEDENT else ::: 2154
( NAME ( lambda NAME : ::: 2154
. import NAME , NAME NEWLINE ::: 2153
, - NUMBER , - NUMBER ::: 2153
NEWLINE INDENT import NAME NEWLINE import ::: 2153
( ) NEWLINE from NAME import ::: 2153
while NAME > NUMBER : NEWLINE ::: 2152
. NAME = - NUMBER NEWLINE ::: 2152
True ) ) NEWLINE NAME . ::: 2152
) NEWLINE DEDENT return NAME [ ::: 2151
STRING ) and NAME . NAME ::: 2150
) ) ) NEWLINE DEDENT NAME ::: 2150
. NAME [ STRING ] == ::: 2149
( NAME , STRING . NAME ::: 2149
NEWLINE DEDENT if not NAME ( ::: 2148
NAME + NUMBER ) NEWLINE DEDENT ::: 2148
. NAME != STRING : NEWLINE ::: 2148
if NAME ( NAME ) is ::: 2146
NEWLINE INDENT NAME [ NUMBER ] ::: 2146
) ) NEWLINE if NAME == ::: 2145
return ( NAME . NAME ( ::: 2145
) NEWLINE NAME ( NUMBER , ::: 2145
+= NUMBER NEWLINE DEDENT DEDENT return ::: 2144
) ) NEWLINE def NAME ( ::: 2144
( NAME ( NAME [ NAME ::: 2143
pass NEWLINE DEDENT NAME = NAME ::: 2143
INDENT NAME = [ NUMBER , ::: 2143
( NAME ( NAME = STRING ::: 2142
NAME ( NUMBER , NAME , ::: 2142
NAME , NAME as NAME , ::: 2142
STRING NEWLINE @ NAME . NAME ::: 2142
( [ NAME for NAME in ::: 2142
. NAME ( NAME - NAME ::: 2141
STRING , STRING ] , ) ::: 2141
NEWLINE DEDENT NAME = [ NAME ::: 2140
) NEWLINE DEDENT return STRING . ::: 2140
NEWLINE INDENT return NAME [ STRING ::: 2139
, [ NAME ] ) NEWLINE ::: 2139
DEDENT if NAME is not None ::: 2139
( ) ) , NAME ( ::: 2138
= [ NAME ] ) NEWLINE ::: 2137
. NAME ( STRING STRING ) ::: 2137
[ STRING ] NEWLINE DEDENT return ::: 2137
} ) : NEWLINE INDENT NAME ::: 2136
NEWLINE NAME = NAME / NAME ::: 2136
NAME ( NAME ( ) . ::: 2136
NAME = NAME ( STRING % ::: 2135
: NEWLINE INDENT del NAME [ ::: 2135
return NAME ( NAME ( STRING ::: 2134
, NAME ( NAME = STRING ::: 2134
, ( STRING , NUMBER ) ::: 2133
) ] NEWLINE for NAME in ::: 2133
INDENT STRING NEWLINE return ( NAME ::: 2132
False NEWLINE DEDENT def NAME ( ::: 2132
NAME ( ) , NAME , ::: 2132
[ NUMBER ] . NAME , ::: 2130
, ) NEWLINE NAME = STRING ::: 2130
NAME ( NAME / NUMBER ) ::: 2130
. NAME as NAME NEWLINE DEDENT ::: 2129
= STRING NEWLINE return NAME NEWLINE ::: 2129
( [ ( STRING , STRING ::: 2128
STRING NEWLINE NAME ( NAME = ::: 2128
, [ ] ) NEWLINE DEDENT ::: 2128
- NAME NEWLINE NAME = NAME ::: 2128
False , NAME = False , ::: 2128
, STRING ) NEWLINE with NAME ::: 2127
NAME ) ) , STRING ) ::: 2126
NEWLINE DEDENT NAME ( STRING % ::: 2126
import NAME NEWLINE DEDENT NAME = ::: 2126
, NAME NEWLINE DEDENT except NAME ::: 2125
) NEWLINE if NAME > NUMBER ::: 2125
[ ( STRING , NAME ) ::: 2124
INDENT try : NEWLINE INDENT if ::: 2124
: NAME ( NAME , NAME ::: 2124
] , NAME = NAME ( ::: 2123
NEWLINE NAME [ NAME . NAME ::: 2122
STRING NEWLINE STRING NEWLINE import NAME ::: 2121
NUMBER NEWLINE NAME = NAME NEWLINE ::: 2121
return [ NAME for NAME in ::: 2120
INDENT return True NEWLINE DEDENT if ::: 2120
NEWLINE @ NAME . NAME ( ::: 2120
and not NAME . NAME ( ::: 2119
NUMBER : ] ) NEWLINE DEDENT ::: 2119
( STRING ) NEWLINE NAME , ::: 2117
NAME . NAME and not NAME ::: 2117
NAME . NAME NEWLINE if not ::: 2117
INDENT raise NAME ( NAME ( ::: 2116
] ) NEWLINE DEDENT NAME = ::: 2116
: NEWLINE INDENT return [ STRING ::: 2116
) , NAME = NUMBER , ::: 2114
= NAME ) NEWLINE DEDENT else ::: 2113
NUMBER ) NEWLINE assert NAME . ::: 2112
NAME . NAME != STRING : ::: 2112
STRING % NAME . NAME , ::: 2112
) NEWLINE if NAME != NAME ::: 2111
INDENT return NAME [ STRING ] ::: 2111
NAME = True ) . NAME ::: 2108
) , STRING , STRING , ::: 2108
INDENT return [ NAME . NAME ::: 2108
NEWLINE INDENT return [ NAME . ::: 2108
+ STRING ) NEWLINE NAME ( ::: 2108
NEWLINE assert STRING in NAME . ::: 2108
] ) NEWLINE return NAME . ::: 2107
NEWLINE NAME = NUMBER * NUMBER ::: 2107
or NAME . NAME ( STRING ::: 2107
import NAME NEWLINE NAME = False ::: 2106
( ) NEWLINE assert NAME ( ::: 2105
NAME ) . NAME NEWLINE NAME ::: 2104
INDENT return NAME NEWLINE DEDENT elif ::: 2103
. NAME ( ) NEWLINE import ::: 2103
[ STRING ] ) NEWLINE if ::: 2103
NAME [ NUMBER : ] : ::: 2103
NAME ( STRING ) NEWLINE raise ::: 2103
NAME * NAME NEWLINE NAME = ::: 2102
STRING ) : NEWLINE INDENT raise ::: 2102
) ; NEWLINE NAME = NAME ::: 2101
return NAME ( ) . NAME ::: 2101
NAME , STRING % ( NAME ::: 2101
= False , NAME = None ::: 2101
NAME NEWLINE NAME , NAME , ::: 2100
) NEWLINE DEDENT if NAME is ::: 2100
NAME in NAME . NAME if ::: 2099
and NAME ( NAME . NAME ::: 2099
. NAME : NEWLINE INDENT pass ::: 2099
] [ NUMBER ] [ STRING ::: 2098
: NEWLINE INDENT yield NAME ( ::: 2098
NUMBER ) for NAME in NAME ::: 2098
) NEWLINE DEDENT return True NEWLINE ::: 2098
NUMBER , NUMBER ) , STRING ::: 2097
[ ] NEWLINE NAME = STRING ::: 2097
, NAME ) NEWLINE NAME , ::: 2096
in NAME . NAME [ NAME ::: 2096
NAME == STRING ) : NEWLINE ::: 2095
NUMBER ) NEWLINE return NAME . ::: 2095
. NAME [ : NUMBER ] ::: 2093
NAME ( None ) NEWLINE NAME ::: 2093
NEWLINE DEDENT if NAME == NUMBER ::: 2093
NAME . NAME ( ) and ::: 2092
return STRING . NAME ( [ ::: 2091
) NEWLINE DEDENT with NAME . ::: 2090
] [ NUMBER ] ) NEWLINE ::: 2090
) NEWLINE break NEWLINE DEDENT DEDENT ::: 2090
= NAME ( STRING , NUMBER ::: 2089
NAME = False NEWLINE for NAME ::: 2089
. NAME ( NAME = ( ::: 2088
= True ) ) NEWLINE DEDENT ::: 2087
] . NAME ( ) : ::: 2087
DEDENT NAME = STRING . NAME ::: 2087
NUMBER ] NEWLINE NAME = STRING ::: 2087
: NEWLINE INDENT if STRING not ::: 2086
== STRING : NEWLINE INDENT import ::: 2086
DEDENT if not NAME ( NAME ::: 2086
return { STRING : STRING , ::: 2086
NEWLINE INDENT if STRING not in ::: 2086
( ) . NAME NEWLINE NAME ::: 2085
INDENT assert NAME ( NAME , ::: 2085
) ) as NAME : NEWLINE ::: 2084
STRING ) ) NEWLINE import NAME ::: 2084
INDENT assert NAME . NAME ( ::: 2084
STRING STRING STRING STRING STRING ) ::: 2083
, NAME , NAME ) , ::: 2083
= NAME [ : - NUMBER ::: 2083
NAME ( NAME [ - NUMBER ::: 2082
[ ( NAME , NAME ) ::: 2082
INDENT if STRING not in NAME ::: 2081
NUMBER NEWLINE NAME = [ ] ::: 2081
( STRING in NAME . NAME ::: 2081
= NAME . NAME ( None ::: 2081
, None ) NEWLINE DEDENT DEDENT ::: 2081
NEWLINE INDENT NAME [ NAME [ ::: 2079
( NAME [ - NUMBER ] ::: 2078
NAME + NAME NEWLINE DEDENT EOS ::: 2077
NEWLINE if NAME == None : ::: 2077
for NAME in ( STRING , ::: 2076
= ( NAME , NAME , ::: 2076
+ NAME . NAME + NAME ::: 2076
NAME ) , NAME = True ::: 2076
STRING ] . NAME . NAME ::: 2075
STRING , ) , NAME . ::: 2074
: NAME } NEWLINE return NAME ::: 2074
NAME NEWLINE assert NAME ( NAME ::: 2074
) NEWLINE DEDENT return NEWLINE DEDENT ::: 2074
INDENT if NAME == NAME . ::: 2074
[ STRING ] NEWLINE DEDENT except ::: 2072
. NAME ( NAME * NAME ::: 2072
STRING , STRING , NAME ] ::: 2071
NAME ( ** NAME ) : ::: 2071
NAME . NAME [ : NUMBER ::: 2069
) NEWLINE STRING NEWLINE NAME = ::: 2068
NAME = True ) NEWLINE class ::: 2068
STRING : NAME } NEWLINE return ::: 2068
[ NUMBER ] NEWLINE for NAME ::: 2068
: None , STRING : None ::: 2068
= NAME ) NEWLINE DEDENT NAME ::: 2068
NUMBER , NAME = None ) ::: 2068
= True ) NEWLINE class NAME ::: 2068
in NAME . NAME [ STRING ::: 2068
NAME ) + NAME . NAME ::: 2067
( ** NAME ) : NEWLINE ::: 2067
( NAME + NUMBER , NAME ::: 2066
[ STRING ] NEWLINE for NAME ::: 2066
[ STRING ] . NAME . ::: 2066
( STRING ) ) , ) ::: 2066
( NAME , STRING % NAME ::: 2066
, ) NEWLINE def NAME ( ::: 2066
INDENT return False NEWLINE DEDENT else ::: 2065
if NAME is not None and ::: 2064
) NEWLINE def NAME ( ) ::: 2064
NAME . NAME ( ) != ::: 2063
( STRING ) ] NEWLINE NAME ::: 2063
NEWLINE NAME = { NAME : ::: 2062
) ) NEWLINE DEDENT except : ::: 2061
STRING ] : NEWLINE INDENT if ::: 2060
) ( NAME = STRING , ::: 2060
[ - NUMBER ] ) NEWLINE ::: 2059
. NAME ) as NAME : ::: 2059
NAME , STRING : NAME ( ::: 2059
% NAME == NUMBER : NEWLINE ::: 2059
( NAME ) == NAME : ::: 2058
or NAME == STRING : NEWLINE ::: 2058
) ) , NAME ( NAME ::: 2058
NEWLINE return NAME ( STRING ) ::: 2058
NAME + STRING , STRING ) ::: 2058
= STRING NEWLINE DEDENT NAME . ::: 2058
) , STRING ) as NAME ::: 2057
NEWLINE INDENT if NAME < NUMBER ::: 2056
( STRING ) == STRING NEWLINE ::: 2056
NAME ) NEWLINE DEDENT DEDENT def ::: 2055
. NAME NEWLINE return NAME ( ::: 2055
[ STRING ] ) : NEWLINE ::: 2054
<= NUMBER : NEWLINE INDENT return ::: 2054
NAME and NAME . NAME : ::: 2054
NAME . NAME ) as NAME ::: 2053
STRING : STRING , } , ::: 2052
if NAME : NEWLINE INDENT for ::: 2052
STRING ) or NAME . NAME ::: 2052
NAME ) ) , ) NEWLINE ::: 2052
return STRING % NAME NEWLINE DEDENT ::: 2051
STRING in NAME . NAME ( ::: 2050
NAME < NAME ( NAME ) ::: 2049
NAME = NAME . NAME * ::: 2049
( NAME + NUMBER ) NEWLINE ::: 2049
NEWLINE NAME = None NEWLINE if ::: 2047
) , NAME ( NAME [ ::: 2047
NAME } ) NEWLINE DEDENT DEDENT ::: 2047
in NAME . NAME NEWLINE DEDENT ::: 2046
) ) NEWLINE try : NEWLINE ::: 2046
, STRING ] , ) NEWLINE ::: 2045
= NAME . NAME ( ** ::: 2045
NEWLINE return True NEWLINE DEDENT except ::: 2045
INDENT STRING NEWLINE return STRING . ::: 2045
NEWLINE raise NAME . NAME ( ::: 2045
[ STRING ] } ) NEWLINE ::: 2044
False , NAME = True , ::: 2044
= NAME [ NAME ] [ ::: 2044
, NAME ( ) . NAME ::: 2043
NAME . NAME ] . NAME ::: 2043
NAME [ STRING ] for NAME ::: 2042
NUMBER ] . NAME ( NAME ::: 2041
STRING ) , ) NEWLINE NAME ::: 2038
NAME ] ) : NEWLINE INDENT ::: 2038
STRING : { STRING : NUMBER ::: 2038
NEWLINE try : NEWLINE INDENT if ::: 2038
NAME % NAME == NUMBER : ::: 2038
None NEWLINE for NAME in NAME ::: 2037
( STRING STRING STRING ) NEWLINE ::: 2037
) ) , NAME = NAME ::: 2037
+ NUMBER NEWLINE NAME = NAME ::: 2036
[ NUMBER ] NEWLINE DEDENT return ::: 2036
NEWLINE return NAME ( ) NEWLINE ::: 2036
, NAME . NAME NEWLINE DEDENT ::: 2036
- NUMBER ) NEWLINE DEDENT EOS ::: 2036
NAME NEWLINE NAME = STRING . ::: 2036
+= NUMBER NEWLINE DEDENT else : ::: 2034
, NAME as NAME , NAME ::: 2033
( STRING , False ) NEWLINE ::: 2033
NAME , } NEWLINE DEDENT EOS ::: 2032
assert NAME == NAME NEWLINE DEDENT ::: 2032
STRING : STRING , } } ::: 2031
- NUMBER ] . NAME ( ::: 2031
. NAME , ) NEWLINE DEDENT ::: 2030
= NAME . NAME [ : ::: 2030
NAME : NAME . NAME , ::: 2029
DEDENT else : NEWLINE INDENT for ::: 2029
NAME [ NUMBER ] , NUMBER ::: 2028
: NAME ( NAME ) , ::: 2028
( NAME [ STRING ] . ::: 2027
NUMBER ] NEWLINE return NAME NEWLINE ::: 2027
[ STRING ] NEWLINE DEDENT NAME ::: 2027
[ - NUMBER ] . NAME ::: 2027
* NEWLINE import NAME NEWLINE from ::: 2026
else : NEWLINE INDENT for NAME ::: 2025
= { NAME . NAME : ::: 2024
= None NEWLINE for NAME in ::: 2024
. NAME . NAME = False ::: 2023
( STRING , NAME ) : ::: 2023
= STRING ) ) NEWLINE DEDENT ::: 2023
else : NEWLINE INDENT from NAME ::: 2022
== NAME . NAME ( ) ::: 2021
NAME = [ ] NEWLINE while ::: 2020
NAME = NUMBER ) NEWLINE EOS ::: 2020
= [ NAME . NAME for ::: 2019
NAME [ : : - NUMBER ::: 2018
( STRING , NUMBER , NAME ::: 2018
] [ NUMBER ] NEWLINE DEDENT ::: 2017
, NUMBER ) NEWLINE DEDENT def ::: 2017
in NAME ) : NEWLINE INDENT ::: 2017
; NEWLINE NAME = NAME . ::: 2017
> NAME . NAME : NEWLINE ::: 2017
STRING ] ) NEWLINE if NAME ::: 2016
} , NAME = STRING ) ::: 2016
+ STRING NEWLINE NAME = STRING ::: 2015
. NAME ( STRING , True ::: 2015
, NAME ) ) NEWLINE if ::: 2015
NAME ( STRING , True ) ::: 2013
, NUMBER ) , NAME . ::: 2013
, NAME = - NUMBER ) ::: 2013
. NAME . NAME NEWLINE return ::: 2013
NAME ( STRING ) ] ) ::: 2012
NEWLINE INDENT @ NAME ( NAME ::: 2012
NEWLINE NAME ( NAME [ NUMBER ::: 2011
NAME = NAME + NAME ( ::: 2011
NEWLINE DEDENT raise NAME ( STRING ::: 2009
NEWLINE DEDENT NAME ( ) NEWLINE ::: 2008
NAME NEWLINE DEDENT for NAME in ::: 2008
STRING , STRING , None , ::: 2008
, STRING , ] , STRING ::: 2007
) ) NEWLINE DEDENT elif NAME ::: 2007
. NAME ) + STRING + ::: 2007
( ) [ NUMBER ] ) ::: 2005
NUMBER ) NEWLINE DEDENT except NAME ::: 2004
{ NAME . NAME : NAME ::: 2002
) . NAME NEWLINE NAME . ::: 2002
NUMBER ) , NAME = NAME ::: 2002
NAME in NAME [ NUMBER : ::: 2001
STRING : STRING , } ) ::: 2001
NAME ) / NAME ( NAME ::: 2001
( STRING in NAME ) NEWLINE ::: 2001
, NUMBER ) ) ) NEWLINE ::: 2000
( ) : NEWLINE INDENT yield ::: 2000
DEDENT NAME ( NAME = STRING ::: 1999
{ STRING : NUMBER } ) ::: 1998
INDENT raise NAME ( STRING + ::: 1998
. NAME , STRING : STRING ::: 1998
, NAME : NAME ) : ::: 1997
( NAME , NAME = ( ::: 1997
NAME = NAME / NAME NEWLINE ::: 1996
== STRING NEWLINE assert NAME ( ::: 1996
: NAME . NAME [ STRING ::: 1996
False NEWLINE NAME = NAME . ::: 1995
{ } ) NEWLINE NAME . ::: 1994
) NEWLINE raise NAME ( NAME ::: 1994
NEWLINE return True NEWLINE DEDENT DEDENT ::: 1994
NEWLINE DEDENT if NAME is not ::: 1993
def NAME ( ** NAME ) ::: 1993
, NAME ) ] NEWLINE DEDENT ::: 1993
* NAME ) NEWLINE NAME . ::: 1992
( STRING ) ) NEWLINE EOS ::: 1991
( STRING ) ) NEWLINE if ::: 1991
. NAME > NUMBER : NEWLINE ::: 1991
( NAME - NUMBER ) NEWLINE ::: 1991
STRING ] [ NUMBER ] [ ::: 1990
STRING , STRING : NUMBER } ::: 1990
) if NAME . NAME ( ::: 1990
in NAME . NAME ] ) ::: 1990
NEWLINE NAME = True NEWLINE EOS ::: 1990
( NUMBER ) NEWLINE if NAME ::: 1989
= { } NEWLINE if NAME ::: 1988
NEWLINE DEDENT DEDENT DEDENT DEDENT DEDENT ::: 1987
STRING NEWLINE from . import NAME ::: 1987
: STRING . NAME ( NAME ::: 1986
NAME . NAME > NUMBER : ::: 1985
( ( NAME . NAME ( ::: 1985
] NEWLINE from NAME . NAME ::: 1985
. NAME ( [ ] ) ::: 1983
False NEWLINE for NAME in NAME ::: 1983
DEDENT NAME = NAME [ NUMBER ::: 1983
INDENT return STRING NEWLINE DEDENT NAME ::: 1982
NEWLINE NAME += NAME NEWLINE DEDENT ::: 1980
NAME [ STRING ] = { ::: 1980
) NEWLINE NAME = [ ( ::: 1980
NAME , NAME ) and NAME ::: 1979
INDENT return STRING NEWLINE DEDENT if ::: 1979
raise NAME ( STRING STRING ) ::: 1978
STRING ) ] ) NEWLINE NAME ::: 1978
[ NAME ] += NUMBER NEWLINE ::: 1976
STRING } ) NEWLINE DEDENT EOS ::: 1975
) [ NUMBER ] NEWLINE return ::: 1975
( STRING ) . NAME NEWLINE ::: 1975
) ) [ NUMBER ] NEWLINE ::: 1975
NAME ] NEWLINE DEDENT DEDENT DEDENT ::: 1974
if NAME is None or NAME ::: 1973
. NAME ( NAME , True ::: 1973
from NAME import NAME NEWLINE return ::: 1972
NAME ) * NAME . NAME ::: 1972
NAME : NEWLINE INDENT if ( ::: 1972
. NAME += NAME . NAME ::: 1972
if NAME != None : NEWLINE ::: 1972
% NAME NEWLINE NAME = NAME ::: 1972
/ NAME ( NAME ) NEWLINE ::: 1971
= NUMBER NEWLINE NAME = ( ::: 1971
NAME , ( NUMBER , NUMBER ::: 1970
NAME ( NAME , [ ] ::: 1970
INDENT import NAME . NAME NEWLINE ::: 1969
NAME ] NEWLINE DEDENT DEDENT return ::: 1969
NAME = False NEWLINE if NAME ::: 1969
, STRING , NAME = NUMBER ::: 1969
, } ) NEWLINE DEDENT EOS ::: 1969
NAME - NAME NEWLINE NAME = ::: 1969
NAME . NAME ) , ) ::: 1969
NUMBER NEWLINE NAME [ STRING ] ::: 1968
NAME + NUMBER ) NEWLINE NAME ::: 1968
NUMBER NEWLINE DEDENT DEDENT DEDENT EOS ::: 1967
<= NAME : NEWLINE INDENT NAME ::: 1967
) + STRING NEWLINE NAME = ::: 1966
= True , NAME = None ::: 1966
: NEWLINE INDENT if NAME and ::: 1966
NAME NEWLINE DEDENT DEDENT return None ::: 1966
NAME . NAME == NAME NEWLINE ::: 1965
def NAME ( NAME ) -> ::: 1965
STRING . NAME ( STRING ) ::: 1964
: NEWLINE INDENT NAME = - ::: 1964
STRING : STRING } , } ::: 1964
@ NAME . NAME ( STRING ::: 1964
NEWLINE assert NAME . NAME is ::: 1964
NAME ( ) - NAME . ::: 1964
NAME ) + STRING NEWLINE DEDENT ::: 1964
. NAME = STRING . NAME ::: 1963
STRING : ( STRING , STRING ::: 1963
STRING NEWLINE from NAME import ( ::: 1962
( ) - NAME . NAME ::: 1962
if NAME [ STRING ] : ::: 1962
NAME = { } , NAME ::: 1961
return NAME + NAME NEWLINE DEDENT ::: 1960
STRING NEWLINE return { STRING : ::: 1959
. import NAME NEWLINE from NAME ::: 1958
STRING , NUMBER , NUMBER , ::: 1958
( STRING % ( NAME [ ::: 1957
= NUMBER ) NEWLINE return NAME ::: 1957
NAME ( NAME [ NAME : ::: 1957
False , NAME = STRING , ::: 1956
) , STRING : STRING , ::: 1956
) ( NAME = True ) ::: 1956
raise NAME ( STRING + NAME ::: 1956
) , NAME ( NUMBER , ::: 1956
NAME = NAME ( [ ( ::: 1955
= False NEWLINE for NAME in ::: 1955
NAME . NAME += NAME . ::: 1955
NEWLINE INDENT STRING NEWLINE if STRING ::: 1955
NAME ) NEWLINE DEDENT finally : ::: 1954
NAME NEWLINE from ... NAME . ::: 1954
NUMBER ) ) ) NEWLINE DEDENT ::: 1953
NEWLINE if NAME . NAME and ::: 1953
: STRING , } NEWLINE EOS ::: 1952
, STRING ) ) : NEWLINE ::: 1952
NUMBER , - NUMBER , - ::: 1952
STRING ) NEWLINE DEDENT DEDENT NAME ::: 1951
) NEWLINE DEDENT return None NEWLINE ::: 1951
NAME . NAME = STRING . ::: 1951
INDENT import NAME . NAME as ::: 1951
= ( NAME , ) NEWLINE ::: 1950
NEWLINE if NAME != NUMBER : ::: 1950
NAME = NUMBER NEWLINE while True ::: 1948
BOS NEWLINE STRING NEWLINE STRING NEWLINE ::: 1947
: NEWLINE INDENT return - NUMBER ::: 1947
STRING , NAME ] ) NEWLINE ::: 1947
= { } , NAME = ::: 1946
if NAME . NAME [ NAME ::: 1946
( NAME [ NAME ] [ ::: 1946
NAME = NAME NEWLINE while NAME ::: 1945
NAME if NAME . NAME ( ::: 1944
NEWLINE DEDENT NAME = [ STRING ::: 1944
) ) NEWLINE assert NAME . ::: 1943
+= STRING . NAME ( NAME ::: 1943
STRING ) ] , NAME = ::: 1942
DEDENT DEDENT if NAME : NEWLINE ::: 1941
= NUMBER NEWLINE while True : ::: 1941
. NAME . NAME ( * ::: 1940
= STRING ) ) , NAME ::: 1940
NAME | NAME . NAME ) ::: 1940
( NAME . NAME , { ::: 1940
) NEWLINE NAME += NAME NEWLINE ::: 1940
NAME - NUMBER ) NEWLINE DEDENT ::: 1939
NAME ( NUMBER ) ] NEWLINE ::: 1939
, STRING ) NEWLINE import NAME ::: 1939
[ STRING ] . NAME = ::: 1938
. NAME . NAME + STRING ::: 1937
NAME ) . NAME NEWLINE DEDENT ::: 1936
, NAME ( NUMBER ) ) ::: 1936
: STRING , STRING : True ::: 1936
, NAME ] NEWLINE NAME = ::: 1936
[ NUMBER : NUMBER ] ) ::: 1935
: - NUMBER ] NEWLINE NAME ::: 1934
NEWLINE return NEWLINE DEDENT NAME . ::: 1934
( NAME = NAME ) : ::: 1933
: [ STRING ] } ) ::: 1933
NAME = ( NAME - NAME ::: 1933
NEWLINE INDENT if NAME % NUMBER ::: 1932
NEWLINE return NEWLINE DEDENT NAME = ::: 1932
, NUMBER , NAME = NAME ::: 1931
try : NEWLINE INDENT NAME , ::: 1930
NEWLINE DEDENT return { STRING : ::: 1930
] + STRING + NAME [ ::: 1930
STRING ) NEWLINE DEDENT DEDENT return ::: 1930
from . import NAME as NAME ::: 1929
] , NAME = False ) ::: 1928
True ) NEWLINE class NAME : ::: 1928
NEWLINE assert ( NAME . NAME ::: 1927
) ) ) : NEWLINE INDENT ::: 1927
NAME , STRING : STRING } ::: 1926
NAME + STRING , NAME = ::: 1926
STRING : STRING } ) , ::: 1925
NEWLINE NAME = ( NAME ( ::: 1925
, STRING : NUMBER , } ::: 1924
NAME ( NAME , True ) ::: 1924
= NAME ( * NAME , ::: 1923
INDENT NAME . NAME += NAME ::: 1923
, NUMBER , NUMBER ] ] ::: 1922
: NAME . NAME , NAME ::: 1922
{ STRING : True , STRING ::: 1921
STRING + NAME [ NUMBER ] ::: 1920
and NAME : NEWLINE INDENT NAME ::: 1920
NUMBER NEWLINE NAME = True NEWLINE ::: 1920
None , NAME . NAME . ::: 1919
STRING ] , NAME = False ::: 1919
NAME ( ) . NAME ) ::: 1919
in NAME [ NAME ] : ::: 1919
NEWLINE INDENT def NAME ( * ::: 1918
NEWLINE def NAME ( ** NAME ::: 1918
NAME [ NAME ] = [ ::: 1917
[ NAME [ NUMBER ] for ::: 1917
) , ) ) NEWLINE NAME ::: 1917
= STRING + NAME NEWLINE NAME ::: 1917
= NAME NEWLINE DEDENT elif NAME ::: 1916
INDENT def NAME ( * NAME ::: 1916
NEWLINE NAME . NAME [ NUMBER ::: 1916
= NUMBER NEWLINE for NAME , ::: 1915
NAME = ( STRING ) NEWLINE ::: 1914
NAME ( STRING in NAME ) ::: 1914
= NAME . NAME ( lambda ::: 1913
NEWLINE DEDENT DEDENT except NAME as ::: 1913
NUMBER ) NEWLINE NAME , NAME ::: 1913
NAME = None ) NEWLINE DEDENT ::: 1913
NAME , NAME = lambda NAME ::: 1912
NAME ] [ NAME ] = ::: 1912
NEWLINE return NAME NEWLINE DEDENT else ::: 1911
. NAME } NEWLINE DEDENT EOS ::: 1911
[ NAME ] NEWLINE return NAME ::: 1910
STRING ) NEWLINE DEDENT @ NAME ::: 1910
: ] : NEWLINE INDENT NAME ::: 1909
if STRING not in NAME . ::: 1908
NAME ( STRING % NAME [ ::: 1908
% NAME . NAME NEWLINE NAME ::: 1908
NEWLINE while NAME > NUMBER : ::: 1907
. NAME ) , ] NEWLINE ::: 1907
STRING , NUMBER , NUMBER ) ::: 1906
NEWLINE INDENT NAME += STRING + ::: 1905
) NEWLINE @ NAME NEWLINE def ::: 1904
NAME = NAME ( STRING STRING ::: 1904
NUMBER , NAME = NAME , ::: 1904
import NAME NEWLINE DEDENT import NAME ::: 1904
NEWLINE raise NAME NEWLINE DEDENT EOS ::: 1904
NEWLINE assert NAME ( STRING ) ::: 1903
] [ NAME ] = NAME ::: 1903
[ NUMBER ] NEWLINE DEDENT NAME ::: 1903
[ STRING ] , NUMBER ) ::: 1903
NAME . NAME ( NAME / ::: 1903
NAME ) : NEWLINE INDENT ( ::: 1902
NAME ( ( STRING , NAME ::: 1900
STRING , [ ] ) NEWLINE ::: 1900
) . NAME ) NEWLINE DEDENT ::: 1900
NAME += NAME [ NAME ] ::: 1899
DEDENT return NAME ( NAME ( ::: 1899
, NUMBER ] ) NEWLINE DEDENT ::: 1899
] ) NEWLINE DEDENT def NAME ::: 1898
STRING ) ) , ] NEWLINE ::: 1898
NAME ] NEWLINE DEDENT NAME = ::: 1897
) NEWLINE DEDENT NAME ( ) ::: 1897
NAME ( STRING STRING STRING STRING ::: 1897
. NAME ) , STRING ) ::: 1897
] : NEWLINE INDENT NAME += ::: 1896
) NEWLINE if NAME < NUMBER ::: 1896
: NEWLINE INDENT NAME -= NUMBER ::: 1895
) in NAME : NEWLINE INDENT ::: 1895
NAME ( [ [ NUMBER , ::: 1894
continue NEWLINE DEDENT NAME . NAME ::: 1894
INDENT NAME = NAME * NAME ::: 1894
= NAME . NAME ) , ::: 1892
. NAME NEWLINE try : NEWLINE ::: 1892
STRING } NEWLINE NAME = { ::: 1892
. NAME ) NEWLINE NAME , ::: 1891
STRING % NAME . NAME [ ::: 1891
DEDENT import NAME NEWLINE import NAME ::: 1890
NAME [ NAME ] += NUMBER ::: 1889
NAME ( NAME ) ) ] ::: 1889
NUMBER ) ) ) NEWLINE NAME ::: 1889
STRING NEWLINE if STRING in NAME ::: 1889
-> NAME : NEWLINE INDENT STRING ::: 1888
* NUMBER NEWLINE NAME = NAME ::: 1888
True NEWLINE def NAME ( NAME ::: 1888
, NAME NEWLINE DEDENT DEDENT DEDENT ::: 1888
None : NEWLINE INDENT NAME [ ::: 1886
NAME ( NAME + NUMBER , ::: 1885
( ) NEWLINE import NAME NEWLINE ::: 1884
= True NEWLINE def NAME ( ::: 1884
= NAME + NUMBER NEWLINE NAME ::: 1884
= False , ) , ] ::: 1884
NUMBER ) ] NEWLINE NAME = ::: 1883
, NAME . NAME ) . ::: 1883
NAME NEWLINE class NAME ( NAME ::: 1883
False , ) , ] NEWLINE ::: 1883
NAME >= NAME : NEWLINE INDENT ::: 1882
[ STRING . NAME ( NAME ::: 1882
NAME = True NEWLINE def NAME ::: 1882
= STRING . NAME ( STRING ::: 1881
, NAME = ( NAME . ::: 1881
NAME import * NEWLINE DEDENT except ::: 1879
, NAME as NAME NEWLINE from ::: 1879
NAME ) and NAME ( NAME ::: 1877
== NUMBER NEWLINE assert NAME ( ::: 1876
( NAME ) NEWLINE return True ::: 1875
NAME [ NUMBER ] * NAME ::: 1874
NAME ( STRING ) NEWLINE while ::: 1873
INDENT global NAME NEWLINE if NAME ::: 1873
INDENT return NUMBER NEWLINE DEDENT NAME ::: 1872
STRING % NAME , NAME = ::: 1872
( NAME . NAME ) < ::: 1872
NUMBER ] - NAME [ NUMBER ::: 1872
NUMBER , NUMBER ) NEWLINE EOS ::: 1871
[ NUMBER ] ) NEWLINE return ::: 1871
NAME [ STRING ] ] NEWLINE ::: 1871
NUMBER , NUMBER ] ] ) ::: 1870
NAME [ NAME ] NEWLINE return ::: 1869
, NAME [ STRING ] [ ::: 1869
== NAME ( NAME ) NEWLINE ::: 1868
] - NAME [ NUMBER ] ::: 1867
. NAME ) ) , ) ::: 1867
. NAME != NUMBER : NEWLINE ::: 1867
[ - NUMBER ] NEWLINE DEDENT ::: 1866
( ( NUMBER , NUMBER , ::: 1865
NEWLINE return NAME [ NAME ] ::: 1864
) [ NUMBER ] NEWLINE if ::: 1864
NEWLINE return STRING NEWLINE DEDENT EOS ::: 1863
) NEWLINE NAME += NAME . ::: 1862
. NAME ) NEWLINE try : ::: 1862
) NEWLINE if NAME [ NUMBER ::: 1862
- NUMBER ] ) NEWLINE NAME ::: 1861
DEDENT DEDENT NAME . NAME . ::: 1861
] NEWLINE DEDENT except : NEWLINE ::: 1860
( NAME . NAME , None ::: 1860
+ STRING + NAME NEWLINE NAME ::: 1859
, NAME = [ NUMBER , ::: 1858
NUMBER ) , STRING ) NEWLINE ::: 1858
INDENT STRING NEWLINE if NAME in ::: 1858
NAME ( ) NEWLINE NAME += ::: 1858
NAME [ - NUMBER : ] ::: 1858
NAME ( ) NEWLINE return True ::: 1857
= NAME ( ) , ) ::: 1857
STRING STRING STRING ) NEWLINE DEDENT ::: 1856
NEWLINE return False NEWLINE DEDENT DEDENT ::: 1856
NEWLINE NAME = None NEWLINE def ::: 1856
in NAME ] NEWLINE NAME . ::: 1855
STRING ) ( NAME = NAME ::: 1855
DEDENT except : NEWLINE INDENT raise ::: 1855
NUMBER ] , NUMBER ) NEWLINE ::: 1854
NAME NEWLINE DEDENT DEDENT else : ::: 1854
NAME ( ) NEWLINE class NAME ::: 1854
in NAME . NAME if NAME ::: 1854
== - NUMBER : NEWLINE INDENT ::: 1853
, STRING : NUMBER } ) ::: 1853
< NUMBER : NEWLINE INDENT raise ::: 1853
NAME ] [ NAME ] NEWLINE ::: 1852
NAME ( NAME ) ) for ::: 1850
STRING ) NEWLINE for NAME , ::: 1850
NEWLINE INDENT STRING NEWLINE NAME [ ::: 1850
return [ ] NEWLINE DEDENT DEDENT ::: 1849
or NAME . NAME ( ) ::: 1849
, NAME ) NEWLINE with NAME ::: 1849
NAME = NAME [ - NUMBER ::: 1849
( NUMBER ) NEWLINE return NAME ::: 1848
NUMBER , NUMBER , STRING ) ::: 1847
) * NAME . NAME ( ::: 1847
INDENT if NAME . NAME and ::: 1845
( NUMBER * NAME . NAME ::: 1844
return True NEWLINE DEDENT if NAME ::: 1844
. NAME = ( NAME . ::: 1844
INDENT return NUMBER NEWLINE DEDENT return ::: 1843
NAME [ NUMBER ] NEWLINE return ::: 1843
) + NAME ( NAME ) ::: 1843
NUMBER NEWLINE NAME = False NEWLINE ::: 1842
] NEWLINE NAME , NAME = ::: 1842
INDENT with NAME ( STRING , ::: 1842
INDENT NAME = NAME NEWLINE def ::: 1842
NAME . NAME != NUMBER : ::: 1841
) : NEWLINE INDENT while NAME ::: 1841
< NAME . NAME : NEWLINE ::: 1841
] ) NEWLINE NAME = [ ::: 1840
STRING ) NEWLINE import NAME . ::: 1839
NUMBER ] ) NEWLINE DEDENT NAME ::: 1839
[ NUMBER , NUMBER ] ] ::: 1838
, NAME = STRING ) . ::: 1838
) NEWLINE return NAME [ NUMBER ::: 1838
, NAME , NAME = { ::: 1838
NEWLINE INDENT return [ NAME ( ::: 1838
False NEWLINE DEDENT NAME . NAME ::: 1838
break NEWLINE DEDENT DEDENT return NAME ::: 1837
INDENT return { STRING : STRING ::: 1837
INDENT NAME += NAME [ NAME ::: 1837
] = NUMBER NEWLINE NAME . ::: 1836
NEWLINE NAME . NAME = - ::: 1836
NAME = [ NUMBER ] * ::: 1836
( ( NAME , NAME , ::: 1835
STRING , NAME ) . NAME ::: 1835
) NEWLINE @ NAME . NAME ::: 1834
NAME + NUMBER NEWLINE DEDENT DEDENT ::: 1833
[ NUMBER ] - NAME [ ::: 1833
NAME = NAME . NAME = ::: 1832
: NAME ) -> NAME : ::: 1831
NAME . NAME ) NEWLINE try ::: 1831
[ [ NUMBER , NUMBER , ::: 1830
( NAME . NAME ) != ::: 1830
NEWLINE DEDENT import NAME NEWLINE import ::: 1830
NAME ( ( NAME ( NAME ::: 1829
NAME NEWLINE NAME . NAME += ::: 1829
DEDENT return ( NAME , NAME ::: 1829
if NAME % NAME == NUMBER ::: 1828
. NAME NEWLINE NAME = ( ::: 1828
, NAME ) NEWLINE NAME += ::: 1827
) ) NEWLINE NAME = { ::: 1827
) , NAME ( ) , ::: 1827
. NAME ) , STRING : ::: 1827
STRING , STRING ) ) ) ::: 1827
) NEWLINE DEDENT NAME , NAME ::: 1827
NUMBER NEWLINE DEDENT elif NAME == ::: 1825
NEWLINE DEDENT return NAME ( STRING ::: 1824
( NAME ( NAME ) == ::: 1824
, ( NAME , NAME , ::: 1823
NAME = { STRING : True ::: 1822
, NAME NEWLINE NAME = { ::: 1822
NAME , STRING % NAME ) ::: 1822
[ NUMBER ] , NUMBER ) ::: 1822
: NAME [ NUMBER ] , ::: 1821
NEWLINE DEDENT NAME = STRING . ::: 1820
NEWLINE INDENT for NAME in [ ::: 1820
NEWLINE INDENT return NAME ( * ::: 1820
NEWLINE DEDENT return NAME [ NAME ::: 1820
NAME : NAME ( NAME ) ::: 1819
= NUMBER ) ) NEWLINE DEDENT ::: 1819
( ) NEWLINE return True NEWLINE ::: 1818
, NUMBER , NUMBER , STRING ::: 1818
. NAME ( NAME ) and ::: 1818
. NAME ( NAME ( [ ::: 1817
% ( NAME , NAME ( ::: 1817
= NAME * NAME NEWLINE NAME ::: 1816
) NEWLINE NAME = NAME / ::: 1816
) , NAME ( NAME , ::: 1815
NAME ) NEWLINE if STRING in ::: 1815
NAME , { } ) NEWLINE ::: 1815
None NEWLINE DEDENT return NAME NEWLINE ::: 1815
NAME NEWLINE NAME ( STRING % ::: 1815
from ... NAME . NAME import ::: 1815
NAME ) NEWLINE NAME ( NUMBER ::: 1814
, NAME + NUMBER ) NEWLINE ::: 1814
None ) NEWLINE if NAME is ::: 1812
INDENT STRING NEWLINE return { STRING ::: 1812
NAME } ) NEWLINE NAME = ::: 1812
NEWLINE if NAME != STRING : ::: 1811
NEWLINE INDENT return - NUMBER NEWLINE ::: 1811
INDENT return - NUMBER NEWLINE DEDENT ::: 1810
return NUMBER NEWLINE DEDENT NAME = ::: 1810
NAME ) + STRING NEWLINE NAME ::: 1809
= NAME [ NUMBER ] [ ::: 1809
NEWLINE NAME = [ ( NAME ::: 1808
NAME , ) NEWLINE from . ::: 1808
NAME NEWLINE DEDENT DEDENT DEDENT return ::: 1807
return ( NAME ) NEWLINE DEDENT ::: 1807
) / NAME ( NAME ) ::: 1807
import NAME , NAME NEWLINE try ::: 1806
, NAME + STRING ) NEWLINE ::: 1806
NAME ( STRING ) ; NEWLINE ::: 1806
= False , NAME = NUMBER ::: 1805
( STRING ) ) : NEWLINE ::: 1804
True : NEWLINE INDENT try : ::: 1804
STRING ] NEWLINE DEDENT def NAME ::: 1804
( NUMBER ) NEWLINE DEDENT else ::: 1804
) , STRING . NAME ( ::: 1803
NAME ( STRING ) , NUMBER ::: 1803
NAME or NAME . NAME ( ::: 1802
NAME . NAME , ) ) ::: 1801
INDENT NAME [ NAME ] += ::: 1801
( STRING ) or NAME . ::: 1801
, NAME : NAME . NAME ::: 1800
True ) ) NEWLINE DEDENT EOS ::: 1800
NAME ( [ NAME ] , ::: 1800
NUMBER ) ) NEWLINE return NAME ::: 1800
( STRING ) ) . NAME ::: 1800
STRING , None ) NEWLINE DEDENT ::: 1799
NAME ( STRING ) ) : ::: 1799
NAME ( STRING ) ) . ::: 1798
as NAME NEWLINE from . import ::: 1798
NUMBER ] ) NEWLINE if NAME ::: 1798
, True ) NEWLINE DEDENT EOS ::: 1798
BOS NEWLINE def NAME ( ** ::: 1797
NAME NEWLINE assert STRING in NAME ::: 1797
NAME import NAME NEWLINE DEDENT from ::: 1796
. NAME ( * NAME . ::: 1796
[ NUMBER ] , STRING : ::: 1795
) NEWLINE DEDENT DEDENT DEDENT NAME ::: 1795
if NAME >= NUMBER : NEWLINE ::: 1794
NAME } ) NEWLINE return NAME ::: 1794
NUMBER ] ) NEWLINE DEDENT return ::: 1792
NEWLINE INDENT NAME -= NUMBER NEWLINE ::: 1792
NAME ( STRING * NUMBER ) ::: 1791
] ) NEWLINE return NAME ( ::: 1791
) : NEWLINE INDENT del NAME ::: 1791
, STRING ) NEWLINE def NAME ::: 1789
NAME = NAME NEWLINE DEDENT elif ::: 1789
NAME . NAME NEWLINE try : ::: 1789
assert not NAME . NAME ( ::: 1789
NUMBER : ] NEWLINE NAME = ::: 1788
= NAME ( ** NAME ) ::: 1788
= [ NAME ( NAME = ::: 1787
- NUMBER ] : NEWLINE INDENT ::: 1787
: STRING } NEWLINE DEDENT EOS ::: 1787
NAME ) == NAME NEWLINE DEDENT ::: 1787
STRING , NAME = STRING STRING ::: 1786
STRING ) , NAME = NUMBER ::: 1786
NAME , ( NAME . NAME ::: 1785
) NEWLINE return NEWLINE DEDENT DEDENT ::: 1785
, * NAME ) NEWLINE DEDENT ::: 1785
NUMBER NEWLINE NAME = - NUMBER ::: 1785
NAME ( ) ; NEWLINE NAME ::: 1785
STRING ) NEWLINE return False NEWLINE ::: 1784
NAME import NAME NEWLINE NAME , ::: 1784
NEWLINE DEDENT if NAME == NAME ::: 1783
NAME ) , NAME NEWLINE DEDENT ::: 1783
[ [ NUMBER , NUMBER ] ::: 1783
NEWLINE NAME = NAME ( { ::: 1783
= NAME + NAME ( NAME ::: 1782
( NAME , NAME , [ ::: 1782
import NAME , NAME NEWLINE if ::: 1782
NAME ( NAME ) / NUMBER ::: 1782
NAME [ NUMBER : - NUMBER ::: 1781
STRING , ] ) NEWLINE EOS ::: 1781
) , NAME ( NAME ( ::: 1780
NEWLINE from . import NAME as ::: 1780
NUMBER ] + STRING + NAME ::: 1780
, NAME ] NEWLINE DEDENT EOS ::: 1780
STRING NEWLINE if NAME in NAME ::: 1780
NEWLINE INDENT yield NAME ( NAME ::: 1780
. NAME import * NEWLINE DEDENT ::: 1779
( NAME , [ ] ) ::: 1779
NEWLINE DEDENT elif STRING in NAME ::: 1778
INDENT NAME += STRING + NAME ::: 1777
NAME [ NAME + NUMBER : ::: 1776
, STRING : STRING } ] ::: 1776
True , NAME = NAME ) ::: 1776
None , NAME = STRING , ::: 1775
( [ [ NUMBER , NUMBER ::: 1775
STRING in NAME . NAME NEWLINE ::: 1775
return STRING NEWLINE DEDENT NAME = ::: 1775
NAME = - NUMBER , NAME ::: 1775
, STRING ] NEWLINE DEDENT DEDENT ::: 1775
NAME == NAME . NAME ( ::: 1775
= NAME . NAME NEWLINE def ::: 1774
( NAME ) ) for NAME ::: 1773
NEWLINE DEDENT DEDENT if NAME : ::: 1772
NEWLINE NAME = [ NUMBER ] ::: 1772
NAME ) NEWLINE if NAME [ ::: 1771
[ NAME . NAME ] . ::: 1771
= True ) . NAME ( ::: 1771
= STRING , ) NEWLINE NAME ::: 1770
, NAME ) , NAME . ::: 1770
= NAME . NAME , ) ::: 1769
STRING ] , NUMBER ) NEWLINE ::: 1769
else : NEWLINE INDENT return True ::: 1768
NUMBER ) NEWLINE NAME ( NUMBER ::: 1768
= { STRING : ( STRING ::: 1767
. NAME , STRING ) , ::: 1767
INDENT pass NEWLINE DEDENT return NAME ::: 1766
( STRING , NAME ) ] ::: 1766
== NUMBER NEWLINE NAME = NAME ::: 1766
NAME ) NEWLINE raise NAME ( ::: 1766
[ STRING , STRING ] } ::: 1766
if NAME . NAME != STRING ::: 1765
while True : NEWLINE INDENT try ::: 1765
NAME , STRING , False ) ::: 1765
if NAME <= NUMBER : NEWLINE ::: 1764
, ( NAME , ) ) ::: 1763
( NAME + STRING , NAME ::: 1763
NAME ) NEWLINE if NAME > ::: 1762
% ( NAME [ STRING ] ::: 1762
INDENT STRING NEWLINE assert NAME ( ::: 1761
NAME . NAME not in NAME ::: 1761
NUMBER NEWLINE NAME = ( NAME ::: 1761
[ NUMBER ] NEWLINE DEDENT except ::: 1760
STRING ] = True NEWLINE NAME ::: 1759
STRING , STRING ) ] , ::: 1758
. NAME ( [ NAME [ ::: 1758
) NEWLINE pass NEWLINE DEDENT EOS ::: 1758
NAME = False ) NEWLINE EOS ::: 1757
) NEWLINE DEDENT NAME = { ::: 1757
} ) NEWLINE DEDENT return NAME ::: 1757
( * NAME ) NEWLINE NAME ::: 1756
( ( STRING , NUMBER ) ::: 1755
, NUMBER ) NEWLINE assert NAME ::: 1754
= { STRING : NUMBER } ::: 1754
] , NAME . NAME . ::: 1754
= False NEWLINE DEDENT DEDENT EOS ::: 1753
{ STRING : NAME ( STRING ::: 1753
import NAME , NAME as NAME ::: 1752
= { } NEWLINE DEDENT NAME ::: 1752
( ( NAME - NAME ) ::: 1752
if not NAME ( NAME . ::: 1752
) , NAME ) NEWLINE return ::: 1751
NUMBER , NUMBER : NUMBER , ::: 1751
NAME = STRING ) NEWLINE for ::: 1750
= NAME NEWLINE NAME = { ::: 1750
NAME ) NEWLINE if NAME in ::: 1749
. NAME ) , NAME ) ::: 1749
NEWLINE break NEWLINE DEDENT DEDENT DEDENT ::: 1748
[ ] ) NEWLINE DEDENT EOS ::: 1748
NAME ( { STRING : NUMBER ::: 1748
INDENT return NAME ( * NAME ::: 1748
= - NUMBER , NAME = ::: 1748
= NAME ( NAME ) - ::: 1747
NEWLINE INDENT NAME = ( ( ::: 1747
NUMBER , NUMBER ) ) , ::: 1747
NAME ) , ] NEWLINE EOS ::: 1747
NEWLINE import NAME NEWLINE for NAME ::: 1746
True ) NEWLINE NAME ( NAME ::: 1745
, STRING ) NEWLINE try : ::: 1745
NEWLINE del NAME . NAME [ ::: 1745
NAME ( NUMBER ) NEWLINE assert ::: 1745
] NEWLINE with NAME ( NAME ::: 1745
if NAME . NAME > NUMBER ::: 1745
: NAME } NEWLINE NAME . ::: 1744
None , NAME = NUMBER ) ::: 1744
. NAME ] = NAME . ::: 1743
) NEWLINE NAME = [ NUMBER ::: 1743
) in NAME . NAME ( ::: 1743
return [ NAME ] NEWLINE DEDENT ::: 1743
NEWLINE if NAME != NAME : ::: 1743
STRING : NEWLINE INDENT NAME [ ::: 1742
: NUMBER ] NEWLINE NAME = ::: 1742
INDENT if NAME . NAME in ::: 1742
% NAME ( NAME . NAME ::: 1741
] [ NAME ] NEWLINE DEDENT ::: 1741
INDENT return NAME ( NAME [ ::: 1740
= STRING ) NEWLINE for NAME ::: 1740
... NAME . NAME import NAME ::: 1739
NUMBER : NEWLINE INDENT break NEWLINE ::: 1739
, STRING ) ] , NAME ::: 1739
. NAME NEWLINE if NAME == ::: 1739
NAME ) NEWLINE return False NEWLINE ::: 1738
elif NAME . NAME . NAME ::: 1738
True , NAME = [ STRING ::: 1738
DEDENT DEDENT DEDENT DEDENT DEDENT EOS ::: 1737
( NAME ) NEWLINE return NEWLINE ::: 1737
NAME , NUMBER , STRING ) ::: 1737
+ STRING ) NEWLINE DEDENT NAME ::: 1736
[ STRING ] } , NAME ::: 1736
STRING + NAME ( NAME ( ::: 1736
( STRING * NUMBER ) NEWLINE ::: 1736
raise NAME ( NAME ( STRING ::: 1735
) - NAME . NAME ( ::: 1735
= NUMBER NEWLINE NAME ( NAME ::: 1735
, NAME , ) NEWLINE NAME ::: 1734
NUMBER , NAME , NAME ) ::: 1734
. NAME ( NAME ) ; ::: 1733
NUMBER NEWLINE NAME = NAME [ ::: 1732
NEWLINE NAME += NUMBER NEWLINE NAME ::: 1732
STRING % NAME [ STRING ] ::: 1731
( ) , ) NEWLINE NAME ::: 1729
) [ NAME ] , NAME ::: 1729
> NUMBER ) : NEWLINE INDENT ::: 1729
= NAME [ - NUMBER ] ::: 1728
NAME . NAME , ( NAME ::: 1728
NEWLINE INDENT continue NEWLINE DEDENT if ::: 1728
INDENT return NAME NEWLINE DEDENT def ::: 1727
True ) : NEWLINE INDENT if ::: 1727
NAME ) NEWLINE return { STRING ::: 1727
NAME ) ) ) NEWLINE return ::: 1726
DEDENT NAME ( STRING . NAME ::: 1725
+ NAME NEWLINE DEDENT return NAME ::: 1725
% NAME NEWLINE NAME . NAME ::: 1724
) NEWLINE del NAME . NAME ::: 1723
NAME NEWLINE for NAME , NAME ::: 1723
while NUMBER : NEWLINE INDENT NAME ::: 1721
DEDENT elif NAME . NAME . ::: 1721
NAME } NEWLINE DEDENT DEDENT EOS ::: 1721
| NAME . NAME ) NEWLINE ::: 1721
NAME ( ) NEWLINE while NAME ::: 1720
INDENT @ NAME . NAME ( ::: 1720
NAME ) NEWLINE if NAME < ::: 1720
, ) ) NEWLINE DEDENT EOS ::: 1719
: STRING } , } NEWLINE ::: 1719
( ) [ STRING ] NEWLINE ::: 1718
NAME ) NEWLINE DEDENT if not ::: 1718
STRING , False ) NEWLINE NAME ::: 1718
( ) [ NAME ] , ::: 1717
) == NAME . NAME ( ::: 1717
. NAME ( [ [ NUMBER ::: 1717
] , STRING : STRING } ::: 1716
NUMBER ] . NAME ) NEWLINE ::: 1716
NAME = NAME ) NEWLINE for ::: 1716
NAME [ : NUMBER ] ) ::: 1716
) [ STRING ] NEWLINE NAME ::: 1716
not None : NEWLINE INDENT if ::: 1715
NAME ( STRING ) and NAME ::: 1715
: [ { STRING : STRING ::: 1715
None NEWLINE DEDENT return NAME . ::: 1714
NAME [ NAME [ NAME ] ::: 1714
yield NAME . NAME . NAME ::: 1714
NAME , True ) NEWLINE DEDENT ::: 1714
STRING ] ) . NAME ( ::: 1714
in NAME [ NUMBER : ] ::: 1713
INDENT yield NAME . NAME ( ::: 1713
( NAME = True ) , ::: 1713
NAME ] += NUMBER NEWLINE DEDENT ::: 1712
, NAME : NAME ) -> ::: 1712
NAME ( None ) NEWLINE DEDENT ::: 1712
STRING ] ) NEWLINE DEDENT return ::: 1711
NUMBER , NUMBER ) ] NEWLINE ::: 1710
NUMBER ) ) , ( STRING ::: 1710
NAME = NAME [ NAME : ::: 1709
= NUMBER NEWLINE NAME = True ::: 1708
* NAME . NAME . NAME ::: 1708
, - NUMBER ) NEWLINE NAME ::: 1708
NAME . NAME ( { } ::: 1708
NAME ( NAME ) == STRING ::: 1707
False NEWLINE DEDENT return NAME . ::: 1707
STRING : { STRING : [ ::: 1707
* NAME ) NEWLINE DEDENT DEDENT ::: 1706
( NAME . NAME ) [ ::: 1705
return STRING NEWLINE DEDENT if NAME ::: 1705
] NEWLINE if NAME == STRING ::: 1705
STRING NEWLINE class NAME : NEWLINE ::: 1704
) + STRING + NAME . ::: 1704
STRING , STRING : NAME } ::: 1704
NUMBER , NUMBER ) ) ) ::: 1704
. NAME ( NUMBER * NAME ::: 1703
in NAME ( ) : NEWLINE ::: 1703
, NAME , NAME , NUMBER ::: 1702
@ NAME ( STRING ) NEWLINE ::: 1702
, NAME = False ) ) ::: 1702
% NAME . NAME ( NAME ::: 1701
INDENT if NAME < NUMBER : ::: 1701
: False , STRING : False ::: 1700
- NUMBER NEWLINE NAME = NAME ::: 1700
NUMBER ] ) NEWLINE DEDENT else ::: 1700
= NUMBER , NAME = [ ::: 1700
STRING ) NEWLINE DEDENT if not ::: 1700
NAME , NAME ( ) . ::: 1699
NAME ) == NUMBER NEWLINE DEDENT ::: 1699
, NUMBER ] NEWLINE NAME . ::: 1699
= NAME + NAME NEWLINE DEDENT ::: 1698
= NAME ) NEWLINE for NAME ::: 1698
, STRING , None , NAME ::: 1698
NAME ) NEWLINE DEDENT except ( ::: 1698
) ) NEWLINE NAME , NAME ::: 1697
STRING ] ) NEWLINE DEDENT NAME ::: 1695
NAME ( STRING STRING STRING ) ::: 1695
NAME ( NUMBER ) ) ) ::: 1695
STRING ] NEWLINE DEDENT return NAME ::: 1695
( [ NAME , NAME , ::: 1695
= STRING NEWLINE for NAME , ::: 1694
None NEWLINE try : NEWLINE INDENT ::: 1694
return { STRING : NAME } ::: 1692
+= NUMBER NEWLINE NAME = NAME ::: 1692
NAME = ( NAME + NAME ::: 1692
STRING , STRING ] ) , ::: 1691
NAME += STRING % ( NAME ::: 1691
. NAME , STRING ) : ::: 1691
NAME == NUMBER ) : NEWLINE ::: 1691
. NAME . NAME ( None ::: 1690
NEWLINE for NAME in [ STRING ::: 1690
NAME + NAME ) NEWLINE NAME ::: 1690
] , NUMBER ) NEWLINE DEDENT ::: 1690
NAME in NAME ( NAME + ::: 1690
STRING : NAME , } ) ::: 1689
= NUMBER * NAME . NAME ::: 1688
) NEWLINE raise NAME ( STRING ::: 1688
NEWLINE NAME = [ { STRING ::: 1688
NEWLINE while NUMBER : NEWLINE INDENT ::: 1687
NEWLINE assert NAME ( NAME ( ::: 1687
NUMBER ] NEWLINE NAME = NUMBER ::: 1687
] = NAME ( ) NEWLINE ::: 1686
STRING % ( NAME [ STRING ::: 1686
: NEWLINE INDENT return NAME , ::: 1686
( NUMBER ) NEWLINE DEDENT return ::: 1686
( STRING STRING . NAME ( ::: 1686
INDENT NAME [ NAME ] . ::: 1685
NEWLINE return False NEWLINE DEDENT EOS ::: 1685
] , NAME ) ) NEWLINE ::: 1685
) NEWLINE return STRING % ( ::: 1685
NAME NEWLINE DEDENT NAME = STRING ::: 1684
NAME , True ) NEWLINE NAME ::: 1684
[ NAME ] , NAME . ::: 1683
= NAME [ NUMBER ] , ::: 1683
) NEWLINE DEDENT return ( NAME ::: 1683
) NEWLINE from NAME import * ::: 1683
import NAME NEWLINE DEDENT else : ::: 1683
STRING , NAME = [ ] ::: 1682
] NEWLINE NAME = { } ::: 1682
. NAME ( NAME + NUMBER ::: 1682
NAME : NAME ( NAME , ::: 1681
) ) NEWLINE if NAME ( ::: 1681
. NAME , NAME [ STRING ::: 1680
) , ( NAME , NAME ::: 1680
NEWLINE INDENT if NAME % NAME ::: 1680
( ) NEWLINE DEDENT DEDENT return ::: 1680
= NAME ( NAME + STRING ::: 1678
= NUMBER NEWLINE DEDENT return NAME ::: 1678
NAME = STRING ) NEWLINE assert ::: 1678
, False ) : NEWLINE INDENT ::: 1678
NAME = [ ( NUMBER , ::: 1678
STRING : NEWLINE INDENT return True ::: 1677
, NAME = NAME ( NUMBER ::: 1677
: STRING , } ) NEWLINE ::: 1677
( NAME , True ) NEWLINE ::: 1677
assert NAME ( STRING ) == ::: 1676
STRING ) ] NEWLINE DEDENT EOS ::: 1676
( NAME , [ STRING , ::: 1675
NAME - NAME . NAME NEWLINE ::: 1675
NAME ) == NAME . NAME ::: 1675
) NEWLINE DEDENT DEDENT except : ::: 1674
NAME NEWLINE with NAME . NAME ::: 1674
STRING : STRING } ) ) ::: 1673
in NAME ] ) NEWLINE NAME ::: 1673
STRING + NAME ( NAME [ ::: 1673
in NAME ) NEWLINE NAME . ::: 1673
( ) ) NEWLINE DEDENT else ::: 1672
NEWLINE assert NAME == STRING NEWLINE ::: 1672
NAME ( ** NAME . NAME ::: 1671
[ STRING ] = False NEWLINE ::: 1671
if NAME . NAME != NUMBER ::: 1671
NAME ( NAME , { } ::: 1671
: NUMBER } ) NEWLINE NAME ::: 1670
NAME ( ) ) ) ) ::: 1670
. NAME [ NAME ] : ::: 1669
= NAME ( ) NEWLINE with ::: 1668
NEWLINE INDENT STRING NEWLINE if ( ::: 1668
NAME . NAME = [ NUMBER ::: 1668
( ) + NAME . NAME ::: 1667
: NAME [ STRING ] } ::: 1667
return NAME ( NAME [ NUMBER ::: 1667
NAME ( ) + NAME . ::: 1667
NAME = True , ) NEWLINE ::: 1666
] NEWLINE NAME = STRING . ::: 1665
. NAME , NAME = [ ::: 1664
True : NEWLINE INDENT NAME ( ::: 1663
, NUMBER , NAME = NUMBER ::: 1663
. NAME < NAME . NAME ::: 1663
[ NAME [ NAME ] ] ::: 1662
NAME . NAME ( ) * ::: 1661
NEWLINE INDENT raise NEWLINE DEDENT DEDENT ::: 1661
) for NAME in NAME [ ::: 1660
NEWLINE NAME = ( NAME - ::: 1660
% ( NAME , ) ) ::: 1660
INDENT NAME . NAME = ( ::: 1659
] ) , NAME . NAME ::: 1658
. NAME NEWLINE NAME = { ::: 1657
NAME . NAME [ : ] ::: 1657
NAME ( NAME ) ) [ ::: 1656
. NAME and not NAME . ::: 1656
STRING , [ STRING ] , ::: 1656
NAME . NAME [ NAME [ ::: 1655
NAME . NAME ) < NUMBER ::: 1655
. NAME ) NEWLINE DEDENT elif ::: 1655
NAME = NUMBER * NAME . ::: 1654
: STRING , } } NEWLINE ::: 1654
( None , NAME . NAME ::: 1654
NUMBER ] . NAME . NAME ::: 1653
, STRING ) ) NEWLINE from ::: 1653
[ ] NEWLINE def NAME ( ::: 1652
NAME + NUMBER NEWLINE NAME = ::: 1652
) ) , NUMBER ) NEWLINE ::: 1652
NAME , NAME ) NEWLINE try ::: 1651
False NEWLINE NAME . NAME . ::: 1651
NEWLINE import NAME NEWLINE with NAME ::: 1651
NUMBER NEWLINE NAME = NUMBER * ::: 1651
( NAME ) + NAME ( ::: 1651
INDENT NAME = NAME - NAME ::: 1650
NAME ) == NUMBER NEWLINE assert ::: 1650
+= NAME ( NAME . NAME ::: 1649
= [ ] NEWLINE DEDENT DEDENT ::: 1648
, NAME ] , NAME = ::: 1648
NAME = [ NAME [ NUMBER ::: 1648
< NAME ( NAME ) : ::: 1648
[ NAME : NAME + NAME ::: 1647
NAME , NAME = - NUMBER ::: 1647
try : NEWLINE INDENT from . ::: 1646
. import NAME , NAME , ::: 1646
, NUMBER ) [ NUMBER ] ::: 1645
= True NEWLINE DEDENT else : ::: 1645
+ NAME + STRING NEWLINE DEDENT ::: 1645
NAME . NAME ( { NAME ::: 1645
NAME - NAME . NAME ( ::: 1644
) ) NEWLINE return NEWLINE DEDENT ::: 1644
] [ STRING ] . NAME ::: 1643
NAME , NAME : NAME . ::: 1643
) ) NEWLINE NAME = ( ::: 1643
DEDENT return NAME [ NAME ] ::: 1643
NAME ( ) NEWLINE if ( ::: 1643
None , NAME = True ) ::: 1642
== NUMBER : NEWLINE INDENT raise ::: 1641
STRING NEWLINE DEDENT elif NAME . ::: 1641
) NEWLINE if NAME != NUMBER ::: 1641
BOS NEWLINE import NAME NEWLINE try ::: 1641
( NAME ) ) + STRING ::: 1640
] NEWLINE DEDENT return NAME . ::: 1639
NAME in NAME ) NEWLINE NAME ::: 1639
NAME ( ( STRING , NUMBER ::: 1638
NAME ) NEWLINE if NAME and ::: 1638
None , STRING : None , ::: 1638
STRING , STRING ] NEWLINE from ::: 1636
NAME . NAME < NAME . ::: 1635
STRING , None , NAME . ::: 1635
) NEWLINE if NAME > NAME ::: 1634
NEWLINE NAME = ( ) NEWLINE ::: 1634
( NAME [ : - NUMBER ::: 1633
( NAME ( STRING ) . ::: 1633
NAME NEWLINE if NAME is not ::: 1633
NUMBER ] [ STRING ] NEWLINE ::: 1632
STRING ] NEWLINE return NAME NEWLINE ::: 1632
DEDENT try : NEWLINE INDENT return ::: 1631
NEWLINE INDENT if NAME != NAME ::: 1631
NAME = STRING , ** NAME ::: 1631
NAME : NEWLINE INDENT return ( ::: 1630
NAME ( NAME , False ) ::: 1630
DEDENT return { STRING : NAME ::: 1629
- NUMBER , NUMBER ) NEWLINE ::: 1629
INDENT if NAME % NUMBER == ::: 1628
NAME [ : NUMBER ] NEWLINE ::: 1628
= None NEWLINE try : NEWLINE ::: 1628
NAME = None NEWLINE try : ::: 1627
!= NUMBER : NEWLINE INDENT return ::: 1627
NAME , NAME . NAME + ::: 1627
, NAME ) [ NUMBER ] ::: 1626
) ) NEWLINE NAME [ STRING ::: 1626
NAME . NAME + NUMBER ) ::: 1626
INDENT NAME ( STRING , STRING ::: 1626
NAME [ STRING ] ) : ::: 1625
INDENT continue NEWLINE DEDENT NAME . ::: 1625
= [ ] NEWLINE def NAME ::: 1624
NAME , NUMBER , NAME ) ::: 1624
INDENT NAME = STRING NEWLINE return ::: 1624
; NEWLINE NAME . NAME = ::: 1624
del NAME [ NAME ] NEWLINE ::: 1624
) ) NEWLINE DEDENT for NAME ::: 1622
= NAME . NAME - NAME ::: 1622
NEWLINE return NAME ( * NAME ::: 1622
) NEWLINE return NAME [ NAME ::: 1622
NAME += NAME ( NAME . ::: 1621
= [ NAME [ NUMBER ] ::: 1621
( NAME , ) NEWLINE DEDENT ::: 1621
== None : NEWLINE INDENT return ::: 1621
) NEWLINE return NAME [ STRING ::: 1620
. NAME ( ) and NAME ::: 1620
NEWLINE global NAME NEWLINE global NAME ::: 1620
= NUMBER NEWLINE NAME [ STRING ::: 1620
True ) , NAME = True ::: 1620
NAME ( NAME ) > NAME ::: 1620
STRING NEWLINE NAME ( STRING , ::: 1620
( ) , NAME , NAME ::: 1619
- NUMBER ) NEWLINE DEDENT DEDENT ::: 1619
DEDENT DEDENT DEDENT NAME . NAME ::: 1618
= STRING NEWLINE NAME ( STRING ::: 1617
STRING ) [ NUMBER ] ) ::: 1617
NAME = [ ] NEWLINE def ::: 1617
( STRING , ) NEWLINE EOS ::: 1617
NAME . NAME == STRING ) ::: 1617
INDENT try : NEWLINE INDENT import ::: 1616
, STRING ) NEWLINE if not ::: 1616
NAME NEWLINE DEDENT from NAME import ::: 1614
return NAME ( NAME , * ::: 1614
NAME = STRING ) NEWLINE if ::: 1614
= NAME NEWLINE if NAME : ::: 1614
STRING % ( NAME ) NEWLINE ::: 1614
( NAME [ NAME . NAME ::: 1614
NAME = None NEWLINE DEDENT return ::: 1613
( NAME . NAME * NAME ::: 1613
] NEWLINE NAME ( NAME = ::: 1613
lambda : NAME . NAME ( ::: 1613
!= STRING : NEWLINE INDENT return ::: 1612
NAME [ NUMBER ] ] NEWLINE ::: 1611
= NUMBER NEWLINE NAME = False ::: 1610
( NAME ) NEWLINE if ( ::: 1609
( ) NEWLINE DEDENT @ NAME ::: 1609
. NAME NEWLINE if NAME : ::: 1609
NAME ( NAME , STRING . ::: 1608
NUMBER , NUMBER ) , NUMBER ::: 1607
if ( NAME ( NAME ) ::: 1607
: NAME , } ) NEWLINE ::: 1605
NEWLINE del NAME . NAME NEWLINE ::: 1605
, NAME ) ) NEWLINE EOS ::: 1604
] NEWLINE NAME = ( STRING ::: 1604
. NAME , ** NAME ) ::: 1604
) ) NEWLINE for NAME , ::: 1603
NAME * NAME . NAME NEWLINE ::: 1603
NAME , [ STRING ] ) ::: 1602
NEWLINE NAME = ( STRING ) ::: 1602
NAME . NAME ) != NUMBER ::: 1602
STRING NEWLINE return STRING NEWLINE DEDENT ::: 1602
] NEWLINE NAME = NAME + ::: 1601
NAME , None ) NEWLINE if ::: 1601
NAME ) if NAME . NAME ::: 1601
NAME += NAME NEWLINE DEDENT return ::: 1600
NAME NEWLINE NAME = [ ( ::: 1600
NAME [ NAME : NAME ] ::: 1600
NAME , NAME ( NAME ( ::: 1600
NUMBER NEWLINE assert NAME ( NAME ::: 1599
, STRING , STRING ) ] ::: 1599
NAME ) NEWLINE DEDENT return STRING ::: 1598
NAME ) ] NEWLINE NAME . ::: 1598
NAME . NAME . NAME is ::: 1597
NAME NEWLINE NAME = NAME * ::: 1597
) and not NAME . NAME ::: 1596
NUMBER ] ) , NAME ( ::: 1596
NAME NEWLINE global NAME NEWLINE NAME ::: 1596
NAME NEWLINE NAME ( NAME ( ::: 1596
NAME . NAME , STRING % ::: 1596
NAME . NAME ( ) in ::: 1596
= STRING NEWLINE NAME += STRING ::: 1595
( NAME - NAME ) ) ::: 1595
DEDENT NAME ( NAME ( NAME ::: 1595
NAME ( ) NEWLINE DEDENT @ ::: 1595
NAME . NAME ( NAME == ::: 1595
STRING ] NEWLINE import NAME NEWLINE ::: 1595
None NEWLINE DEDENT NAME . NAME ::: 1595
. NAME ( ) , ) ::: 1595
= NAME NEWLINE DEDENT DEDENT NAME ::: 1594
, NUMBER ) , NUMBER ) ::: 1594
NEWLINE if ( NAME ( NAME ::: 1594
= True NEWLINE NAME = [ ::: 1594
+= NUMBER NEWLINE DEDENT DEDENT DEDENT ::: 1593
( NAME , ) NEWLINE NAME ::: 1593
, NAME , { STRING : ::: 1593
NEWLINE if NAME < NAME : ::: 1592
[ NAME , NAME ] , ::: 1592
( NAME - NAME . NAME ::: 1592
= lambda NAME : NAME ( ::: 1591
. NAME [ NUMBER ] + ::: 1590
NAME ( NAME ) < NAME ::: 1590
NAME = yield NAME . NAME ::: 1590
STRING , ( ( STRING , ::: 1590
[ NAME . NAME ] [ ::: 1589
NUMBER ] ] ) NEWLINE NAME ::: 1589
] ) ) NEWLINE NAME ( ::: 1589
[ ] , NAME = [ ::: 1589
. NAME , NUMBER , NUMBER ::: 1589
, NAME = - NUMBER , ::: 1588
( ) NEWLINE class NAME : ::: 1587
, NUMBER ) ] NEWLINE NAME ::: 1586
BOS NEWLINE NAME = { STRING ::: 1586
NEWLINE with NAME . NAME . ::: 1586
. NAME ( NAME ) if ::: 1585
* NAME . NAME NEWLINE NAME ::: 1585
return True NEWLINE DEDENT except NAME ::: 1585
= NUMBER NEWLINE NAME = { ::: 1585
NAME , STRING , NAME ( ::: 1585
NAME ( NAME ) -> NAME ::: 1584
= - NUMBER NEWLINE NAME . ::: 1584
- NUMBER ] NEWLINE DEDENT EOS ::: 1584
= STRING , ** NAME ) ::: 1584
DEDENT DEDENT return NAME , NAME ::: 1584
[ NUMBER : NUMBER ] NEWLINE ::: 1584
] . NAME ( NAME , ::: 1584
( ) ] ) NEWLINE DEDENT ::: 1583
NAME ( STRING ) % NAME ::: 1583
NAME ] [ NUMBER ] NEWLINE ::: 1583
] , STRING : NAME . ::: 1583
NAME . NAME -= NUMBER NEWLINE ::: 1583
return NAME ( NAME ) . ::: 1582
NUMBER : NEWLINE INDENT return NEWLINE ::: 1582
, [ NAME . NAME ( ::: 1582
, NAME ( NAME ) - ::: 1581
. NAME , NAME ( STRING ::: 1580
} NEWLINE if NAME . NAME ::: 1580
, { } ) NEWLINE DEDENT ::: 1580
, NAME . NAME ( [ ::: 1579
] [ NUMBER ] , NAME ::: 1579
as NAME NEWLINE import NAME , ::: 1579
( NAME , STRING , False ::: 1579
if NAME != NAME . NAME ::: 1578
= NAME ) NEWLINE DEDENT def ::: 1578
[ STRING ] , [ STRING ::: 1578
NAME : NAME [ NUMBER ] ::: 1578
NAME = True ) NEWLINE if ::: 1577
STRING , True ) NEWLINE NAME ::: 1577
STRING + NAME + STRING , ::: 1577
None NEWLINE if NAME . NAME ::: 1577
NUMBER ) NEWLINE DEDENT NAME ( ::: 1576
NEWLINE NAME = NAME / NUMBER ::: 1576
DEDENT NAME = NAME NEWLINE DEDENT ::: 1575
return False NEWLINE DEDENT DEDENT DEDENT ::: 1575
) NEWLINE if ( NAME . ::: 1575
( ( STRING , STRING , ::: 1575
INDENT raise NAME ( NAME . ::: 1575
NAME NEWLINE DEDENT elif NAME ( ::: 1575
NEWLINE return [ NAME ( NAME ::: 1574
NAME = NAME ( [ NUMBER ::: 1574
= [ NAME ( ) ] ::: 1574
/ NAME . NAME ( NAME ::: 1574
STRING , STRING ) NEWLINE assert ::: 1573
** NAME ) NEWLINE DEDENT except ::: 1573
NEWLINE assert NAME . NAME NEWLINE ::: 1573
NEWLINE INDENT NAME . NAME , ::: 1572
STRING in NAME . NAME . ::: 1572
: ] NEWLINE NAME . NAME ::: 1571
NUMBER , STRING : STRING } ::: 1571
( NAME * NAME ) NEWLINE ::: 1571
NAME = NAME , NAME NEWLINE ::: 1570
) ) , NAME ) NEWLINE ::: 1570
) ( NAME = True , ::: 1570
NAME ( NAME ) : return ::: 1569
. NAME ( NAME , False ::: 1569
. NAME = NAME [ NAME ::: 1569
None , NAME = NUMBER , ::: 1569
NUMBER ] , STRING : NAME ::: 1569
NEWLINE NAME = NAME NEWLINE while ::: 1569
[ NAME [ STRING ] for ::: 1568
STRING ) , } NEWLINE DEDENT ::: 1568
STRING , ( STRING , NAME ::: 1568
] NEWLINE assert NAME . NAME ::: 1568
NAME , [ NAME . NAME ::: 1567
, NAME = STRING . NAME ::: 1567
NAME ( STRING , ( ( ::: 1567
( STRING ) , STRING , ::: 1565
NAME ( NAME ) } NEWLINE ::: 1565
INDENT return NUMBER NEWLINE DEDENT elif ::: 1565
else : NEWLINE INDENT return [ ::: 1563
= NUMBER ) ) , ( ::: 1563
NAME / NUMBER NEWLINE NAME = ::: 1562
> NAME : NEWLINE INDENT return ::: 1562
[ NUMBER ] ) NEWLINE if ::: 1562
) ) , ) ) NEWLINE ::: 1562
NAME = [ ( NAME , ::: 1561
NAME . NAME , [ STRING ::: 1560
] ] NEWLINE NAME = NAME ::: 1560
NEWLINE STRING NEWLINE try : NEWLINE ::: 1559
= NAME ( NAME = False ::: 1559
= STRING . NAME ( ) ::: 1558
NAME NEWLINE with NAME ( NAME ::: 1558
NAME ) NEWLINE break NEWLINE DEDENT ::: 1558
NAME ) ) [ NUMBER ] ::: 1558
] ) ) NEWLINE DEDENT return ::: 1558
NAME NEWLINE @ NAME NEWLINE def ::: 1558
NEWLINE while NAME ( NAME ) ::: 1557
STRING ] [ NUMBER ] NEWLINE ::: 1557
NAME ( NUMBER ) , NUMBER ::: 1556
( STRING , ( ( STRING ::: 1556
NUMBER ] = NUMBER NEWLINE NAME ::: 1556
) NEWLINE assert NAME [ STRING ::: 1555
( STRING ) ] ) NEWLINE ::: 1555
, ) ) NEWLINE NAME = ::: 1555
NAME ( NAME [ : - ::: 1555
. NAME ) NEWLINE with NAME ::: 1554
NAME = NAME [ : , ::: 1553
NUMBER NEWLINE NAME . NAME [ ::: 1552
NAME ( None , NAME . ::: 1552
NUMBER ) ] ) NEWLINE NAME ::: 1551
NAME . NAME ( - NAME ::: 1551
STRING ) , NUMBER ) NEWLINE ::: 1551
< ( NUMBER , NUMBER ) ::: 1551
, ( ( STRING , NAME ::: 1551
= [ ] NEWLINE DEDENT NAME ::: 1551
NEWLINE NAME . NAME ( - ::: 1550
NUMBER ] + NAME [ NUMBER ::: 1550
NAME [ : NAME ] NEWLINE ::: 1550
NAME ( NAME ) NEWLINE raise ::: 1550
INDENT @ NAME ( NAME ) ::: 1549
NAME . NAME ( ) is ::: 1549
INDENT return True NEWLINE DEDENT NAME ::: 1549
NAME . NAME < ( NUMBER ::: 1548
NAME = NAME + NAME + ::: 1548
NUMBER NEWLINE return NAME . NAME ::: 1548
* ( NAME - NAME ) ::: 1548
NEWLINE INDENT NAME = NAME or ::: 1547
NAME += NAME NEWLINE DEDENT NAME ::: 1546
[ NUMBER ] . NAME . ::: 1546
INDENT NAME . NAME , NAME ::: 1546
NEWLINE DEDENT DEDENT raise NAME ( ::: 1545
. NAME ( STRING ) ; ::: 1545
. NAME < ( NUMBER , ::: 1545
) ) ) ) NEWLINE NAME ::: 1545
, - NUMBER ) : NEWLINE ::: 1544
NUMBER ] [ NUMBER ] ) ::: 1544
} , } NEWLINE def NAME ::: 1544
NUMBER NEWLINE DEDENT NAME ( NAME ::: 1543
NEWLINE INDENT NAME = NAME / ::: 1542
STRING ) NEWLINE class NAME : ::: 1542
. NAME . NAME ) . ::: 1542
NEWLINE DEDENT if NAME in NAME ::: 1542
, NAME ) = NAME ( ::: 1542
return None NEWLINE DEDENT else : ::: 1541
NAME . NAME ) + NAME ::: 1541
+= NAME NEWLINE DEDENT return NAME ::: 1541
) == NAME NEWLINE DEDENT EOS ::: 1541
[ STRING ] NEWLINE def NAME ::: 1540
= NAME ( STRING . NAME ::: 1539
in NAME ( NAME + NUMBER ::: 1539
) >= NUMBER : NEWLINE INDENT ::: 1539
NAME > NAME . NAME : ::: 1539
NAME ( NAME : NAME ) ::: 1539
: True , STRING : True ::: 1539
( STRING ) NEWLINE raise NAME ::: 1539
return NAME . NAME ( * ::: 1539
NAME NEWLINE NAME = ( NUMBER ::: 1538
( - NUMBER ) NEWLINE DEDENT ::: 1537
return ( NAME , NAME , ::: 1537
STRING : ( STRING , ) ::: 1536
) . NAME ( ) == ::: 1536
NAME import NAME , NAME as ::: 1535
if NAME . NAME not in ::: 1534
. NAME NEWLINE NAME ( STRING ::: 1534
. NAME . NAME == NUMBER ::: 1534
NAME ) NEWLINE NAME += STRING ::: 1534
INDENT return None NEWLINE DEDENT if ::: 1533
import * NEWLINE import NAME as ::: 1533
* NEWLINE import NAME as NAME ::: 1533
: NEWLINE INDENT return { } ::: 1533
, NUMBER ] ] ) NEWLINE ::: 1533
= NAME NEWLINE return NAME . ::: 1533
NAME ] NEWLINE NAME ( NAME ::: 1532
NAME ( STRING + NAME , ::: 1532
) ) NEWLINE assert NAME ( ::: 1532
NEWLINE INDENT NAME ( NAME + ::: 1532
= None NEWLINE NAME = STRING ::: 1531
NAME [ STRING ] , NUMBER ::: 1531
INDENT NAME = ( NAME , ::: 1531
NAME ] NEWLINE return NAME ( ::: 1531
NAME . NAME ) NEWLINE with ::: 1530
NUMBER for NAME in NAME ( ::: 1530
( STRING . NAME ( [ ::: 1530
, NAME ) in NAME ( ::: 1530
STRING , NAME ( NAME = ::: 1529
) NEWLINE raise NAME . NAME ::: 1529
NAME ( STRING in NAME . ::: 1529
NAME = STRING NEWLINE DEDENT if ::: 1529
NAME < ( NUMBER , NUMBER ::: 1528
( STRING . NAME ( STRING ::: 1528
NAME ( NUMBER ) , STRING ::: 1528
NAME [ NUMBER ] = NUMBER ::: 1528
NUMBER ] = NAME . NAME ::: 1527
INDENT NAME += STRING % NAME ::: 1527
= NAME [ NAME ] . ::: 1527
NAME . NAME ) [ NUMBER ::: 1526
( NAME , STRING ) and ::: 1525
) NEWLINE assert ( NAME . ::: 1525
NAME ) ] ) NEWLINE NAME ::: 1525
NAME , ) NEWLINE NAME . ::: 1525
NAME ( NAME for NAME in ::: 1525
NAME . NAME = NAME + ::: 1525
= STRING NEWLINE @ NAME NEWLINE ::: 1524
STRING + NAME . NAME [ ::: 1522
STRING NEWLINE if NAME not in ::: 1522
NAME = NAME * NUMBER NEWLINE ::: 1522
. NAME , NAME ) , ::: 1521
NAME + NUMBER , NAME ) ::: 1521
NEWLINE INDENT if NAME < NAME ::: 1521
NEWLINE NAME , NAME = NUMBER ::: 1520
) [ : NUMBER ] NEWLINE ::: 1520
NAME [ STRING ] = False ::: 1519
NAME . NAME ] ) ) ::: 1519
False NEWLINE DEDENT if NAME . ::: 1518
NAME import ( NAME ) NEWLINE ::: 1518
is not None and NAME . ::: 1518
if NAME : NEWLINE INDENT raise ::: 1518
not None and NAME . NAME ::: 1518
. NAME = [ NAME ( ::: 1518
, NAME . NAME : NAME ::: 1517
= lambda NAME : NAME [ ::: 1517
STRING or NAME == STRING : ::: 1516
NEWLINE INDENT if NAME and NAME ::: 1516
: STRING } ) ) NEWLINE ::: 1515
[ NAME ( ) ] ) ::: 1515
NEWLINE NAME += STRING + NAME ::: 1514
, NAME ( NAME ) NEWLINE ::: 1514
NAME ) in NAME ( NAME ::: 1514
NAME ) NEWLINE DEDENT DEDENT if ::: 1514
NAME ( NAME - NUMBER , ::: 1514
= STRING ) NEWLINE DEDENT NAME ::: 1513
. NAME NEWLINE if NAME is ::: 1513
lambda NAME : NAME [ NUMBER ::: 1513
NAME = True NEWLINE DEDENT else ::: 1513
INDENT if NAME ( NAME [ ::: 1513
. NAME ( STRING STRING , ::: 1513
import NAME , NAME . NAME ::: 1513
NAME . NAME ) == NAME ::: 1513
elif NAME == NAME . NAME ::: 1512
STRING NEWLINE return NAME ( STRING ::: 1512
NAME ) , ] NEWLINE DEDENT ::: 1512
[ NUMBER ] NEWLINE NAME [ ::: 1512
NAME = NAME ( STRING . ::: 1512
NAME , NAME , None ) ::: 1511
NAME ( STRING , STRING % ::: 1511
] = NUMBER NEWLINE DEDENT DEDENT ::: 1511
( NAME ) - NUMBER NEWLINE ::: 1511
, NUMBER : NUMBER , NUMBER ::: 1510
, NUMBER ) , STRING : ::: 1510
import * NEWLINE DEDENT except NAME ::: 1509
NAME ) - NAME ( NAME ::: 1509
try : NEWLINE INDENT for NAME ::: 1508
NAME = False NEWLINE DEDENT NAME ::: 1508
: NEWLINE INDENT if NAME >= ::: 1508
INDENT STRING NEWLINE return STRING NEWLINE ::: 1507
] ) ) NEWLINE DEDENT NAME ::: 1507
, NAME , NAME as NAME ::: 1506
NAME , NAME , NAME as ::: 1506
NAME ] ) ) NEWLINE NAME ::: 1506
= False , NAME = [ ::: 1505
) . NAME ) NEWLINE NAME ::: 1505
NAME - NUMBER ) NEWLINE NAME ::: 1504
, - NUMBER , NUMBER , ::: 1503
= NAME * NAME . NAME ::: 1502
NAME in NAME ( NAME [ ::: 1501
and NAME ( NAME , NAME ::: 1501
NAME ) NEWLINE while True : ::: 1500
) ] NEWLINE NAME ( NAME ::: 1500
, lambda NAME , NAME : ::: 1500
[ STRING ] . NAME NEWLINE ::: 1500
NEWLINE DEDENT return ( NAME , ::: 1499
NEWLINE INDENT if NAME > NUMBER ::: 1499
NAME . NAME = ( NUMBER ::: 1499
break NEWLINE DEDENT NAME . NAME ::: 1499
( ) ) NEWLINE DEDENT except ::: 1498
NEWLINE INDENT from NAME import * ::: 1498
NAME , } ) NEWLINE DEDENT ::: 1498
NAME ( STRING ) for NAME ::: 1498
) < NAME : NEWLINE INDENT ::: 1498
elif NAME . NAME ( STRING ::: 1498
NEWLINE NAME = { NUMBER : ::: 1498
NEWLINE INDENT if NAME > NAME ::: 1497
( STRING ) NEWLINE return False ::: 1497
INDENT from NAME import * NEWLINE ::: 1497
) NEWLINE DEDENT NAME [ NAME ::: 1497
NEWLINE INDENT return { } NEWLINE ::: 1497
STRING , ) NEWLINE NAME . ::: 1497
NAME , STRING ) and NAME ::: 1497
[ ] ) NEWLINE NAME = ::: 1497
) ] NEWLINE return NAME NEWLINE ::: 1496
NAME < NAME . NAME : ::: 1496
NAME = NAME . NAME if ::: 1495
NAME = NUMBER NEWLINE DEDENT return ::: 1494
) NEWLINE NAME = NUMBER * ::: 1494
INDENT return { } NEWLINE DEDENT ::: 1494
INDENT if NAME % NAME == ::: 1494
NAME = True NEWLINE DEDENT NAME ::: 1494
NAME ( NAME / NAME ) ::: 1494
( NAME ) NEWLINE return ( ::: 1494
NAME ( ( NAME - NAME ::: 1493
NAME ] ) NEWLINE DEDENT else ::: 1493
NAME ) NEWLINE DEDENT with NAME ::: 1493
[ NUMBER ] = NUMBER NEWLINE ::: 1492
, { STRING : [ STRING ::: 1492
[ NAME ( NAME = STRING ::: 1492
= NAME . NAME ( - ::: 1492
NEWLINE if NAME and NAME . ::: 1491
: NEWLINE INDENT NAME = lambda ::: 1491
= STRING NEWLINE if NAME == ::: 1491
= NAME ( NAME ) + ::: 1490
NAME NEWLINE DEDENT if NAME ( ::: 1490
. NAME , ) NEWLINE NAME ::: 1490
NAME ( NAME ( [ NAME ::: 1489
, NAME ( NAME , STRING ::: 1489
NAME , NAME ] , NAME ::: 1489
NAME = [ NUMBER ] NEWLINE ::: 1489
INDENT NAME = STRING NEWLINE @ ::: 1489
NEWLINE del NAME [ STRING ] ::: 1488
NAME for NAME in NAME ) ::: 1487
assert STRING in NAME NEWLINE assert ::: 1487
, STRING : NUMBER } , ::: 1486
STRING ] NEWLINE DEDENT except NAME ::: 1485
INDENT with NAME . NAME : ::: 1484
NEWLINE STRING NEWLINE from . import ::: 1484
STRING % NAME ( NAME . ::: 1484
= NAME , NAME = { ::: 1484
None NEWLINE NAME = STRING NEWLINE ::: 1484
. NAME > NAME . NAME ::: 1484
NEWLINE return NEWLINE DEDENT DEDENT EOS ::: 1483
. NAME ) == NUMBER NEWLINE ::: 1483
NAME . NAME : STRING , ::: 1482
STRING ] , [ STRING ] ::: 1482
import ( NAME , ) NEWLINE ::: 1482
STRING , STRING , NAME ( ::: 1482
or NAME . NAME ( NAME ::: 1481
True NEWLINE NAME = False NEWLINE ::: 1480
] NEWLINE return NAME , NAME ::: 1479
NAME , NUMBER , NAME = ::: 1479
= True NEWLINE NAME = False ::: 1479
NAME = False ) ) NEWLINE ::: 1479
( STRING , True ) NEWLINE ::: 1479
NAME ) . NAME . NAME ::: 1478
. NAME in NAME : NEWLINE ::: 1477
- NUMBER : NEWLINE INDENT return ::: 1476
NAME ) ) NEWLINE assert NAME ::: 1476
NAME ( ) . NAME , ::: 1476
DEDENT elif NAME == NAME . ::: 1476
NAME += NUMBER NEWLINE DEDENT else ::: 1476
NEWLINE try : NEWLINE INDENT with ::: 1475
) is NAME : NEWLINE INDENT ::: 1475
, False ) NEWLINE DEDENT EOS ::: 1475
NAME = None , * NAME ::: 1475
( STRING ) for NAME in ::: 1474
NEWLINE import NAME , NAME . ::: 1473
STRING , NAME = ( NUMBER ::: 1473
NAME NEWLINE NAME [ NAME ] ::: 1472
DEDENT elif NAME : NEWLINE INDENT ::: 1472
STRING , STRING ] ) ) ::: 1472
NAME as NAME , NAME NEWLINE ::: 1472
, STRING ) , ( NAME ::: 1472
INDENT NAME = NAME ( ( ::: 1471
= None NEWLINE if NAME . ::: 1470
: { STRING : NAME . ::: 1470
NEWLINE DEDENT DEDENT DEDENT NAME . ::: 1470
NEWLINE INDENT import NAME NEWLINE from ::: 1469
( ) NEWLINE if ( NAME ::: 1469
- NUMBER , - NUMBER ) ::: 1469
} ) ) NEWLINE DEDENT EOS ::: 1469
: NEWLINE INDENT NAME += [ ::: 1469
NAME ) . NAME ) NEWLINE ::: 1468
) . NAME NEWLINE DEDENT EOS ::: 1468
NAME . NAME in NAME : ::: 1468
, NAME NEWLINE NAME = ( ::: 1468
, NAME = None , * ::: 1467
NUMBER , NAME ) ) NEWLINE ::: 1467
) ( NAME = NAME [ ::: 1467
NAME ) NEWLINE import NAME . ::: 1466
STRING , [ NAME . NAME ::: 1466
DEDENT NAME ( STRING % NAME ::: 1466
: NAME } ) NEWLINE return ::: 1465
NAME . NAME < NUMBER : ::: 1465
NEWLINE return None NEWLINE DEDENT EOS ::: 1465
INDENT STRING NEWLINE class NAME : ::: 1465
[ NAME ] NEWLINE NAME [ ::: 1464
NAME = NAME ( None , ::: 1464
NAME ( ) == STRING NEWLINE ::: 1464
NAME , NAME ( STRING , ::: 1464
, NAME [ NAME ] , ::: 1464
. NAME ) ) NEWLINE if ::: 1464
( NAME [ NUMBER : NUMBER ::: 1464
= [ ] NEWLINE with NAME ::: 1463
) NEWLINE for NAME in [ ::: 1463
INDENT raise NAME NEWLINE DEDENT NAME ::: 1463
( [ NAME . NAME . ::: 1463
STRING ] NEWLINE NAME = NUMBER ::: 1462
return True NEWLINE DEDENT DEDENT DEDENT ::: 1462
[ STRING , NAME . NAME ::: 1462
( ) NEWLINE DEDENT DEDENT NAME ::: 1462
= NAME ( ) NEWLINE assert ::: 1462
( NAME , NAME , None ::: 1462
DEDENT NAME . NAME = True ::: 1462
. NAME , ) ) NEWLINE ::: 1462
NUMBER ] NEWLINE DEDENT NAME = ::: 1461
NAME ] NEWLINE NAME [ NAME ::: 1461
NUMBER ] ) . NAME ( ::: 1460
= None NEWLINE DEDENT return NAME ::: 1460
INDENT with NAME ( STRING ) ::: 1460
+ STRING , STRING ) NEWLINE ::: 1460
return NAME ( STRING , { ::: 1460
( NAME . NAME ) - ::: 1460
, STRING , ) NEWLINE EOS ::: 1459
, NUMBER , NUMBER ) : ::: 1459
, NAME . NAME | NAME ::: 1459
= NAME ( [ NAME . ::: 1459
NEWLINE return NAME ( NAME [ ::: 1459
) and NAME . NAME . ::: 1459
STRING , False ) : NEWLINE ::: 1458
if NAME == STRING or NAME ::: 1458
NAME NEWLINE NAME = NUMBER * ::: 1458
+= NUMBER NEWLINE DEDENT DEDENT NAME ::: 1458
NAME ( ) NEWLINE DEDENT for ::: 1458
] . NAME ( ) , ::: 1458
NAME = [ ] NEWLINE with ::: 1458
( NAME = NUMBER ) . ::: 1458
[ STRING ] ) . NAME ::: 1458
> NUMBER : NEWLINE INDENT raise ::: 1458
NAME . NAME > NAME . ::: 1457
NEWLINE NAME -= NUMBER NEWLINE DEDENT ::: 1457
NUMBER : ] ) NEWLINE NAME ::: 1456
, NAME ( NAME = NAME ::: 1456
] ) ) : NEWLINE INDENT ::: 1456
[ NUMBER ] + STRING + ::: 1455
elif NAME . NAME ( ) ::: 1455
STRING , ** NAME ) NEWLINE ::: 1455
, [ ( STRING , STRING ::: 1455
NEWLINE return [ NAME for NAME ::: 1454
STRING ) ) NEWLINE for NAME ::: 1454
NEWLINE INDENT NAME = { NAME ::: 1453
NAME = NAME ( STRING + ::: 1453
. NAME , NUMBER , STRING ::: 1452
NEWLINE NAME = { NAME . ::: 1452
NAME . NAME ) ] ) ::: 1452
NEWLINE DEDENT NAME ( NAME ( ::: 1452
[ NUMBER ] + NAME [ ::: 1451
) : NEWLINE INDENT break NEWLINE ::: 1451
, None ) ) NEWLINE DEDENT ::: 1451
: NEWLINE INDENT STRING NEWLINE while ::: 1451
== STRING and NAME . NAME ::: 1451
NAME ) NEWLINE NAME = None ::: 1451
NAME += STRING NEWLINE DEDENT NAME ::: 1450
NAME = NUMBER NEWLINE return NAME ::: 1450
STRING ) ) NEWLINE DEDENT def ::: 1449
: STRING , } NEWLINE DEDENT ::: 1449
STRING , STRING , NUMBER , ::: 1449
NAME ] NEWLINE DEDENT def NAME ::: 1449
) ) , ] , ) ::: 1449
NUMBER ) NEWLINE return NAME ( ::: 1448
( ) NEWLINE DEDENT for NAME ::: 1448
. NAME ( [ ] , ::: 1448
import NAME NEWLINE if not NAME ::: 1448
( NAME , NAME = lambda ::: 1448
( NAME = True ) : ::: 1448
} , NAME = STRING , ::: 1448
STRING : { STRING : True ::: 1448
[ STRING ] = { STRING ::: 1447
+= NAME . NAME ( ) ::: 1446
. NAME ) NEWLINE def NAME ::: 1446
= [ STRING ] NEWLINE def ::: 1445
= STRING NEWLINE with NAME ( ::: 1445
. NAME ( STRING ) for ::: 1445
INDENT NAME = ( STRING STRING ::: 1445
, NUMBER , NAME , NAME ::: 1445
NAME ) , NAME = NUMBER ::: 1444
STRING % NAME NEWLINE NAME . ::: 1444
] . NAME ) NEWLINE DEDENT ::: 1444
) NEWLINE yield NAME . NAME ::: 1444
NAME ] ) NEWLINE if NAME ::: 1444
= ( NAME - NAME ) ::: 1442
) NEWLINE NAME = ( ( ::: 1442
else : NEWLINE INDENT import NAME ::: 1442
NAME . NAME , [ NAME ::: 1442
NAME NEWLINE DEDENT if NAME : ::: 1442
STRING % ( NAME [ NUMBER ::: 1441
) NEWLINE while NAME . NAME ::: 1441
% ( NAME , NAME [ ::: 1441
DEDENT else : NEWLINE INDENT import ::: 1441
True NEWLINE DEDENT NAME = NAME ::: 1441
, NUMBER ) . NAME ( ::: 1440
None : NEWLINE INDENT return False ::: 1440
NAME ) or NAME ( NAME ::: 1439
= STRING ) NEWLINE assert NAME ::: 1439
NUMBER : NEWLINE INDENT return None ::: 1439
DEDENT try : NEWLINE INDENT from ::: 1439
NAME . NAME ) NEWLINE def ::: 1439
NUMBER , - NUMBER ) : ::: 1438
NAME ( NAME + NAME , ::: 1438
, NAME , None ) NEWLINE ::: 1437
, STRING , STRING ] } ::: 1437
[ : NUMBER ] ) NEWLINE ::: 1436
NAME [ NUMBER ] ] = ::: 1435
except : NEWLINE INDENT raise NAME ::: 1435
return True NEWLINE DEDENT def NAME ::: 1435
STRING ] = { STRING : ::: 1435
= NUMBER NEWLINE DEDENT NAME = ::: 1435
NAME ( ) NEWLINE return STRING ::: 1435
: True , STRING : False ::: 1433
( NAME . NAME ( ( ::: 1433
NAME import ( NAME , ) ::: 1432
None : NEWLINE INDENT return STRING ::: 1432
( NUMBER , NAME , NAME ::: 1432
= NAME , NAME = ( ::: 1432
{ } NEWLINE DEDENT DEDENT EOS ::: 1432
, NUMBER , - NUMBER ) ::: 1430
NEWLINE NAME ( NAME , NUMBER ::: 1430
= STRING NEWLINE import NAME . ::: 1430
NAME ( ) + STRING NEWLINE ::: 1429
NAME == - NUMBER : NEWLINE ::: 1429
, NAME [ NUMBER : ] ::: 1429
NAME , NAME = ( NUMBER ::: 1429
STRING } , } NEWLINE def ::: 1429
NAME = NAME * NAME . ::: 1429
INDENT import NAME . NAME . ::: 1429
NEWLINE NAME = None NEWLINE for ::: 1428
} NEWLINE DEDENT else : NEWLINE ::: 1428
. NAME = STRING % NAME ::: 1428
NEWLINE DEDENT NAME = STRING % ::: 1427
NUMBER ] : NEWLINE INDENT return ::: 1427
NAME , NAME NEWLINE STRING NEWLINE ::: 1427
] + NAME [ NUMBER ] ::: 1427
NAME ( NAME [ NAME . ::: 1427
if NAME ( NAME , ( ::: 1427
NAME ( STRING ) [ : ::: 1427
NAME ] : NEWLINE INDENT return ::: 1426
. NAME , NAME = { ::: 1426
) , ] , ) , ::: 1426
NAME ( STRING STRING . NAME ::: 1426
) NEWLINE from . import NAME ::: 1426
( ) NEWLINE NAME [ NAME ::: 1425
) , ( NAME . NAME ::: 1425
NAME = [ ] ) NEWLINE ::: 1425
( NAME ) NEWLINE return STRING ::: 1424
. NAME ( NAME ) * ::: 1424
NAME : NEWLINE INDENT @ NAME ::: 1424
STRING : NUMBER , } NEWLINE ::: 1424
. NAME < NUMBER : NEWLINE ::: 1424
( NAME ) NEWLINE while NAME ::: 1423
+ NAME ) NEWLINE NAME ( ::: 1423
DEDENT return STRING % ( NAME ::: 1423
NAME NEWLINE if STRING in NAME ::: 1423
, STRING : True , } ::: 1422
, ] NEWLINE NAME . NAME ::: 1422
DEDENT NAME = NUMBER NEWLINE NAME ::: 1422
NEWLINE raise NAME NEWLINE DEDENT DEDENT ::: 1421
. NAME . NAME ] NEWLINE ::: 1421
NAME . NAME ( ) > ::: 1421
NAME [ - NUMBER ] . ::: 1421
: NEWLINE INDENT assert ( NAME ::: 1420
, NAME = STRING , ** ::: 1420
( NAME + STRING , STRING ::: 1420
return NEWLINE DEDENT if NAME . ::: 1420
, ** NAME . NAME ) ::: 1419
. NAME ) ] NEWLINE DEDENT ::: 1419
( NAME == STRING ) : ::: 1419
) NEWLINE DEDENT import NAME NEWLINE ::: 1419
NUMBER NEWLINE NAME = NAME + ::: 1418
] , STRING : True , ::: 1418
DEDENT NAME = NAME [ NAME ::: 1417
( NAME ( ) , STRING ::: 1417
NUMBER : - NUMBER ] NEWLINE ::: 1417
] , ) , ] NEWLINE ::: 1417
NAME = STRING ) , STRING ::: 1415
return NUMBER NEWLINE DEDENT elif NAME ::: 1415
. NAME = NAME or NAME ::: 1415
NAME is NAME : NEWLINE INDENT ::: 1415
. NAME . NAME ] ) ::: 1415
and not NAME : NEWLINE INDENT ::: 1415
= STRING % NAME NEWLINE DEDENT ::: 1414
NAME + NUMBER ) ) NEWLINE ::: 1414
, NUMBER ) NEWLINE for NAME ::: 1413
= STRING NEWLINE return NAME . ::: 1413
) [ : - NUMBER ] ::: 1413
in NAME ( NAME ) ) ::: 1412
NEWLINE NAME += NAME NEWLINE NAME ::: 1412
. NAME , NUMBER , NAME ::: 1412
NAME += NUMBER NEWLINE DEDENT EOS ::: 1412
INDENT assert NAME ( NAME ) ::: 1411
is NAME : NEWLINE INDENT NAME ::: 1410
for NAME in NAME ( STRING ::: 1410
STRING ] NEWLINE if NAME . ::: 1410
= NAME NEWLINE if NAME is ::: 1409
NAME ( lambda NAME , NAME ::: 1409
STRING NEWLINE DEDENT @ NAME NEWLINE ::: 1409
= NAME ( STRING % NAME ::: 1409
NAME . NAME + NUMBER NEWLINE ::: 1408
( None ) NEWLINE NAME . ::: 1408
NAME += STRING NEWLINE return NAME ::: 1408
NEWLINE NAME = STRING NEWLINE with ::: 1408
INDENT NAME = NUMBER NEWLINE def ::: 1407
, NAME ) , STRING ) ::: 1407
[ : NUMBER ] NEWLINE NAME ::: 1407
NUMBER , NAME = None , ::: 1407
. NAME : NEWLINE INDENT yield ::: 1406
] ) . NAME ( NAME ::: 1406
( ) ) , NAME = ::: 1406
( NUMBER ) NEWLINE for NAME ::: 1405
NAME = NAME ) NEWLINE assert ::: 1405
NEWLINE if NAME != None : ::: 1404
( NAME ) + NUMBER ) ::: 1404
NAME ) ) , NAME = ::: 1404
NAME ( ) NEWLINE if STRING ::: 1404
) is None : NEWLINE INDENT ::: 1403
== NAME ( NAME . NAME ::: 1403
NAME ( NUMBER ) NEWLINE for ::: 1403
NAME = STRING NEWLINE assert NAME ::: 1403
, NAME = STRING STRING ) ::: 1403
INDENT assert NAME ( NAME . ::: 1402
) NEWLINE assert NAME == STRING ::: 1402
NAME ( STRING STRING , NAME ::: 1402
( NUMBER ) , NAME . ::: 1402
= NAME , NAME = None ::: 1402
global NAME NEWLINE NAME . NAME ::: 1402
( NAME , { } ) ::: 1402
DEDENT NAME = [ STRING , ::: 1402
) ) NEWLINE with NAME ( ::: 1401
: NAME , } NEWLINE DEDENT ::: 1401
, ] , ) , ] ::: 1401
NAME import NAME NEWLINE with NAME ::: 1401
!= - NUMBER : NEWLINE INDENT ::: 1400
BOS NEWLINE STRING NEWLINE try : ::: 1400
NAME ( NAME , None , ::: 1399
= NAME . NAME * NAME ::: 1399
import * NEWLINE NAME = NUMBER ::: 1399
STRING . NAME ( ) NEWLINE ::: 1399
STRING : STRING . NAME ( ::: 1398
DEDENT with NAME ( NAME , ::: 1398
STRING % STRING . NAME ( ::: 1398
STRING , STRING : NAME ( ::: 1398
INDENT import NAME NEWLINE from NAME ::: 1397
NAME = lambda NAME , NAME ::: 1397
NUMBER NEWLINE NAME = NAME * ::: 1396
, NAME = NAME [ NAME ::: 1396
NEWLINE if NAME . NAME > ::: 1396
== True : NEWLINE INDENT NAME ::: 1395
[ NAME . NAME ( NUMBER ::: 1394
( ) . NAME ) NEWLINE ::: 1393
) , NAME ( NUMBER ) ::: 1392
% ( NAME [ NUMBER ] ::: 1392
( NAME ) - NAME ( ::: 1392
NAME NEWLINE DEDENT if NAME == ::: 1392
. NAME = ( NUMBER , ::: 1391
, NAME = STRING % NAME ::: 1391
with NAME ( ) as NAME ::: 1391
* NEWLINE DEDENT except NAME : ::: 1390
= NAME ) , NAME = ::: 1390
NAME . NAME . NAME and ::: 1390
STRING ) NEWLINE return True NEWLINE ::: 1389
NAME ( STRING + NAME [ ::: 1389
( STRING , NUMBER , STRING ::: 1389
[ STRING , ] NEWLINE NAME ::: 1389
STRING ) == STRING NEWLINE assert ::: 1389
( NAME ) == NAME NEWLINE ::: 1388
STRING STRING ) NEWLINE DEDENT DEDENT ::: 1387
DEDENT DEDENT finally : NEWLINE INDENT ::: 1387
STRING NEWLINE if NAME is not ::: 1386
, STRING ) ) NEWLINE import ::: 1386
( STRING , NUMBER ) [ ::: 1386
NUMBER , NAME = False , ::: 1386
if NAME and NAME : NEWLINE ::: 1385
None , * NAME , ** ::: 1385
NAME ( NAME , STRING + ::: 1385
( NAME ) / NAME ( ::: 1385
. NAME } NEWLINE NAME = ::: 1384
NAME ] [ STRING ] NEWLINE ::: 1384
INDENT for NAME , NAME , ::: 1384
STRING ) : NEWLINE INDENT for ::: 1384
, STRING , [ STRING ] ::: 1384
NEWLINE INDENT NAME = NUMBER * ::: 1384
NUMBER ) NEWLINE DEDENT if NAME ::: 1384
NEWLINE NAME = NAME ( * ::: 1383
, [ STRING ] , NAME ::: 1383
= NAME ( ) NEWLINE def ::: 1382
] NEWLINE DEDENT return NAME ( ::: 1381
STRING ) ] ) NEWLINE DEDENT ::: 1381
( NAME ( NAME , NUMBER ::: 1381
None , NAME = False , ::: 1381
[ NAME + NUMBER : ] ::: 1380
+ STRING + NAME NEWLINE DEDENT ::: 1380
DEDENT DEDENT raise NAME ( STRING ::: 1380
. NAME ( ) ) == ::: 1380
NAME in NAME ( ) : ::: 1380
NEWLINE INDENT NAME = - NUMBER ::: 1379
: STRING , NAME . NAME ::: 1379
= NAME . NAME if NAME ::: 1379
/ NAME NEWLINE NAME = NAME ::: 1379
, NAME , NUMBER , NUMBER ::: 1379
if NAME . NAME < ( ::: 1378
STRING : NAME ( ) , ::: 1378
( NAME [ NAME : NAME ::: 1378
. NAME , } NEWLINE DEDENT ::: 1378
NAME , NAME . NAME : ::: 1378
. NAME ) [ NUMBER ] ::: 1378
) NEWLINE DEDENT DEDENT for NAME ::: 1378
( [ STRING ] , NAME ::: 1378
= [ NAME ( NAME , ::: 1377
( NAME = NAME ) , ::: 1377
NAME : NAME + NAME ] ::: 1377
) ) , NAME = STRING ::: 1375
= NUMBER NEWLINE return NAME NEWLINE ::: 1374
NEWLINE INDENT if NAME == None ::: 1374
, NAME . NAME , ) ::: 1374
NAME [ NAME ] + NAME ::: 1373
( ( NAME ( NAME ) ::: 1373
. NAME ] , NAME = ::: 1373
( NAME , False ) NEWLINE ::: 1373
) , NAME ( ) ) ::: 1373
( ) NEWLINE DEDENT DEDENT except ::: 1373
NAME [ NUMBER : ] , ::: 1373
( NAME [ NUMBER ] - ::: 1372
) NEWLINE if NAME < NAME ::: 1372
* ( NAME + NUMBER ) ::: 1372
( [ NAME . NAME for ::: 1371
] [ STRING ] , STRING ::: 1371
. NAME } ) NEWLINE NAME ::: 1371
NUMBER NEWLINE DEDENT return NAME ( ::: 1371
( NAME ( NUMBER , NAME ::: 1371
NEWLINE DEDENT return STRING % ( ::: 1371
NAME . NAME + NAME NEWLINE ::: 1370
] , NAME = [ NAME ::: 1370
= NAME [ : NAME ] ::: 1370
( lambda NAME , NAME : ::: 1370
( ) [ NUMBER ] . ::: 1370
= NAME ( [ NAME ( ::: 1369
INDENT global NAME , NAME NEWLINE ::: 1368
NAME : NAME [ NAME ] ::: 1368
NUMBER ] NEWLINE DEDENT except NAME ::: 1367
NAME . NAME NEWLINE from . ::: 1367
) , NAME NEWLINE DEDENT DEDENT ::: 1367
NEWLINE NAME = NAME * NUMBER ::: 1366
= NAME ( NAME ) / ::: 1366
INDENT STRING NEWLINE if ( NAME ::: 1366
NAME ] ) NEWLINE NAME ( ::: 1365
NEWLINE DEDENT elif NAME : NEWLINE ::: 1365
NAME NEWLINE DEDENT DEDENT NAME = ::: 1364
) -> None : NEWLINE INDENT ::: 1363
] NEWLINE DEDENT for NAME in ::: 1363
= None , * NAME , ::: 1363
) ] NEWLINE NAME = STRING ::: 1362
= NAME NEWLINE return NAME ( ::: 1362
) ] ) NEWLINE DEDENT DEDENT ::: 1361
break NEWLINE DEDENT DEDENT DEDENT EOS ::: 1361
] ) : NEWLINE INDENT return ::: 1361
= NUMBER NEWLINE DEDENT NAME . ::: 1361
NAME == NAME ( NAME ) ::: 1361
} , NAME = { STRING ::: 1361
INDENT raise NAME NEWLINE DEDENT def ::: 1360
for NAME in NAME ) ) ::: 1360
NAME [ NUMBER ] NEWLINE for ::: 1360
. NAME ) < NUMBER : ::: 1360
( NAME ( NAME ) / ::: 1359
- NAME ( NAME ) ) ::: 1359
NAME ) is NAME : NEWLINE ::: 1359
} ) , ( STRING , ::: 1359
NAME . NAME , True ) ::: 1358
. NAME ( ) [ : ::: 1358
( NAME ) NEWLINE raise NAME ::: 1358
INDENT STRING NEWLINE return STRING % ::: 1357
} ) NEWLINE NAME ( NAME ::: 1357
NUMBER : NEWLINE INDENT for NAME ::: 1357
NEWLINE INDENT if ( NAME ( ::: 1355
[ ] NEWLINE DEDENT NAME = ::: 1355
] , NAME = NUMBER , ::: 1355
, STRING : ( STRING , ::: 1354
) NEWLINE DEDENT if STRING in ::: 1354
NAME NEWLINE DEDENT NAME = [ ::: 1353
from NAME import * NEWLINE DEDENT ::: 1353
( ) ) ) ) NEWLINE ::: 1353
: NAME ( NAME ) } ::: 1353
class NAME : NEWLINE INDENT @ ::: 1353
. NAME ] . NAME ( ::: 1352
NAME . NAME ( ) or ::: 1352
= ( STRING STRING STRING STRING ::: 1352
DEDENT NAME . NAME = STRING ::: 1352
NUMBER , NUMBER , NAME . ::: 1351
] ) ) ) NEWLINE DEDENT ::: 1351
= NAME / NUMBER NEWLINE NAME ::: 1351
( NUMBER ) ) ) NEWLINE ::: 1351
) . NAME ( ) ] ::: 1351
) ) : NEWLINE INDENT STRING ::: 1351
STRING ) , ) NEWLINE DEDENT ::: 1351
) - NUMBER ) : NEWLINE ::: 1351
STRING NEWLINE NAME = ( NUMBER ::: 1350
+ STRING NEWLINE DEDENT return NAME ::: 1350
INDENT STRING NEWLINE if STRING in ::: 1350
INDENT continue NEWLINE DEDENT if NAME ::: 1350
NAME [ NAME ] = { ::: 1350
NAME ( NAME ) or NAME ::: 1349
) NEWLINE DEDENT for NAME , ::: 1349
= STRING ) ) NEWLINE EOS ::: 1349
NEWLINE DEDENT DEDENT return NAME , ::: 1349
. NAME import ( NAME ) ::: 1348
NAME , False ) NEWLINE DEDENT ::: 1348
STRING ] ) NEWLINE DEDENT except ::: 1347
INDENT pass NEWLINE DEDENT DEDENT return ::: 1346
NAME : STRING , NAME : ::: 1346
. NAME ) != NUMBER : ::: 1346
NAME . NAME ( True , ::: 1345
else : NEWLINE INDENT return ( ::: 1345
= STRING NEWLINE DEDENT if NAME ::: 1345
= NAME NEWLINE DEDENT except NAME ::: 1345
, NAME ) , NAME NEWLINE ::: 1344
. NAME , NAME , STRING ::: 1344
) , STRING ) NEWLINE EOS ::: 1344
NAME ) ] NEWLINE return NAME ::: 1343
STRING NEWLINE NAME ( ) NEWLINE ::: 1343
+ NAME ( NAME [ NUMBER ::: 1342
, NUMBER ) ] ) NEWLINE ::: 1342
NAME as NAME NEWLINE DEDENT EOS ::: 1342
) NEWLINE class NAME ( NAME ::: 1341
NAME ( lambda NAME : STRING ::: 1341
, STRING : NAME [ NUMBER ::: 1341
) , } NEWLINE NAME = ::: 1341
, STRING ] ) ) NEWLINE ::: 1340
) NEWLINE DEDENT NAME = NUMBER ::: 1340
. NAME ( NAME ) or ::: 1340
DEDENT def NAME ( ) : ::: 1340
: NAME , } NEWLINE NAME ::: 1340
NAME ( ) NEWLINE while True ::: 1340
INDENT STRING NEWLINE NAME = True ::: 1339
= NAME ( STRING + NAME ::: 1339
if NAME ( NAME ( NAME ::: 1339
} NEWLINE if NAME : NEWLINE ::: 1339
= NAME , ) NEWLINE DEDENT ::: 1338
== NAME ) : NEWLINE INDENT ::: 1338
] : NEWLINE INDENT raise NAME ::: 1338
- NAME [ NUMBER ] ) ::: 1338
} NEWLINE NAME = NUMBER NEWLINE ::: 1338
( NAME ) -> NAME : ::: 1338
NAME == True : NEWLINE INDENT ::: 1337
( ) ) NEWLINE DEDENT def ::: 1337
INDENT class NAME ( NAME . ::: 1337
DEDENT return False NEWLINE DEDENT DEDENT ::: 1337
NAME NEWLINE return NAME , NAME ::: 1337
] . NAME ) NEWLINE NAME ::: 1336
( ) NEWLINE while True : ::: 1336
** NAME ) NEWLINE DEDENT else ::: 1336
STRING ) NEWLINE DEDENT DEDENT else ::: 1336
NAME ( NAME = [ ( ::: 1336
NAME ] NEWLINE DEDENT NAME . ::: 1335
False , NAME = None ) ::: 1335
not NAME : NEWLINE INDENT break ::: 1335
, NAME , NAME = ( ::: 1335
) . NAME ( NUMBER , ::: 1335
( STRING ) , NUMBER ) ::: 1335
) NEWLINE DEDENT from NAME . ::: 1335
( STRING ) ) , ] ::: 1335
NAME ( STRING ) , } ::: 1334
( NAME ) ) [ NUMBER ::: 1334
, STRING : False , } ::: 1334
NAME , NUMBER ) NEWLINE return ::: 1334
= STRING NEWLINE import NAME as ::: 1334
* NAME ) ) NEWLINE DEDENT ::: 1334
= [ ] NEWLINE while NAME ::: 1333
return NAME . NAME [ NUMBER ::: 1333
[ ] NEWLINE with NAME ( ::: 1333
( STRING ) ] NEWLINE DEDENT ::: 1333
NAME ( ) NEWLINE del NAME ::: 1333
[ NAME - NUMBER ] NEWLINE ::: 1332
) NEWLINE return NAME + NAME ::: 1332
( NAME , STRING + NAME ::: 1332
( ) NEWLINE if NAME != ::: 1332
) NEWLINE NAME = { NAME ::: 1332
NAME . NAME == STRING and ::: 1331
>= NAME : NEWLINE INDENT NAME ::: 1331
NAME , [ NUMBER , NUMBER ::: 1331
NAME NEWLINE @ NAME . NAME ::: 1331
* NEWLINE NAME = NUMBER NEWLINE ::: 1331
= STRING ) ] NEWLINE EOS ::: 1330
( ) ] NEWLINE NAME = ::: 1329
NAME : NAME + NUMBER ] ::: 1329
= NAME ( ( NAME , ::: 1329
NAME = NAME [ NAME ( ::: 1329
+ NAME . NAME [ NUMBER ::: 1329
) , NAME , NAME = ::: 1328
except NAME : NEWLINE INDENT try ::: 1328
. NAME = STRING NEWLINE return ::: 1328
STRING NEWLINE NAME ( ) . ::: 1328
pass NEWLINE class NAME ( NAME ::: 1328
NEWLINE DEDENT NAME += STRING NEWLINE ::: 1327
NAME = NAME . NAME / ::: 1327
: pass NEWLINE class NAME ( ::: 1327
= False NEWLINE DEDENT else : ::: 1326
- NUMBER NEWLINE NAME = NUMBER ::: 1326
pass NEWLINE DEDENT try : NEWLINE ::: 1325
NAME . NAME NEWLINE NAME += ::: 1325
( NAME / NUMBER ) NEWLINE ::: 1325
NAME ( NUMBER , STRING , ::: 1325
NUMBER ) , NAME ( NAME ::: 1325
return [ NAME ( NAME ) ::: 1325
[ STRING , ] , STRING ::: 1325
( NUMBER ) , NAME ( ::: 1325
NAME ( [ ] , NAME ::: 1325
INDENT NAME = NAME ( * ::: 1324
def NAME ( NAME = False ::: 1324
INDENT return NUMBER NEWLINE DEDENT if ::: 1324
< NUMBER ) : NEWLINE INDENT ::: 1324
] , NAME = False , ::: 1324
INDENT raise NAME ( STRING , ::: 1323
. NAME NEWLINE if NAME ( ::: 1323
[ NUMBER ] . NAME [ ::: 1323
** NAME ) ) NEWLINE DEDENT ::: 1323
NAME NEWLINE global NAME NEWLINE global ::: 1323
with NAME ( NAME ) : ::: 1323
) NEWLINE DEDENT @ NAME . ::: 1323
yield from NAME . NAME ( ::: 1323
STRING , STRING , [ STRING ::: 1323
) [ NUMBER ] [ NUMBER ::: 1322
, NAME ) ] ) NEWLINE ::: 1322
NAME ( NAME ) >= NUMBER ::: 1322
( NUMBER ) , NUMBER ) ::: 1322
{ } ) NEWLINE NAME = ::: 1322
) ) : NEWLINE INDENT raise ::: 1322
( NAME , NAME + STRING ::: 1321
= False ) NEWLINE DEDENT DEDENT ::: 1321
( NAME . NAME == STRING ::: 1321
NAME ( NAME ( STRING STRING ::: 1321
** NAME ) NEWLINE NAME [ ::: 1320
STRING , ( NAME , NAME ::: 1320
INDENT return None NEWLINE DEDENT else ::: 1320
NAME ( NAME . NAME * ::: 1320
NUMBER ) , NAME ) NEWLINE ::: 1320
) : pass NEWLINE class NAME ::: 1320
try : NEWLINE INDENT NAME [ ::: 1320
NUMBER ] NEWLINE NAME ( STRING ::: 1319
) NEWLINE raise NAME NEWLINE DEDENT ::: 1319
in NAME for NAME in NAME ::: 1319
STRING : [ NUMBER , NUMBER ::: 1318
NAME : NEWLINE INDENT raise NEWLINE ::: 1318
NEWLINE NAME = STRING NEWLINE return ::: 1318
BOS NEWLINE from . . NAME ::: 1317
. NAME , NAME = ( ::: 1317
INDENT global NAME NEWLINE global NAME ::: 1317
NEWLINE INDENT global NAME NEWLINE global ::: 1317
NAME : NAME . NAME ) ::: 1316
* NAME ( NAME ) NEWLINE ::: 1316
NAME NEWLINE NAME = [ NUMBER ::: 1316
[ NAME : NAME + NUMBER ::: 1316
] , NAME ) , NAME ::: 1315
< NAME : NEWLINE INDENT return ::: 1315
( ) if NAME . NAME ::: 1314
DEDENT try : NEWLINE INDENT import ::: 1314
or NAME ( NAME , NAME ::: 1314
) ) ) NEWLINE if NAME ::: 1313
NAME / NUMBER ) NEWLINE NAME ::: 1313
INDENT STRING NEWLINE NAME = False ::: 1313
NAME ( ) if NAME . ::: 1313
None ) ) NEWLINE DEDENT EOS ::: 1313
DEDENT if NAME ( NAME . ::: 1312
( NAME = False ) : ::: 1312
[ ] , NAME = STRING ::: 1311
and not NAME . NAME : ::: 1311
STRING , ( NAME , ) ::: 1311
) NEWLINE if NAME == None ::: 1311
( NAME ) is NAME : ::: 1310
DEDENT raise NAME ( STRING ) ::: 1310
None NEWLINE NAME . NAME . ::: 1310
NEWLINE while NAME . NAME ( ::: 1310
return NEWLINE DEDENT def NAME ( ::: 1310
NUMBER , NUMBER , NAME ) ::: 1310
{ STRING : [ { STRING ::: 1310
, ) NEWLINE NAME = [ ::: 1309
NAME , False ) NEWLINE NAME ::: 1309
] [ STRING ] = STRING ::: 1309
= STRING ) NEWLINE if NAME ::: 1309
. NAME NEWLINE import NAME as ::: 1309
[ NAME . NAME [ NAME ::: 1309
] ] NEWLINE NAME . NAME ::: 1309
return None NEWLINE DEDENT if NAME ::: 1309
( ) , NAME ( NAME ::: 1308
STRING ) == STRING : NEWLINE ::: 1308
[ NAME ] ) : NEWLINE ::: 1308
NAME = NAME ( NAME * ::: 1308
( NAME , NAME + NAME ::: 1308
, NUMBER ) NEWLINE DEDENT NAME ::: 1308
NEWLINE NAME ( NAME ( ) ::: 1308
( [ NAME ] , NAME ::: 1307
NAME ( STRING , ) NEWLINE ::: 1307
: ( STRING , STRING ) ::: 1306
, STRING , NAME ] ) ::: 1306
INDENT if NAME > NUMBER : ::: 1306
) > NAME : NEWLINE INDENT ::: 1306
NAME ) [ STRING ] NEWLINE ::: 1306
NAME ) in NAME : NEWLINE ::: 1306
False NEWLINE DEDENT DEDENT DEDENT EOS ::: 1305
NUMBER , NUMBER , STRING , ::: 1305
STRING ] = STRING NEWLINE return ::: 1305
. NAME [ NUMBER ] = ::: 1305
] = NAME NEWLINE DEDENT else ::: 1305
: NAME = NAME . NAME ::: 1304
NAME ( NAME * NUMBER ) ::: 1304
STRING . NAME ( STRING . ::: 1304
( STRING , NAME ) . ::: 1303
( NAME ) . NAME ) ::: 1303
NAME import NAME NEWLINE for NAME ::: 1302
( NUMBER , NUMBER , STRING ::: 1302
STRING ) ) NEWLINE DEDENT else ::: 1302
( STRING , STRING . NAME ::: 1302
NUMBER ] != STRING : NEWLINE ::: 1301
( ) . NAME ( * ::: 1301
STRING , STRING ) NEWLINE def ::: 1301
, ) : NEWLINE INDENT NAME ::: 1301
return ( NAME . NAME , ::: 1300
True NEWLINE DEDENT NAME . NAME ::: 1300
INDENT break NEWLINE DEDENT DEDENT DEDENT ::: 1300
[ ( NUMBER , NUMBER ) ::: 1300
INDENT if ( NAME ( NAME ::: 1300
NAME [ NUMBER , NUMBER ] ::: 1300
NAME ( ) NEWLINE return ( ::: 1299
NEWLINE yield NAME . NAME ( ::: 1299
NEWLINE DEDENT assert NAME . NAME ::: 1299
. NAME . NAME = None ::: 1299
STRING ) . NAME NEWLINE NAME ::: 1299
NAME or NAME . NAME NEWLINE ::: 1298
NAME * NAME ) NEWLINE DEDENT ::: 1297
NEWLINE INDENT pass NEWLINE DEDENT try ::: 1297
( [ ] ) NEWLINE NAME ::: 1297
INDENT NAME . NAME ( True ::: 1297
) NEWLINE DEDENT NAME [ STRING ::: 1297
NEWLINE INDENT for NAME in ( ::: 1297
INDENT pass NEWLINE DEDENT try : ::: 1297
return STRING NEWLINE DEDENT return NAME ::: 1297
= STRING + NAME NEWLINE DEDENT ::: 1296
DEDENT NAME ( ) NEWLINE DEDENT ::: 1296
STRING NEWLINE class NAME ( NAME ::: 1296
NEWLINE if NAME . NAME >= ::: 1295
NAME NEWLINE DEDENT return None NEWLINE ::: 1295
, NAME + NUMBER , NAME ::: 1295
) : NEWLINE INDENT assert ( ::: 1295
* NAME ( NAME ) ) ::: 1294
. NAME + STRING , NAME ::: 1293
( STRING , NAME = ( ::: 1293
. NAME ] NEWLINE DEDENT DEDENT ::: 1293
NAME ( NAME ) ] = ::: 1293
NAME ) - NUMBER ) : ::: 1293
, STRING ) ] ) , ::: 1293
== NAME . NAME ) NEWLINE ::: 1293
} } NEWLINE NAME = NAME ::: 1293
( NAME . NAME ) as ::: 1292
INDENT NAME [ STRING ] . ::: 1292
+= NAME [ NAME ] NEWLINE ::: 1292
INDENT try : NEWLINE INDENT from ::: 1292
INDENT NAME [ NAME ] [ ::: 1292
NAME ) ; NEWLINE NAME . ::: 1291
None NEWLINE NAME = NAME ( ::: 1291
NAME : NEWLINE INDENT return { ::: 1291
= STRING ) NEWLINE class NAME ::: 1291
NAME import * NEWLINE if NAME ::: 1291
NAME = STRING ) NEWLINE class ::: 1291
NUMBER ) , NAME = STRING ::: 1290
NAME as NAME NEWLINE try : ::: 1290
( NUMBER ) NEWLINE assert NAME ::: 1290
NAME . NAME = STRING + ::: 1290
+= NAME . NAME NEWLINE DEDENT ::: 1289
NAME ( NAME , ( NUMBER ::: 1289
) NEWLINE return [ NAME . ::: 1289
NAME * NAME ) NEWLINE NAME ::: 1289
NAME [ NUMBER ] ) + ::: 1289
STRING ) ) NEWLINE DEDENT except ::: 1289
NAME ) : pass NEWLINE class ::: 1288
* NEWLINE NAME . NAME . ::: 1288
NEWLINE DEDENT def NAME ( ) ::: 1288
import * NEWLINE NAME = True ::: 1288
. NAME ( STRING ) != ::: 1287
] = STRING NEWLINE return NAME ::: 1287
[ NAME , NAME ] = ::: 1286
STRING ) NEWLINE DEDENT for NAME ::: 1286
NAME or NAME . NAME . ::: 1286
* NEWLINE NAME = True NEWLINE ::: 1285
. import NAME NEWLINE import NAME ::: 1285
NAME import NAME NEWLINE DEDENT else ::: 1285
NUMBER , NUMBER ) NEWLINE assert ::: 1285
, NUMBER , - NUMBER , ::: 1285
NAME in NAME for NAME in ::: 1285
. NAME = True NEWLINE return ::: 1284
( [ NAME . NAME ] ::: 1284
. NAME ( STRING ) if ::: 1284
yield NAME , NAME ( NAME ::: 1284
. NAME , NAME ) . ::: 1284
, ] NEWLINE NAME = STRING ::: 1284
NAME NEWLINE DEDENT except NAME . ::: 1284
] , NAME , NAME ) ::: 1284
pass NEWLINE DEDENT return NAME NEWLINE ::: 1283
== NAME ) . NAME ( ::: 1283
STRING ) NEWLINE assert NAME == ::: 1283
NEWLINE DEDENT NAME ( STRING . ::: 1283
( NAME , NAME ) or ::: 1282
NAME ] NEWLINE return NAME . ::: 1282
NAME . NAME NEWLINE @ NAME ::: 1282
NUMBER ) NEWLINE assert NAME ( ::: 1281
INDENT STRING NEWLINE if NAME not ::: 1281
: STRING , STRING : False ::: 1281
) NEWLINE if NAME != STRING ::: 1281
] . NAME NEWLINE NAME = ::: 1281
NAME = True NEWLINE for NAME ::: 1281
NEWLINE DEDENT NAME = ( NAME ::: 1281
NEWLINE NAME = STRING NEWLINE @ ::: 1279
+ STRING NEWLINE DEDENT DEDENT EOS ::: 1279
STRING ) NEWLINE while True : ::: 1279
return NAME ( { STRING : ::: 1279
. NAME / NAME . NAME ::: 1279
NAME ( { } ) NEWLINE ::: 1278
STRING ) NEWLINE DEDENT try : ::: 1278
[ NUMBER ] ] = NAME ::: 1278
( NAME + NAME , NAME ::: 1278
... NAME import NAME NEWLINE from ::: 1277
NAME ( STRING ) + NAME ::: 1277
NEWLINE DEDENT DEDENT DEDENT DEDENT return ::: 1277
] ) NEWLINE assert NAME . ::: 1277
NUMBER ) NEWLINE if NAME . ::: 1277
, STRING ) ] NEWLINE DEDENT ::: 1277
NEWLINE INDENT NAME = lambda NAME ::: 1276
, NAME = True ) . ::: 1276
) NEWLINE DEDENT raise NAME ( ::: 1276
NUMBER NEWLINE NAME , NAME = ::: 1276
+ STRING NEWLINE DEDENT else : ::: 1276
NAME [ NAME . NAME [ ::: 1275
NAME , ** NAME . NAME ::: 1275
: [ STRING ] , } ::: 1275
NAME ( NAME . NAME - ::: 1275
STRING : NAME ( NAME = ::: 1274
as NAME NEWLINE try : NEWLINE ::: 1274
NAME - NAME ) / NAME ::: 1274
, } NEWLINE DEDENT DEDENT EOS ::: 1274
. NAME ( NAME ) } ::: 1273
NUMBER NEWLINE NAME ( NAME ) ::: 1273
+= NUMBER NEWLINE DEDENT NAME ( ::: 1273
NAME : STRING , NAME . ::: 1273
in NAME . NAME [ NUMBER ::: 1273
) } NEWLINE NAME = NAME ::: 1272
{ } NEWLINE def NAME ( ::: 1272
False , STRING : False , ::: 1272
] ) NEWLINE NAME [ STRING ::: 1272
+= STRING % NAME . NAME ::: 1272
) / NUMBER NEWLINE NAME = ::: 1271
NAME . NAME / NAME . ::: 1271
STRING } , NAME = STRING ::: 1271
NAME , NUMBER , NAME . ::: 1271
NUMBER ) [ NUMBER ] NEWLINE ::: 1270
DEDENT elif NAME == NAME : ::: 1270
STRING , NUMBER ) , NAME ::: 1270
INDENT return True NEWLINE DEDENT elif ::: 1270
+ STRING + NAME [ NUMBER ::: 1270
STRING NEWLINE import NAME NEWLINE if ::: 1269
NAME ( { STRING : { ::: 1269
, STRING , NUMBER , NUMBER ::: 1269
NUMBER ] == NUMBER : NEWLINE ::: 1269
NAME NEWLINE NAME = NAME - ::: 1269
NAME . NAME , False ) ::: 1269
, False ) NEWLINE NAME = ::: 1269
NAME [ NAME ] > NAME ::: 1268
elif NAME == NAME : NEWLINE ::: 1268
NAME and NAME ( NAME ) ::: 1268
NAME = False NEWLINE DEDENT else ::: 1268
: NUMBER ] ) NEWLINE NAME ::: 1267
NAME , NAME ] = NAME ::: 1267
else : NEWLINE INDENT try : ::: 1266
NAME += STRING % NAME . ::: 1266
NAME = NUMBER NEWLINE DEDENT elif ::: 1266
= NAME NEWLINE NAME ( STRING ::: 1266
= { } NEWLINE def NAME ::: 1266
= STRING ) NEWLINE DEDENT def ::: 1265
. NAME ( STRING ) } ::: 1265
elif NAME . NAME : NEWLINE ::: 1265
= False NEWLINE NAME = NUMBER ::: 1265
. NAME ] ) ) NEWLINE ::: 1265
. NAME ) NEWLINE NAME += ::: 1265
% NAME ) NEWLINE return NAME ::: 1265
DEDENT elif NAME . NAME : ::: 1264
. NAME = None NEWLINE if ::: 1264
{ } NEWLINE NAME = [ ::: 1264
[ NAME for NAME , NAME ::: 1264
NAME . NAME ) and NAME ::: 1263
NAME ( NAME [ : , ::: 1263
NAME NEWLINE DEDENT if not NAME ::: 1262
( NAME + NAME . NAME ::: 1262
: STRING , NAME : STRING ::: 1262
/ NUMBER ) NEWLINE NAME = ::: 1262
. NAME : STRING , NAME ::: 1262
NEWLINE INDENT if ( NAME == ::: 1262
NAME [ NAME : ] NEWLINE ::: 1262
NAME = True ) , STRING ::: 1262
STRING * NUMBER ) NEWLINE NAME ::: 1261
) NEWLINE from . . NAME ::: 1261
NAME ( ) - NAME ) ::: 1261
NAME ) / NAME . NAME ::: 1261
NEWLINE assert ( NAME ( NAME ::: 1260
. NAME ( STRING ) as ::: 1260
, STRING : [ { STRING ::: 1260
None NEWLINE DEDENT DEDENT DEDENT EOS ::: 1260
NAME . NAME ] NEWLINE return ::: 1260
NAME += NUMBER NEWLINE return NAME ::: 1259
INDENT NAME ( NAME [ NAME ::: 1259
NAME ( STRING ) , ) ::: 1259
NAME = { } NEWLINE def ::: 1259
NAME [ NAME ] - NAME ::: 1259
while NAME < NAME ( NAME ::: 1259
[ NUMBER ] = NAME [ ::: 1259
INDENT with NAME . NAME . ::: 1258
] == STRING NEWLINE assert NAME ::: 1258
: NEWLINE INDENT from . import ::: 1258
{ STRING : NUMBER } NEWLINE ::: 1257
True NEWLINE for NAME in NAME ::: 1257
. NAME ( STRING + STRING ::: 1257
) NEWLINE NAME [ NAME . ::: 1257
STRING : ( NUMBER , NUMBER ::: 1257
None ) NEWLINE if NAME : ::: 1256
[ NAME ( STRING , STRING ::: 1256
= NAME ( * NAME ) ::: 1256
False NEWLINE NAME = NUMBER NEWLINE ::: 1256
[ ] NEWLINE NAME = { ::: 1255
{ } NEWLINE DEDENT def NAME ::: 1255
True ) , ) , NAME ::: 1255
NAME * NAME . NAME ) ::: 1255
, [ NAME . NAME ] ::: 1255
) for NAME in NAME if ::: 1254
STRING NEWLINE DEDENT DEDENT DEDENT EOS ::: 1254
( ( STRING , NAME ) ::: 1254
== NAME . NAME NEWLINE assert ::: 1254
, NAME - NUMBER ) NEWLINE ::: 1254
STRING NEWLINE DEDENT return NAME . ::: 1253
NAME . NAME [ NAME ( ::: 1253
, STRING ] NEWLINE NAME ( ::: 1253
NAME , ) NEWLINE DEDENT DEDENT ::: 1253
NAME = [ [ STRING , ::: 1253
DEDENT else : NEWLINE INDENT try ::: 1253
DEDENT NAME = NAME [ STRING ::: 1253
NAME ( ) == NUMBER NEWLINE ::: 1252
( NAME , ( NUMBER , ::: 1252
) == NAME . NAME : ::: 1252
( NAME = None ) NEWLINE ::: 1252
) NEWLINE return NAME ( ) ::: 1252
return NAME . NAME , NAME ::: 1252
NEWLINE INDENT if NAME != STRING ::: 1251
[ NAME ] NEWLINE for NAME ::: 1251
NUMBER : NUMBER ] ) NEWLINE ::: 1251
NUMBER ] [ STRING ] ) ::: 1250
NEWLINE INDENT from . import NAME ::: 1250
= True NEWLINE for NAME in ::: 1250
NEWLINE INDENT return NAME ( [ ::: 1250
. NAME , True ) NEWLINE ::: 1250
False ) , NAME . NAME ::: 1249
= STRING NEWLINE import NAME , ::: 1249
INDENT break NEWLINE DEDENT NAME . ::: 1249
NEWLINE yield NAME NEWLINE DEDENT DEDENT ::: 1248
NAME / NAME ( NAME ) ::: 1248
NAME = NAME NEWLINE DEDENT except ::: 1248
STRING in NAME . NAME ) ::: 1247
= { STRING : NAME [ ::: 1247
= NAME ( [ NUMBER , ::: 1247
NAME = False NEWLINE def NAME ::: 1246
= False NEWLINE def NAME ( ::: 1246
NAME , NAME + STRING ) ::: 1246
+ NUMBER ) NEWLINE NAME = ::: 1246
. NAME ( ( NAME ( ::: 1245
except : NEWLINE INDENT import NAME ::: 1245
assert NAME . NAME [ STRING ::: 1245
NAME ) or NAME . NAME ::: 1244
NAME ( ) } NEWLINE DEDENT ::: 1243
* NEWLINE NAME = [ STRING ::: 1243
INDENT return [ NAME ( NAME ::: 1243
NAME = NUMBER * NAME NEWLINE ::: 1242
: NEWLINE INDENT NAME += ( ::: 1242
( NAME ( ) ) ) ::: 1242
assert NAME ( NAME ( NAME ::: 1242
NAME . NAME . NAME != ::: 1242
( NAME ( NAME ( ) ::: 1241
DEDENT except : NEWLINE INDENT import ::: 1241
: { STRING : NUMBER , ::: 1241
NAME ( NAME ) : NAME ::: 1241
. NAME = STRING % ( ::: 1240
NAME = NUMBER NEWLINE STRING NEWLINE ::: 1240
NAME . NAME != NAME : ::: 1240
NAME ) : NEWLINE INDENT del ::: 1240
INDENT NAME [ NUMBER ] = ::: 1239
, } } NEWLINE NAME = ::: 1239
. NAME , STRING . NAME ::: 1239
+= STRING NEWLINE return NAME NEWLINE ::: 1239
NEWLINE return None NEWLINE DEDENT DEDENT ::: 1239
} NEWLINE NAME = [ STRING ::: 1239
NAME NEWLINE DEDENT if NAME is ::: 1238
NAME ) ) NEWLINE NAME [ ::: 1237
= None ) NEWLINE NAME . ::: 1237
if ( NAME . NAME . ::: 1237
) NEWLINE NAME . NAME , ::: 1236
except : NEWLINE INDENT return False ::: 1236
NAME . NAME / NUMBER ) ::: 1236
BOS NEWLINE if NAME == STRING ::: 1236
DEDENT NAME = { } NEWLINE ::: 1236
. NAME != NAME : NEWLINE ::: 1236
if ( NAME ) : NEWLINE ::: 1235
[ STRING ] NEWLINE DEDENT def ::: 1235
. NAME NEWLINE DEDENT DEDENT return ::: 1235
] ) [ NUMBER ] NEWLINE ::: 1235
, NAME [ NUMBER ] . ::: 1234
NAME in NAME . NAME NEWLINE ::: 1234
NAME == NAME ) . NAME ::: 1233
. NAME ( ) NEWLINE del ::: 1233
NAME ( STRING ) or STRING ::: 1233
( NAME * NAME . NAME ::: 1232
NUMBER NEWLINE DEDENT if NAME == ::: 1232
INDENT return NEWLINE DEDENT DEDENT EOS ::: 1231
NAME , STRING ) , ( ::: 1231
NAME , [ NAME ] ) ::: 1231
NAME , } NEWLINE NAME = ::: 1231
. NAME ( STRING ) is ::: 1231
= STRING % ( NAME ) ::: 1230
) , STRING : NAME , ::: 1230
NAME . NAME - NUMBER ) ::: 1230
NAME ) ] NEWLINE DEDENT DEDENT ::: 1230
NAME [ NUMBER ] != STRING ::: 1230
NUMBER , NUMBER ] ) ) ::: 1229
DEDENT NAME . NAME = None ::: 1229
NAME ( NAME , NAME - ::: 1229
NAME . NAME == None : ::: 1229
False NEWLINE NAME = True NEWLINE ::: 1229
NUMBER NEWLINE NAME += NUMBER NEWLINE ::: 1229
INDENT NAME = NAME ( { ::: 1228
: : - NUMBER ] NEWLINE ::: 1228
STRING % { STRING : NAME ::: 1228
. NAME += NUMBER NEWLINE return ::: 1228
NAME . NAME ) NEWLINE from ::: 1228
INDENT NAME ( NAME [ STRING ::: 1228
NAME ) NEWLINE return None NEWLINE ::: 1227
= [ ( NAME , NAME ::: 1227
NAME NEWLINE DEDENT DEDENT NAME ( ::: 1226
INDENT NAME = - NUMBER NEWLINE ::: 1226
NAME ] . NAME ( STRING ::: 1226
. NAME ( ) ) + ::: 1226
NAME [ STRING ] NEWLINE for ::: 1226
( ) NEWLINE if NAME in ::: 1225
NEWLINE NAME ( NUMBER , NUMBER ::: 1225
% STRING . NAME ( NAME ::: 1225
NUMBER , NAME = NAME ( ::: 1225
) NEWLINE return ( NAME . ::: 1225
NAME - NAME ) ) NEWLINE ::: 1225
NAME [ STRING ] == NUMBER ::: 1225
** NAME ) NEWLINE DEDENT NAME ::: 1224
as NAME : NEWLINE INDENT with ::: 1224
NEWLINE @ NAME ( NAME ) ::: 1224
= False NEWLINE NAME = True ::: 1224
True , STRING : True , ::: 1224
] ) NEWLINE if NAME : ::: 1224
if NAME and NAME ( NAME ::: 1224
STRING NEWLINE NAME ( STRING % ::: 1224
NAME + NAME . NAME . ::: 1224
, NAME ) NEWLINE return NEWLINE ::: 1223
NEWLINE NAME = NAME NEWLINE if ::: 1223
NAME - NAME ) NEWLINE NAME ::: 1223
+ NAME [ NUMBER ] + ::: 1223
NAME ( NAME = ( STRING ::: 1222
while NAME < NUMBER : NEWLINE ::: 1222
NAME = NUMBER * NUMBER * ::: 1222
NAME NEWLINE NAME = lambda NAME ::: 1222
NEWLINE if NAME is None or ::: 1221
] , NAME . NAME , ::: 1221
STRING in NAME ) NEWLINE NAME ::: 1221
( ) NEWLINE NAME ( NUMBER ::: 1221
( STRING ) NEWLINE return STRING ::: 1221
) [ STRING ] NEWLINE DEDENT ::: 1220
NEWLINE NAME = NAME - NUMBER ::: 1220
STRING , STRING : True , ::: 1220
] , NAME [ NUMBER : ::: 1220
) != NAME : NEWLINE INDENT ::: 1220
) ) ) NEWLINE from NAME ::: 1220
NAME NEWLINE DEDENT DEDENT NAME . ::: 1219
False NEWLINE def NAME ( NAME ::: 1219
and not NAME . NAME . ::: 1219
= NAME ( STRING STRING ) ::: 1219
, STRING : NAME ( ) ::: 1219
STRING ) NEWLINE NAME = True ::: 1219
return STRING + NAME . NAME ::: 1218
NEWLINE if NAME . NAME in ::: 1218
+= NAME . NAME . NAME ::: 1218
NAME , STRING ) NEWLINE assert ::: 1218
= [ NAME [ STRING ] ::: 1217
{ STRING : False , STRING ::: 1217
NEWLINE NAME = ( NAME + ::: 1217
NUMBER ] NEWLINE return NAME . ::: 1216
STRING ] ) NEWLINE DEDENT else ::: 1216
NUMBER , STRING ) NEWLINE import ::: 1216
NAME ( STRING , STRING . ::: 1216
( NAME ( NAME ( STRING ::: 1216
, NAME . NAME ) for ::: 1215
, NAME ) , ] NEWLINE ::: 1215
NAME = [ [ NUMBER , ::: 1215
!= NAME : NEWLINE INDENT raise ::: 1214
DEDENT NAME = NUMBER NEWLINE for ::: 1214
return NUMBER NEWLINE DEDENT if NAME ::: 1214
False , NAME = NAME . ::: 1214
] ) NEWLINE if NAME . ::: 1213
NAME ( STRING ) if NAME ::: 1213
NAME - NAME ) NEWLINE DEDENT ::: 1213
NEWLINE INDENT STRING NEWLINE return NUMBER ::: 1213
( - NUMBER , NUMBER , ::: 1213
NAME = [ NAME ] , ::: 1213
STRING in NAME NEWLINE assert STRING ::: 1213
NAME ) , STRING , NAME ::: 1212
( STRING , STRING % NAME ::: 1212
elif NAME . NAME == NAME ::: 1212
return True NEWLINE DEDENT elif NAME ::: 1212
( NAME - NUMBER , NAME ::: 1212
in NAME ( ) . NAME ::: 1211
not NAME in NAME . NAME ::: 1211
return STRING NEWLINE DEDENT return STRING ::: 1211
INDENT if NAME == None : ::: 1211
STRING in NAME [ STRING ] ::: 1211
, STRING ] NEWLINE def NAME ::: 1210
NAME . NAME . NAME or ::: 1210
INDENT yield NAME , NAME ( ::: 1210
NAME NEWLINE NAME = ( ( ::: 1210
. NAME NEWLINE NAME , NAME ::: 1210
* NUMBER NEWLINE NAME . NAME ::: 1209
NUMBER ] ] NEWLINE NAME = ::: 1209
] NEWLINE from NAME import NAME ::: 1209
) } NEWLINE NAME . NAME ::: 1209
NAME ) NEWLINE DEDENT NAME [ ::: 1208
( NAME ) NEWLINE if STRING ::: 1208
, NAME ) as NAME : ::: 1208
= NAME . NAME + NUMBER ::: 1208
) ) : NEWLINE INDENT yield ::: 1208
, STRING , ] NEWLINE DEDENT ::: 1207
} NEWLINE NAME = [ ] ::: 1207
True , STRING : False , ::: 1207
NAME as NAME NEWLINE NAME ( ::: 1207
NAME as NAME NEWLINE if NAME ::: 1207
NAME . NAME ( NAME % ::: 1207
NAME = STRING % NAME ( ::: 1207
. NAME ( ) , [ ::: 1206
NUMBER , NUMBER ] ] NEWLINE ::: 1206
NAME ) NEWLINE return STRING . ::: 1206
NAME , NAME ) , ( ::: 1206
) + NAME ( NAME . ::: 1206
( NAME + NUMBER ) ) ::: 1205
not in NAME . NAME . ::: 1205
= NUMBER NEWLINE DEDENT elif NAME ::: 1205
DEDENT DEDENT NAME ( STRING ) ::: 1205
NAME . NAME , } ) ::: 1205
NUMBER ] = NAME [ NUMBER ::: 1205
NUMBER NEWLINE NAME = None NEWLINE ::: 1205
STRING ] NEWLINE NAME = ( ::: 1204
STRING , NAME ( NAME , ::: 1204
. NAME == NAME NEWLINE DEDENT ::: 1204
STRING NEWLINE global NAME NEWLINE NAME ::: 1204
NAME , NAME + NAME ) ::: 1204
. NAME ] : NEWLINE INDENT ::: 1204
= STRING NEWLINE NAME , NAME ::: 1203
NAME in NAME ( NAME - ::: 1203
. NAME ) ] ) NEWLINE ::: 1203
[ NUMBER ] . NAME == ::: 1203
: NEWLINE INDENT if NAME <= ::: 1203
NAME + NAME + NAME NEWLINE ::: 1203
elif STRING in NAME : NEWLINE ::: 1203
) , STRING : ( STRING ::: 1202
DEDENT NAME ( STRING % ( ::: 1202
, ] , NAME = { ::: 1202
NEWLINE STRING NEWLINE from . . ::: 1201
INDENT return NAME . NAME == ::: 1201
= STRING NEWLINE if NAME : ::: 1201
NAME = - NUMBER NEWLINE DEDENT ::: 1201
} NEWLINE try : NEWLINE INDENT ::: 1201
NEWLINE NAME = ( ( NAME ::: 1201
, { STRING : NUMBER , ::: 1201
DEDENT elif STRING in NAME : ::: 1201
NUMBER , NAME , NAME , ::: 1201
: NEWLINE INDENT NAME ( [ ::: 1201
= NAME + STRING NEWLINE DEDENT ::: 1200
if ( NAME . NAME == ::: 1200
[ NUMBER ] == NUMBER : ::: 1200
NEWLINE while not NAME . NAME ::: 1200
False , NAME = [ STRING ::: 1200
NAME ] ) for NAME in ::: 1199
INDENT STRING NEWLINE assert NAME . ::: 1199
) NEWLINE NAME += STRING NEWLINE ::: 1199
NAME . NAME = ( STRING ::: 1198
NAME . NAME ] : NEWLINE ::: 1198
) <= NUMBER : NEWLINE INDENT ::: 1198
+ NAME NEWLINE DEDENT DEDENT EOS ::: 1198
NEWLINE INDENT NAME . NAME -= ::: 1198
= NUMBER * NUMBER * NUMBER ::: 1197
( { STRING : { STRING ::: 1197
= NAME NEWLINE if not NAME ::: 1197
. NAME = NAME ( [ ::: 1196
. NAME is not None and ::: 1195
NUMBER ) , NAME = NUMBER ::: 1195
STRING , STRING ] NEWLINE def ::: 1195
NAME [ - NUMBER ] == ::: 1195
NAME = NUMBER * NUMBER NEWLINE ::: 1195
NAME = NAME ( NAME / ::: 1194
= NAME ) NEWLINE assert NAME ::: 1194
NAME NEWLINE DEDENT class NAME : ::: 1193
== STRING NEWLINE NAME = NAME ::: 1193
[ STRING ] . NAME ) ::: 1192
NAME . NAME , STRING . ::: 1192
True , NAME = NAME , ::: 1191
, STRING ) ) NEWLINE return ::: 1191
= NUMBER NEWLINE NAME ( STRING ::: 1191
NAME += STRING + NAME ( ::: 1191
NAME + STRING NEWLINE DEDENT EOS ::: 1191
NUMBER * NUMBER NEWLINE NAME = ::: 1190
STRING : False , } NEWLINE ::: 1190
NUMBER NEWLINE DEDENT DEDENT NAME ( ::: 1189
NEWLINE while NAME < NAME ( ::: 1189
} NEWLINE DEDENT NAME = NAME ::: 1189
* NAME . NAME * NAME ::: 1189
) , NAME , NAME , ::: 1189
( NAME - NAME ) * ::: 1189
NAME == STRING and NAME . ::: 1188
return NAME NEWLINE DEDENT except : ::: 1188
NEWLINE DEDENT DEDENT finally : NEWLINE ::: 1188
( ) , STRING , STRING ::: 1188
NAME += NAME . NAME . ::: 1188
NAME ) ) , ] NEWLINE ::: 1188
) NEWLINE NAME = lambda NAME ::: 1188
= ( STRING ) NEWLINE NAME ::: 1187
] . NAME ( NAME [ ::: 1187
, ) ) NEWLINE DEDENT DEDENT ::: 1187
NAME in NAME ) : NEWLINE ::: 1187
NEWLINE INDENT NAME = ( NUMBER ::: 1186
. NAME == None : NEWLINE ::: 1186
) ) + STRING ) NEWLINE ::: 1186
) NEWLINE raise NEWLINE DEDENT DEDENT ::: 1186
] : NEWLINE INDENT for NAME ::: 1186
STRING NEWLINE DEDENT if NAME . ::: 1185
= NAME [ NAME ( NAME ::: 1185
while NAME . NAME ( ) ::: 1185
] = { STRING : NAME ::: 1185
STRING , NAME , NAME ( ::: 1185
: NUMBER , STRING : NAME ::: 1185
== STRING : NEWLINE INDENT raise ::: 1185
NAME ( None , NAME ) ::: 1184
, STRING + NAME . NAME ::: 1184
] NEWLINE NAME = [ ( ::: 1184
] ] ) NEWLINE NAME = ::: 1184
[ ] NEWLINE if NAME . ::: 1184
[ STRING ] == NAME : ::: 1184
= True ) NEWLINE if NAME ::: 1183
DEDENT NAME . NAME [ STRING ::: 1183
NAME += NUMBER NEWLINE DEDENT if ::: 1183
True NEWLINE NAME = NAME ( ::: 1182
( ) : NEWLINE INDENT pass ::: 1182
return True NEWLINE DEDENT NAME = ::: 1181
: { STRING : NAME } ::: 1181
. NAME ( ) > NUMBER ::: 1181
[ NUMBER ] == NUMBER NEWLINE ::: 1179
NAME ) NEWLINE DEDENT try : ::: 1179
= NAME ( ) NEWLINE try ::: 1179
) ] , NAME = STRING ::: 1179
NAME ) NEWLINE DEDENT NAME += ::: 1179
% NAME . NAME , NAME ::: 1179
= False ) , NAME . ::: 1179
NAME = NAME [ NAME [ ::: 1179
return NUMBER NEWLINE DEDENT return NAME ::: 1178
[ NUMBER ] ) . NAME ::: 1178
= NAME - NAME . NAME ::: 1178
[ ( NAME . NAME , ::: 1178
NAME ( NAME ) , ) ::: 1177
NAME ( ) == NUMBER : ::: 1177
STRING , NAME ) , ] ::: 1177
NAME ( NAME ) [ : ::: 1177
, STRING , { } ) ::: 1176
NUMBER , - NUMBER ) NEWLINE ::: 1176
NAME ) = NAME ( NAME ::: 1176
) NEWLINE NAME ( NAME + ::: 1175
NEWLINE return NAME NEWLINE DEDENT NAME ::: 1175
[ STRING ] , STRING , ::: 1175
( { STRING : NAME ( ::: 1175
STRING ] == NAME : NEWLINE ::: 1174
lambda NAME : NAME ( ) ::: 1174
( STRING , [ NAME . ::: 1174
STRING , NAME . NAME : ::: 1174
. . import NAME NEWLINE EOS ::: 1174
] ) , NAME = NAME ::: 1174
NEWLINE DEDENT DEDENT DEDENT NAME ( ::: 1173
NAME ( ) ) NEWLINE assert ::: 1173
% NAME NEWLINE NAME = STRING ::: 1173
] NEWLINE assert NAME ( NAME ::: 1172
NAME ) , ) NEWLINE EOS ::: 1172
[ NAME [ NAME ] for ::: 1172
return False NEWLINE DEDENT NAME . ::: 1171
] , NAME ) : NEWLINE ::: 1171
, True ) NEWLINE NAME = ::: 1171
= ( NAME + NAME ) ::: 1171
NAME NEWLINE DEDENT @ NAME . ::: 1171
return NAME [ NAME . NAME ::: 1171
NAME , NAME ) or NAME ::: 1171
] = [ ] NEWLINE DEDENT ::: 1170
} } NEWLINE NAME . NAME ::: 1170
NAME ( NAME [ : NAME ::: 1170
NAME in NAME ( ) . ::: 1170
NAME ) NEWLINE return NUMBER NEWLINE ::: 1170
global NAME , NAME , NAME ::: 1169
= NAME . NAME = NAME ::: 1169
NEWLINE while NAME < NUMBER : ::: 1169
] NEWLINE NAME = True NEWLINE ::: 1169
NAME , NAME ) NEWLINE with ::: 1169
, STRING ) , NAME ) ::: 1169
- NUMBER ] NEWLINE DEDENT DEDENT ::: 1168
STRING , NUMBER ) [ NUMBER ::: 1168
if NAME is None else NAME ::: 1168
, ] ) NEWLINE DEDENT EOS ::: 1168
in NAME : NEWLINE INDENT assert ::: 1168
) ) NEWLINE DEDENT DEDENT else ::: 1168
return { STRING : NAME ( ::: 1168
= None NEWLINE DEDENT NAME = ::: 1168
= True NEWLINE DEDENT def NAME ::: 1168
INDENT NAME -= NUMBER NEWLINE DEDENT ::: 1168
, NAME ) , ( NAME ::: 1168
NUMBER NEWLINE try : NEWLINE INDENT ::: 1168
{ } ) NEWLINE DEDENT EOS ::: 1167
= NUMBER , NAME = ( ::: 1167
STRING : { } , STRING ::: 1167
, NAME , NUMBER , NAME ::: 1167
NEWLINE ( NAME , NAME , ::: 1166
, STRING : True } NEWLINE ::: 1166
: True , STRING : STRING ::: 1166
: { } , STRING : ::: 1166
STRING : True , } NEWLINE ::: 1166
( ) == NUMBER : NEWLINE ::: 1166
. NAME ( ) in NAME ::: 1166
= NAME / NAME NEWLINE NAME ::: 1166
NUMBER ] ) NEWLINE for NAME ::: 1165
- NAME . NAME NEWLINE NAME ::: 1165
] NEWLINE NAME ( NAME . ::: 1165
( NAME ) == NAME . ::: 1165
* NAME . NAME ( ) ::: 1165
[ NAME ] . NAME NEWLINE ::: 1165
: STRING } } NEWLINE NAME ::: 1165
STRING ) , ) , NAME ::: 1165
. NAME ) . NAME NEWLINE ::: 1165
NAME = NAME - NAME . ::: 1164
NAME ) : NEWLINE INDENT continue ::: 1164
NAME = STRING NEWLINE NAME , ::: 1163
} , } NEWLINE NAME = ::: 1163
NAME . NAME ) - NUMBER ::: 1162
( lambda : NAME . NAME ::: 1162
global NAME , NAME NEWLINE NAME ::: 1162
( NAME , NUMBER ) , ::: 1161
NEWLINE NAME = NAME or NAME ::: 1161
, NUMBER ) ) , NAME ::: 1161
( NAME == NUMBER ) : ::: 1160
NAME . NAME != None : ::: 1160
[ STRING ] + STRING + ::: 1160
import NAME ; NAME . NAME ::: 1160
NEWLINE if NAME >= NUMBER : ::: 1160
DEDENT return NAME [ NUMBER ] ::: 1159
( ) NEWLINE return NAME , ::: 1159
STRING , } NEWLINE DEDENT EOS ::: 1159
. NAME NEWLINE DEDENT except : ::: 1159
NUMBER ) NEWLINE if not NAME ::: 1159
STRING , ) , NAME = ::: 1159
STRING } , NAME = [ ::: 1158
STRING : [ NAME . NAME ::: 1158
NEWLINE INDENT del NAME [ NAME ::: 1158
) != STRING : NEWLINE INDENT ::: 1158
, NAME . NAME : STRING ::: 1157
NEWLINE NAME = NUMBER ; NEWLINE ::: 1157
in NAME NEWLINE assert STRING in ::: 1157
NEWLINE DEDENT return NAME ( ) ::: 1157
NEWLINE if NAME [ NAME ] ::: 1157
NAME ) != NAME ( NAME ::: 1157
, } ) NEWLINE NAME . ::: 1157
NEWLINE DEDENT NAME = { } ::: 1157
DEDENT raise NAME ( STRING % ::: 1157
, NAME [ NUMBER ] [ ::: 1156
return NAME . NAME ( ( ::: 1156
, { STRING : { STRING ::: 1156
NAME + NAME NEWLINE DEDENT DEDENT ::: 1155
, NAME . NAME NEWLINE NAME ::: 1155
STRING , NAME ) ] NEWLINE ::: 1155
NAME - NUMBER ) : NEWLINE ::: 1154
while NAME <= NAME : NEWLINE ::: 1154
INDENT NAME = None NEWLINE if ::: 1154
] ) , NUMBER ) NEWLINE ::: 1154
NAME ( ) + STRING + ::: 1153
] == STRING NEWLINE DEDENT EOS ::: 1153
NAME = NUMBER ) NEWLINE assert ::: 1153
STRING : NAME ( NAME , ::: 1153
} ) NEWLINE return NAME ( ::: 1153
) [ NUMBER ] , NAME ::: 1153
* NAME . NAME NEWLINE DEDENT ::: 1153
NEWLINE INDENT return ( NAME ( ::: 1153
. NAME = STRING + NAME ::: 1151
== NUMBER NEWLINE DEDENT DEDENT EOS ::: 1151
. NAME NEWLINE DEDENT class NAME ::: 1151
while True : NEWLINE INDENT if ::: 1151
* NUMBER ) NEWLINE NAME . ::: 1151
+ NUMBER NEWLINE NAME . NAME ::: 1150
) + STRING NEWLINE NAME . ::: 1150
NAME ( NAME ) is not ::: 1150
* NUMBER ) NEWLINE NAME = ::: 1149
in NAME [ STRING ] . ::: 1149
] . NAME [ NUMBER ] ::: 1149
NEWLINE INDENT with NAME ( ) ::: 1148
= STRING NEWLINE with NAME . ::: 1147
INDENT break NEWLINE DEDENT DEDENT return ::: 1147
True ) , NAME . NAME ::: 1147
= NUMBER , NUMBER NEWLINE NAME ::: 1147
NAME ) NEWLINE assert ( NAME ::: 1147
NEWLINE INDENT NAME = [ [ ::: 1146
NEWLINE INDENT return NAME , NAME ::: 1146
] [ STRING ] : NEWLINE ::: 1145
NUMBER ] [ NUMBER ] , ::: 1145
( * NAME . NAME ) ::: 1144
} , NAME = NAME ( ::: 1144
NAME ( ) + STRING ) ::: 1144
NAME . NAME NEWLINE NAME , ::: 1144
NAME ) , ( NAME , ::: 1143
NAME = [ NAME [ STRING ::: 1143
STRING , NAME . NAME ] ::: 1143
NEWLINE return ( NAME ( NAME ::: 1143
% NAME for NAME in NAME ::: 1143
== STRING NEWLINE DEDENT DEDENT EOS ::: 1143
NAME ( NAME , [ NUMBER ::: 1143
) NEWLINE NAME ( STRING * ::: 1142
STRING : NEWLINE INDENT continue NEWLINE ::: 1142
NAME ] , NAME ) , ::: 1141
. NAME != None : NEWLINE ::: 1141
NAME NEWLINE break NEWLINE DEDENT DEDENT ::: 1141
NUMBER NEWLINE NAME ( NAME , ::: 1141
NAME ( STRING STRING % NAME ::: 1141
- NAME . NAME . NAME ::: 1141
) ) NEWLINE NAME ( ) ::: 1141
) , lambda NAME , NAME ::: 1141
NAME ( ) , lambda NAME ::: 1141
STRING NEWLINE if NAME == NUMBER ::: 1140
NEWLINE NAME = NUMBER NEWLINE STRING ::: 1140
NAME . NAME NEWLINE DEDENT class ::: 1140
] NEWLINE if not NAME : ::: 1140
STRING . NAME ( ( NAME ::: 1139
] } , NAME = [ ::: 1139
DEDENT DEDENT if NAME . NAME ::: 1138
= NAME [ NAME + NUMBER ::: 1138
NAME >= ( NUMBER , NUMBER ::: 1138
STRING NEWLINE while True : NEWLINE ::: 1138
NAME ) NEWLINE NAME = True ::: 1138
: NAME . NAME ( NUMBER ::: 1137
* NAME ) NEWLINE return NAME ::: 1137
, STRING % ( NAME . ::: 1137
NEWLINE INDENT STRING NEWLINE from . ::: 1137
NAME NEWLINE DEDENT DEDENT def NAME ::: 1137
return NEWLINE DEDENT for NAME in ::: 1136
, NAME , NAME [ NAME ::: 1136
DEDENT except : NEWLINE INDENT from ::: 1136
NUMBER } NEWLINE NAME = NAME ::: 1136
NEWLINE DEDENT if NAME not in ::: 1136
STRING , STRING , True ) ::: 1136
( STRING % NAME , STRING ::: 1136
NAME = NAME NEWLINE if not ::: 1136
NUMBER ) ) . NAME ( ::: 1136
NAME ( STRING ) == NAME ::: 1136
STRING ) ] NEWLINE NAME . ::: 1135
( lambda NAME : NAME [ ::: 1135
NEWLINE return STRING NEWLINE DEDENT DEDENT ::: 1135
>= ( NUMBER , NUMBER ) ::: 1135
if NAME is not None else ::: 1135
) or NAME ( NAME , ::: 1135
if NAME >= NAME : NEWLINE ::: 1135
] ) NEWLINE DEDENT DEDENT NAME ::: 1134
% NAME ( NAME ) NEWLINE ::: 1134
( ** NAME . NAME ) ::: 1134
NAME ) ) NEWLINE with NAME ::: 1134
, NUMBER ] : NEWLINE INDENT ::: 1133
NAME - NAME ( NAME ) ::: 1133
NAME ] + NAME [ NAME ::: 1133
NAME = True NEWLINE DEDENT def ::: 1133
NAME ) == NUMBER NEWLINE NAME ::: 1133
NAME , STRING % NAME . ::: 1133
in NAME ) NEWLINE NAME = ::: 1132
[ NAME ( NAME ( NAME ::: 1132
: NAME for NAME , NAME ::: 1132
. NAME [ NAME ( NAME ::: 1132
NAME ( NAME = lambda NAME ::: 1132
, STRING ] NEWLINE import NAME ::: 1131
NAME = NAME ( NAME - ::: 1131
STRING , STRING ] NEWLINE import ::: 1131
+= STRING + NAME ( NAME ::: 1131
NAME = NUMBER ; NEWLINE NAME ::: 1130
( NAME ) ) ] NEWLINE ::: 1130
INDENT import NAME NEWLINE DEDENT from ::: 1130
. NAME = [ NAME ] ::: 1130
) - NAME ( NAME ) ::: 1129
= STRING , ) NEWLINE DEDENT ::: 1129
NAME } , NAME = NAME ::: 1129
NAME . NAME >= ( NUMBER ::: 1128
NAME - NAME ) ** NUMBER ::: 1128
True , NAME = None , ::: 1128
raise NAME NEWLINE DEDENT return NAME ::: 1128
NUMBER , NUMBER ) ] ) ::: 1127
DEDENT DEDENT DEDENT else : NEWLINE ::: 1127
. NAME ( { } ) ::: 1127
. NAME ( [ NUMBER ] ::: 1127
( ) : NEWLINE INDENT while ::: 1126
( NAME , STRING , [ ::: 1126
= NAME - NUMBER NEWLINE DEDENT ::: 1126
[ NAME . NAME , STRING ::: 1126
] . NAME ( ) . ::: 1125
[ STRING ] NEWLINE del NAME ::: 1125
= [ STRING ] NEWLINE from ::: 1124
NAME . NAME == NUMBER ) ::: 1124
. NAME >= ( NUMBER , ::: 1124
raise NAME ( STRING , NAME ::: 1124
lambda NAME : None ) NEWLINE ::: 1124
STRING , NUMBER , STRING ) ::: 1124
NAME ( lambda : NAME . ::: 1124
NAME ] NEWLINE if NAME . ::: 1124
else : NEWLINE INDENT pass NEWLINE ::: 1123
NEWLINE STRING NEWLINE NAME = ( ::: 1123
[ STRING ] NEWLINE DEDENT if ::: 1123
, NAME NEWLINE if NAME == ::: 1123
for NAME in NAME [ : ::: 1123
DEDENT else : NEWLINE INDENT pass ::: 1123
= NAME ( ) NEWLINE from ::: 1122
STRING , ) NEWLINE def NAME ::: 1122
@ NAME . NAME . NAME ::: 1122
* NAME . NAME ( NUMBER ::: 1122
- NAME . NAME ) NEWLINE ::: 1121
) ) ) NEWLINE DEDENT else ::: 1121
= True NEWLINE NAME = NUMBER ::: 1121
. NAME [ STRING ] + ::: 1121
== NAME ( NAME ) : ::: 1121
elif NAME ( NAME ) == ::: 1121
DEDENT return NAME ( STRING , ::: 1121
( [ ( STRING , NAME ::: 1121
NAME [ NAME ] != NAME ::: 1121
. NAME ( ** NAME . ::: 1120
) ( NAME ) NEWLINE DEDENT ::: 1120
NAME [ STRING ] ) . ::: 1120
: [ STRING ] } NEWLINE ::: 1120
lambda NAME , NAME : None ::: 1120
True ) NEWLINE return NAME NEWLINE ::: 1120
raise NAME . NAME . NAME ::: 1120
NAME ( NAME = ( NUMBER ::: 1120
NEWLINE NAME = True NEWLINE def ::: 1119
NAME or not NAME . NAME ::: 1119
= [ NAME ( NAME . ::: 1119
) NEWLINE import NAME , NAME ::: 1118
NAME ) [ NUMBER ] ) ::: 1118
NEWLINE DEDENT return NAME [ NUMBER ::: 1118
STRING ) NEWLINE NAME [ NAME ::: 1118
NUMBER , NUMBER ] NEWLINE DEDENT ::: 1118
!= NAME . NAME . NAME ::: 1117
True ) , STRING : NAME ::: 1117
NUMBER NEWLINE NAME = [ STRING ::: 1117
( ) NEWLINE NAME = None ::: 1117
% NAME . NAME [ NUMBER ::: 1117
, STRING , STRING , NUMBER ::: 1117
: { STRING : True } ::: 1116
] ) NEWLINE DEDENT NAME ( ::: 1116
False ) NEWLINE def NAME ( ::: 1116
. NAME + STRING NEWLINE DEDENT ::: 1116
NAME . NAME [ : , ::: 1116
NAME [ : , NAME ] ::: 1116
% ( NAME . NAME [ ::: 1115
. NAME ( ( NAME [ ::: 1115
STRING NEWLINE STRING NEWLINE STRING NEWLINE ::: 1115
( ) NEWLINE if STRING in ::: 1115
DEDENT return NAME ( NAME = ::: 1115
) NEWLINE assert ( NAME ( ::: 1115
NEWLINE DEDENT DEDENT if not NAME ::: 1114
NAME is True : NEWLINE INDENT ::: 1114
) ) NEWLINE DEDENT return STRING ::: 1114
NEWLINE INDENT return [ STRING , ::: 1113
, NAME [ NAME ] NEWLINE ::: 1113
if NAME . NAME == None ::: 1112
- NUMBER ] NEWLINE NAME . ::: 1112
NAME = [ STRING , NAME ::: 1112
DEDENT DEDENT DEDENT DEDENT return NAME ::: 1112
{ NUMBER : STRING , NUMBER ::: 1112
NUMBER ] , NAME [ NAME ::: 1112
STRING ] + STRING + NAME ::: 1112
, [ NAME , NAME ] ::: 1112
yield NAME . NAME ( ) ::: 1111
NEWLINE NAME ( STRING * NUMBER ::: 1111
INDENT NAME = None NEWLINE def ::: 1111
return NAME NEWLINE DEDENT NAME . ::: 1111
BOS NEWLINE NAME ( STRING ) ::: 1111
== NAME . NAME ( NAME ::: 1110
STRING NEWLINE return NAME ( ) ::: 1110
NAME ( NAME ) NEWLINE yield ::: 1110
= [ [ NUMBER , NUMBER ::: 1110
NAME ( NAME , - NUMBER ::: 1110
NAME ) ) NEWLINE NAME += ::: 1110
return [ ] NEWLINE DEDENT EOS ::: 1110
, NAME . NAME , None ::: 1110
NEWLINE return NAME ( [ NAME ::: 1109
NUMBER ) : NEWLINE INDENT raise ::: 1109
. NAME ) ) , ] ::: 1109
NAME ) ) NEWLINE if not ::: 1109
% NAME ) NEWLINE DEDENT else ::: 1108
NAME . NAME = lambda NAME ::: 1108
( NAME ) ; NEWLINE NAME ::: 1108
NAME , NAME = ( STRING ::: 1108
NEWLINE STRING NEWLINE STRING NEWLINE import ::: 1107
) NEWLINE if NAME != None ::: 1107
True NEWLINE DEDENT except : NEWLINE ::: 1107
NAME * NAME ( NAME ) ::: 1107
NEWLINE NAME = NAME ( ** ::: 1107
NUMBER NEWLINE DEDENT NAME ( STRING ::: 1106
] NEWLINE import NAME NEWLINE import ::: 1106
NAME in [ NUMBER , NUMBER ::: 1106
if not NAME in NAME . ::: 1106
[ NAME ( STRING ) , ::: 1105
( NAME ) == STRING NEWLINE ::: 1105
STRING NEWLINE return STRING % ( ::: 1105
== NUMBER : NEWLINE INDENT if ::: 1105
- NUMBER NEWLINE DEDENT DEDENT EOS ::: 1105
NAME } NEWLINE return NAME ( ::: 1105
] ) : NEWLINE INDENT if ::: 1105
+ NAME + NAME + NAME ::: 1104
( NAME ) NEWLINE return [ ::: 1104
( ) , NAME = { ::: 1104
NUMBER : ] . NAME ( ::: 1104
NAME [ NAME ] = STRING ::: 1104
] ) ) NEWLINE return NAME ::: 1103
NAME ( ) and NAME . ::: 1102
NAME + NAME + NAME + ::: 1102
) ) ) NEWLINE for NAME ::: 1102
INDENT return STRING % NAME NEWLINE ::: 1102
. NAME ) NEWLINE from NAME ::: 1102
STRING NEWLINE NAME = [ NUMBER ::: 1102
DEDENT else : NEWLINE INDENT break ::: 1102
NAME ] , NAME , NAME ::: 1102
NAME . NAME , [ ] ::: 1102
. NAME . NAME ( lambda ::: 1101
NEWLINE DEDENT with NAME ( STRING ::: 1101
NAME : NAME ( ) , ::: 1101
, STRING ) NEWLINE NAME [ ::: 1101
NAME ) NEWLINE NAME [ NUMBER ::: 1101
) ] = NAME NEWLINE DEDENT ::: 1101
, ( STRING , ) , ::: 1101
assert NAME is not None NEWLINE ::: 1100
STRING ] == STRING NEWLINE DEDENT ::: 1100
) NEWLINE DEDENT return False NEWLINE ::: 1100
( NAME [ : NUMBER ] ::: 1100
return NAME . NAME ( ** ::: 1100
NAME [ NAME ] = ( ::: 1100
( ) ] NEWLINE DEDENT EOS ::: 1100
NAME ) > NUMBER and NAME ::: 1100
NAME in [ NAME . NAME ::: 1100
DEDENT if NAME not in NAME ::: 1099
( ) and NAME . NAME ::: 1099
) / NAME . NAME ( ::: 1099
NAME ( * NAME ) ) ::: 1099
NEWLINE return { STRING : STRING ::: 1099
. NAME == NAME ) . ::: 1099
NAME ] NEWLINE DEDENT if NAME ::: 1098
NAME ( NAME : NAME , ::: 1098
> NUMBER : NEWLINE INDENT if ::: 1098
. NAME ( [ STRING % ::: 1098
break NEWLINE DEDENT NAME = NAME ::: 1098
NAME ( { STRING : [ ::: 1097
NAME in NAME ( STRING ) ::: 1097
NAME = STRING STRING ) NEWLINE ::: 1097
( ) , lambda NAME , ::: 1097
STRING % NAME ) NEWLINE if ::: 1097
NAME ) * NAME ( NAME ::: 1097
if not NAME [ STRING ] ::: 1097
NUMBER , NAME [ NUMBER ] ::: 1097
NAME , NAME ) as NAME ::: 1096
. NAME , STRING % NAME ::: 1095
) , [ STRING , STRING ::: 1095
( NAME , NAME ) == ::: 1095
import NAME NEWLINE def NAME ( ::: 1095
NAME , ** NAME ) ) ::: 1095
import NAME NEWLINE class NAME ( ::: 1095
. NAME import * NEWLINE EOS ::: 1095
] ) NEWLINE DEDENT if NAME ::: 1095
NUMBER ] . NAME NEWLINE NAME ::: 1094
NUMBER , NUMBER ] : NEWLINE ::: 1094
if NAME == - NUMBER : ::: 1094
( NUMBER ) ] NEWLINE NAME ::: 1094
= True ) , STRING : ::: 1094
NAME ( NAME ) <= NUMBER ::: 1094
NAME ] NEWLINE if NAME ( ::: 1094
= { STRING : True , ::: 1094
except : NEWLINE INDENT return NAME ::: 1094
NAME ] ) . NAME ( ::: 1093
- NAME . NAME ( ) ::: 1093
NEWLINE NAME = NAME ( None ::: 1093
) ) for NAME , NAME ::: 1093
NAME in NAME ] ) ) ::: 1093
. NAME == STRING and NAME ::: 1093
NAME ) ) ) NEWLINE EOS ::: 1093
import * NEWLINE NAME = { ::: 1092
NAME = False ) NEWLINE return ::: 1092
return [ ] NEWLINE DEDENT NAME ::: 1092
NEWLINE while NAME <= NAME : ::: 1092
NAME ( NAME ) [ STRING ::: 1091
, NUMBER , NAME = STRING ::: 1091
( NAME ) [ STRING ] ::: 1091
( STRING ) ; NEWLINE NAME ::: 1090
if NAME . NAME < NAME ::: 1090
INDENT STRING NEWLINE return NAME [ ::: 1090
{ STRING : True } , ::: 1090
, NAME = NUMBER ) . ::: 1090
NAME = NUMBER NEWLINE DEDENT if ::: 1090
[ : NUMBER ] NEWLINE DEDENT ::: 1090
= True ) , NAME . ::: 1089
, STRING , False ) NEWLINE ::: 1089
- NAME ) NEWLINE NAME = ::: 1089
True NEWLINE NAME = NUMBER NEWLINE ::: 1089
STRING NEWLINE from . . NAME ::: 1088
NAME , NAME , NAME + ::: 1088
STRING NEWLINE NAME = ( ( ::: 1088
!= STRING : NEWLINE INDENT raise ::: 1088
NAME = - NUMBER ) NEWLINE ::: 1088
( NAME , [ NAME ] ::: 1088
INDENT return NAME . NAME + ::: 1088
) and NAME ( NAME , ::: 1088
NUMBER * NAME NEWLINE NAME = ::: 1088
( NAME = ( NUMBER , ::: 1087
: NAME ( ) , STRING ::: 1087
, { STRING : NUMBER } ::: 1087
NAME ] == NAME : NEWLINE ::: 1086
= NAME [ NUMBER : NUMBER ::: 1086
( ) NEWLINE assert NAME == ::: 1086
False , NAME = NUMBER ) ::: 1086
NAME . NAME ( lambda : ::: 1086
NEWLINE NAME += STRING % NAME ::: 1086
NAME += STRING % NAME NEWLINE ::: 1086
) ) NEWLINE return NAME , ::: 1085
return NAME ( ** NAME ) ::: 1085
else : NEWLINE INDENT break NEWLINE ::: 1085
return STRING + NAME ( NAME ::: 1084
STRING NEWLINE return ( NAME . ::: 1084
except NAME : NEWLINE INDENT if ::: 1084
. NAME ) , ) NEWLINE ::: 1084
True : NEWLINE INDENT if NAME ::: 1084
INDENT raise NAME NEWLINE DEDENT return ::: 1083
( NAME ) and NAME . ::: 1083
( NAME - NAME ) ** ::: 1083
NAME , NAME ( NAME = ::: 1082
, lambda NAME : None ) ::: 1082
del NAME . NAME NEWLINE DEDENT ::: 1082
INDENT break NEWLINE DEDENT DEDENT NAME ::: 1082
True ) NEWLINE DEDENT else : ::: 1082
} , NAME = NAME ) ::: 1081
NUMBER NEWLINE if NAME : NEWLINE ::: 1081
except : NEWLINE INDENT from NAME ::: 1081
. NAME ) + STRING NEWLINE ::: 1081
NEWLINE NAME ( NAME ( NUMBER ::: 1081
NAME . NAME ( False , ::: 1081
) NEWLINE if STRING not in ::: 1081
STRING ] . NAME = NAME ::: 1081
( ) NEWLINE if NAME [ ::: 1081
NAME , ) : NEWLINE INDENT ::: 1081
NAME . NAME , NAME NEWLINE ::: 1081
NEWLINE NAME . NAME ( lambda ::: 1080
STRING NEWLINE DEDENT NAME = STRING ::: 1080
) ) NEWLINE with NAME . ::: 1080
( STRING , ) ) NEWLINE ::: 1080
NAME , } NEWLINE return NAME ::: 1080
STRING ] NEWLINE try : NEWLINE ::: 1079
raise NAME . NAME ( ) ::: 1079
NAME ] [ STRING ] = ::: 1079
( ) NEWLINE return ( NAME ::: 1079
, ) NEWLINE from . NAME ::: 1079
( STRING ) NEWLINE return True ::: 1079
= NUMBER NEWLINE NAME = None ::: 1078
STRING ] == STRING NEWLINE assert ::: 1078
NEWLINE DEDENT if NAME < NUMBER ::: 1078
, NUMBER ) NEWLINE DEDENT else ::: 1078
INDENT @ NAME . NAME NEWLINE ::: 1078
NAME = NUMBER NEWLINE while ( ::: 1078
. NAME ( ) NEWLINE class ::: 1078
NAME = True NEWLINE if NAME ::: 1078
if NAME [ NUMBER ] != ::: 1078
DEDENT DEDENT except NAME . NAME ::: 1077
NAME [ NAME ] ) : ::: 1077
NAME ( STRING , None , ::: 1077
NAME + NUMBER NEWLINE DEDENT NAME ::: 1077
NEWLINE if NAME % NUMBER == ::: 1077
NEWLINE if NAME <= NUMBER : ::: 1075
NAME = NAME . NAME or ::: 1075
NAME , NAME ( ) , ::: 1075
NAME = ( NUMBER , ) ::: 1075
NUMBER , NAME = - NUMBER ::: 1075
NAME ) ) NEWLINE DEDENT elif ::: 1075
NEWLINE NAME . NAME = lambda ::: 1075
) ) NEWLINE NAME [ NAME ::: 1074
NEWLINE NAME ( [ STRING , ::: 1074
STRING NEWLINE DEDENT DEDENT return NAME ::: 1074
NAME in NAME ) ) NEWLINE ::: 1073
( NAME ) ) NEWLINE assert ::: 1073
NAME = - NUMBER ) : ::: 1073
return NAME ( NAME [ STRING ::: 1072
INDENT pass NEWLINE DEDENT DEDENT NAME ::: 1072
( NAME ) != NAME ( ::: 1072
NAME ) NEWLINE if NAME not ::: 1072
. NAME == NUMBER NEWLINE NAME ::: 1072
INDENT NAME += STRING . NAME ::: 1072
( NAME . NAME ( { ::: 1072
. NAME . NAME } ) ::: 1072
assert NAME . NAME ( NUMBER ::: 1072
= - NUMBER ) : NEWLINE ::: 1072
NAME ) NEWLINE ( NAME , ::: 1071
NEWLINE NAME = NAME NEWLINE for ::: 1071
NEWLINE DEDENT class NAME ( NAME ::: 1071
. NAME ( ) * NUMBER ::: 1071
NEWLINE INDENT NAME = NAME % ::: 1071
STRING % NAME for NAME in ::: 1071
( NAME ) NEWLINE DEDENT @ ::: 1071
= lambda NAME , NAME : ::: 1071
NEWLINE assert NAME == NUMBER NEWLINE ::: 1070
NEWLINE INDENT NAME += STRING . ::: 1070
NAME NEWLINE if not NAME ( ::: 1070
STRING ) NEWLINE NAME = False ::: 1070
NAME import NAME NEWLINE DEDENT import ::: 1070
INDENT from . import NAME NEWLINE ::: 1070
>= NUMBER : NEWLINE INDENT return ::: 1070
NAME = False , ) NEWLINE ::: 1069
assert STRING in NAME NEWLINE DEDENT ::: 1069
NEWLINE NAME ( NUMBER , NAME ::: 1069
( STRING STRING STRING STRING ) ::: 1069
, STRING : ( NUMBER , ::: 1069
[ NUMBER ] ] ) NEWLINE ::: 1069
NUMBER ) NEWLINE if NAME == ::: 1069
+= NUMBER NEWLINE DEDENT if NAME ::: 1069
. NAME ( NAME = lambda ::: 1069
+ STRING , NAME . NAME ::: 1068
NEWLINE NAME = False NEWLINE if ::: 1068
INDENT NAME = NUMBER NEWLINE if ::: 1068
: NEWLINE INDENT NAME = yield ::: 1067
NAME [ NAME ] += NAME ::: 1067
DEDENT DEDENT return STRING . NAME ::: 1067
] ] ) NEWLINE DEDENT EOS ::: 1067
, NAME ) ] NEWLINE NAME ::: 1067
NAME [ STRING ] } NEWLINE ::: 1067
. NAME ( None , STRING ::: 1066
[ - NUMBER ] == STRING ::: 1066
, ** NAME ) ) NEWLINE ::: 1065
NUMBER ] NEWLINE if NAME . ::: 1065
STRING : STRING } ] NEWLINE ::: 1065
) NEWLINE while NAME : NEWLINE ::: 1065
NUMBER * NAME . NAME ) ::: 1065
. NAME : NEWLINE INDENT from ::: 1064
STRING , NAME ( ) , ::: 1064
. NAME , } ) NEWLINE ::: 1064
[ STRING , ] NEWLINE EOS ::: 1064
[ STRING ] NEWLINE assert NAME ::: 1064
NAME = { STRING : False ::: 1064
== NUMBER and NAME . NAME ::: 1064
NAME = NAME ( [ ] ::: 1064
STRING , STRING ] } , ::: 1064
} NEWLINE NAME ( NAME , ::: 1063
, ) NEWLINE NAME = { ::: 1063
NUMBER ] + STRING ) NEWLINE ::: 1063
if NAME else NAME . NAME ::: 1063
for NAME in NAME } NEWLINE ::: 1063
NAME , - NUMBER ) NEWLINE ::: 1063
* NAME + NAME * NAME ::: 1063
, STRING ) and NAME . ::: 1062
NAME = ( ) NEWLINE NAME ::: 1062
NEWLINE INDENT while NAME . NAME ::: 1062
: NEWLINE INDENT while NAME . ::: 1062
= None NEWLINE DEDENT NAME . ::: 1062
== NAME NEWLINE DEDENT DEDENT EOS ::: 1062
if NAME in ( STRING , ::: 1062
+ NAME [ NUMBER : ] ::: 1062
) , NAME [ STRING ] ::: 1062
NAME ( STRING ) } NEWLINE ::: 1061
NEWLINE assert NAME is not None ::: 1061
( STRING STRING ) ) NEWLINE ::: 1061
( NAME ( STRING ) % ::: 1061
) , STRING ) ) ) ::: 1061
NAME = STRING STRING STRING STRING ::: 1061
NAME ] = [ ] NEWLINE ::: 1061
+ NAME . NAME , NAME ::: 1061
NAME . NAME ( ) < ::: 1060
NAME ( STRING ) == NUMBER ::: 1060
if NAME . NAME != None ::: 1060
( NAME = lambda NAME : ::: 1060
[ NUMBER : ] , NAME ::: 1060
( NAME ( NAME ) > ::: 1060
STRING ) , STRING : STRING ::: 1059
INDENT STRING NEWLINE NAME [ STRING ::: 1059
STRING ) NEWLINE DEDENT with NAME ::: 1059
INDENT NAME ( NAME ( STRING ::: 1059
if NAME . NAME < NUMBER ::: 1059
STRING ] NEWLINE DEDENT NAME = ::: 1059
= NAME NEWLINE break NEWLINE DEDENT ::: 1058
NAME ) ( NAME ) NEWLINE ::: 1058
NEWLINE DEDENT DEDENT if NAME . ::: 1058
NEWLINE INDENT if not NAME in ::: 1058
= False ) NEWLINE def NAME ::: 1058
NAME = False ) NEWLINE def ::: 1058
NAME ( STRING ) + NUMBER ::: 1058
INDENT assert NAME . NAME . ::: 1057
NEWLINE DEDENT DEDENT DEDENT else : ::: 1057
( STRING ) NEWLINE DEDENT try ::: 1056
NAME += NAME NEWLINE NAME += ::: 1056
None , NAME = NAME ) ::: 1056
NAME [ : NAME . NAME ::: 1056
INDENT STRING NEWLINE @ NAME . ::: 1055
* NEWLINE NAME . NAME ( ::: 1055
INDENT NAME = NAME NEWLINE if ::: 1055
+ STRING , NAME ) NEWLINE ::: 1055
INDENT if NAME != STRING : ::: 1055
NAME . NAME , None , ::: 1055
STRING : NEWLINE INDENT return False ::: 1055
INDENT ( NAME , NAME , ::: 1055
] } NEWLINE NAME . NAME ::: 1055
STRING NEWLINE assert NAME ( STRING ::: 1054
NAME = ( NAME ( STRING ::: 1054
NAME ) NEWLINE pass NEWLINE DEDENT ::: 1054
[ STRING ] , NAME , ::: 1054
NEWLINE NAME = False NEWLINE for ::: 1053
{ } ) . NAME ( ::: 1053
STRING NEWLINE import NAME NEWLINE EOS ::: 1053
STRING , STRING ] NEWLINE if ::: 1053
NAME ) , ) NEWLINE DEDENT ::: 1052
NAME and NAME [ STRING ] ::: 1052
= NAME ( NAME + NAME ::: 1052
: NEWLINE INDENT NAME *= NAME ::: 1051
. NAME ( NAME ) is ::: 1051
None ) : NEWLINE INDENT try ::: 1051
) = NAME . NAME . ::: 1051
, NAME ( NAME ) ] ::: 1050
if ( NAME == STRING ) ::: 1050
, None , None ) NEWLINE ::: 1050
STRING , NAME : STRING , ::: 1050
INDENT NAME = lambda NAME : ::: 1050
( NAME ) == NUMBER ) ::: 1049
( ) + STRING + NAME ::: 1049
NUMBER , NAME - NUMBER ) ::: 1049
NEWLINE NAME = STRING if NAME ::: 1049
STRING NEWLINE DEDENT if NAME == ::: 1049
+ STRING NEWLINE return NAME NEWLINE ::: 1049
] = NUMBER NEWLINE NAME = ::: 1048
break NEWLINE DEDENT else : NEWLINE ::: 1048
, - NUMBER ) NEWLINE DEDENT ::: 1048
( NAME / NAME ) NEWLINE ::: 1048
NAME ) , STRING . NAME ::: 1048
( NAME . NAME + NUMBER ::: 1048
, STRING : [ ] } ::: 1048
assert NAME . NAME [ NUMBER ::: 1048
( NAME : NAME ) -> ::: 1047
NAME ( STRING ) , [ ::: 1047
NAME = [ NAME [ NAME ::: 1047
None NEWLINE DEDENT return NAME ( ::: 1047
STRING , ** NAME ) : ::: 1047
] ) , ) , ] ::: 1046
NAME NEWLINE while True : NEWLINE ::: 1046
= STRING ) ) , ] ::: 1046
NUMBER ] , NAME = STRING ::: 1046
[ NAME ( STRING ) ] ::: 1045
) NEWLINE if ( NAME == ::: 1045
) ) NEWLINE NAME += NUMBER ::: 1045
. NAME . NAME and NAME ::: 1045
] NEWLINE DEDENT NAME = [ ::: 1045
NAME , NAME : None , ::: 1045
NEWLINE INDENT return NAME + NAME ::: 1045
NAME ; NAME . NAME ( ::: 1044
] NEWLINE if NAME in NAME ::: 1044
NAME ( [ NAME [ NUMBER ::: 1044
, NAME . NAME + NAME ::: 1044
( STRING ) , } NEWLINE ::: 1043
) ] NEWLINE DEDENT return NAME ::: 1043
NUMBER ] [ STRING ] , ::: 1043
) NEWLINE DEDENT DEDENT return STRING ::: 1043
INDENT NAME = NAME - NUMBER ::: 1042
NUMBER ) NEWLINE DEDENT elif NAME ::: 1042
DEDENT else : NEWLINE INDENT assert ::: 1042
, STRING , True ) NEWLINE ::: 1042
+ NAME , NAME ) NEWLINE ::: 1042
pass NEWLINE DEDENT DEDENT return NAME ::: 1042
( STRING ) and NAME . ::: 1042
, NAME ( NAME = NUMBER ::: 1042
[ { STRING : STRING } ::: 1041
( NAME : NAME , NAME ::: 1041
+= NUMBER NEWLINE DEDENT NAME . ::: 1041
NAME , NAME ] NEWLINE EOS ::: 1041
>= NAME . NAME : NEWLINE ::: 1041
NUMBER , NUMBER ] ) , ::: 1041
NAME -= NUMBER NEWLINE DEDENT DEDENT ::: 1040
STRING ) , ( NAME , ::: 1040
== STRING NEWLINE assert NAME [ ::: 1040
INDENT NAME ( NAME + STRING ::: 1040
DEDENT NAME = NAME NEWLINE NAME ::: 1040
STRING ] ) NEWLINE assert NAME ::: 1040
NAME + STRING NEWLINE DEDENT DEDENT ::: 1040
STRING NEWLINE STRING NEWLINE from NAME ::: 1040
STRING NEWLINE return True NEWLINE DEDENT ::: 1040
NUMBER } ) NEWLINE NAME . ::: 1040
= STRING NEWLINE if NAME ( ::: 1039
= STRING NEWLINE @ NAME . ::: 1039
: NAME ( NAME ( NAME ::: 1039
STRING + NAME , NAME = ::: 1039
. NAME ( ) ) [ ::: 1039
% { STRING : NAME . ::: 1039
is not NAME : NEWLINE INDENT ::: 1038
True ) NEWLINE NAME ( STRING ::: 1038
while NAME . NAME : NEWLINE ::: 1037
. NAME } NEWLINE NAME . ::: 1037
STRING NEWLINE with NAME ( STRING ::: 1037
NAME ] : NEWLINE INDENT if ::: 1036
( STRING , STRING , [ ::: 1036
STRING ) NEWLINE raise NAME ( ::: 1036
( NUMBER ) NEWLINE DEDENT except ::: 1036
NAME ] NEWLINE NAME = STRING ::: 1036
+= NAME NEWLINE NAME . NAME ::: 1036
: NAME } NEWLINE DEDENT DEDENT ::: 1036
= [ NAME ] , NAME ::: 1036
) , NAME [ NUMBER ] ::: 1036
NEWLINE NAME ( NAME ) . ::: 1035
STRING NEWLINE NAME ( NAME ( ::: 1035
: NEWLINE INDENT return NAME * ::: 1035
] [ NUMBER ] . NAME ::: 1035
, NAME ) in NAME : ::: 1034
) is not None : NEWLINE ::: 1034
: False , STRING : True ::: 1034
with NAME : NEWLINE INDENT NAME ::: 1034
None , NAME = NAME . ::: 1034
INDENT try : NEWLINE INDENT with ::: 1034
STRING ] } ) NEWLINE EOS ::: 1034
[ STRING ] NEWLINE import NAME ::: 1034
{ } NEWLINE DEDENT NAME = ::: 1032
: { STRING : NAME , ::: 1032
= NAME NEWLINE try : NEWLINE ::: 1032
] NEWLINE if not NAME . ::: 1032
INDENT NAME = ( NAME + ::: 1032
= [ STRING ] ) , ::: 1032
, STRING : { } , ::: 1032
NEWLINE with NAME . NAME : ::: 1032
[ NAME ( NAME ) - ::: 1031
if NAME ( NAME ) >= ::: 1031
DEDENT NAME . NAME = [ ::: 1031
NAME ( NUMBER , NAME - ::: 1031
NUMBER ] NEWLINE if NAME == ::: 1031
NEWLINE DEDENT if NAME [ NUMBER ::: 1031
NAME : None , lambda NAME ::: 1030
) == NAME NEWLINE DEDENT DEDENT ::: 1030
) ] ) NEWLINE return NAME ::: 1030
STRING % NAME NEWLINE DEDENT DEDENT ::: 1029
) ] for NAME in NAME ::: 1029
NAME * NAME + NAME * ::: 1029
: NAME ( ) , lambda ::: 1029
STRING NEWLINE import NAME NEWLINE try ::: 1029
[ NUMBER ] , NAME ( ::: 1029
, STRING , NAME = False ::: 1029
, None ) : NEWLINE INDENT ::: 1029
, NAME : None , lambda ::: 1029
+ NAME NEWLINE DEDENT else : ::: 1028
None , lambda NAME : None ::: 1028
NUMBER : NUMBER ] NEWLINE NAME ::: 1028
: None , lambda NAME : ::: 1028
NAME ( ) - NAME NEWLINE ::: 1028
in NAME ( NAME ) if ::: 1028
NUMBER ) . NAME ( STRING ::: 1028
DEDENT @ NAME . NAME ( ::: 1028
, NUMBER ) for NAME in ::: 1028
raise NAME ( STRING STRING % ::: 1027
return False NEWLINE DEDENT def NAME ::: 1027
NAME ( NAME = STRING % ::: 1027
= NAME [ NAME ] , ::: 1027
STRING ] ) NEWLINE for NAME ::: 1027
. NAME = [ NUMBER , ::: 1027
= yield NAME . NAME ( ::: 1027
STRING , STRING ] ] NEWLINE ::: 1027
, NAME , NAME NEWLINE if ::: 1027
NAME = False , ** NAME ::: 1026
NAME ) ) , NAME ) ::: 1026
( STRING % NAME [ STRING ::: 1026
. NAME [ NUMBER : NUMBER ::: 1026
] = STRING . NAME ( ::: 1026
NEWLINE return NAME + NAME NEWLINE ::: 1026
, NAME ( NAME [ STRING ::: 1025
NEWLINE DEDENT import NAME NEWLINE NAME ::: 1025
NUMBER , NUMBER NEWLINE NAME = ::: 1025
NEWLINE DEDENT import NAME NEWLINE from ::: 1025
return [ STRING ] NEWLINE DEDENT ::: 1025
DEDENT return NAME . NAME == ::: 1025
NAME / NAME NEWLINE NAME = ::: 1025
NAME [ NUMBER ] ] ) ::: 1025
. NAME = NUMBER NEWLINE return ::: 1024
NAME ( NUMBER , NAME [ ::: 1024
NAME [ STRING ] ] = ::: 1024
if NAME . NAME else STRING ::: 1024
!= NAME : NEWLINE INDENT return ::: 1024
False NEWLINE try : NEWLINE INDENT ::: 1024
NAME [ NAME ] < NAME ::: 1023
DEDENT if NAME . NAME != ::: 1023
import * NEWLINE if NAME == ::: 1023
NAME if NAME ( NAME , ::: 1023
( ) ) , ( STRING ::: 1023
NEWLINE assert NAME ( NAME [ ::: 1023
NAME NEWLINE NAME += NAME NEWLINE ::: 1023
NAME . NAME ] NEWLINE if ::: 1022
) : NAME . NAME ( ::: 1022
( STRING + NAME , NAME ::: 1022
is None or NAME . NAME ::: 1022
DEDENT return True NEWLINE DEDENT DEDENT ::: 1022
NUMBER NEWLINE while NAME > NUMBER ::: 1021
NAME == NAME NEWLINE assert NAME ::: 1021
NAME = NAME NEWLINE @ NAME ::: 1021
: NEWLINE INDENT yield ( NAME ::: 1021
INDENT NAME ( NAME = NAME ::: 1021
, NAME ) , ) NEWLINE ::: 1021
, NUMBER ) ) : NEWLINE ::: 1021
[ NUMBER ] = NAME . ::: 1021
STRING , NUMBER , NAME = ::: 1020
= STRING ) , NAME . ::: 1020
STRING , STRING ] } NEWLINE ::: 1020
NEWLINE raise NAME NEWLINE DEDENT def ::: 1020
INDENT NAME = NAME ( lambda ::: 1020
if NAME == STRING and NAME ::: 1020
. NAME += NAME NEWLINE DEDENT ::: 1020
, NAME , NAME NEWLINE try ::: 1020
{ STRING : None , STRING ::: 1020
. NAME ] NEWLINE return NAME ::: 1020
STRING ) : NEWLINE INDENT try ::: 1019
= STRING NEWLINE return NAME ( ::: 1019
( NUMBER , NAME = NAME ::: 1019
STRING ] ) NEWLINE NAME [ ::: 1018
. NAME ( { NAME : ::: 1018
. NAME ( ) ] = ::: 1018
STRING + NAME NEWLINE NAME . ::: 1018
NUMBER } NEWLINE NAME . NAME ::: 1018
* NEWLINE if NAME == STRING ::: 1018
+= STRING + NAME . NAME ::: 1018
= NAME [ : NUMBER ] ::: 1018
) ] ) , ) , ::: 1018
] = STRING NEWLINE DEDENT DEDENT ::: 1017
NEWLINE NAME = STRING + STRING ::: 1017
STRING ] NEWLINE from NAME . ::: 1017
, NAME [ NAME ] [ ::: 1017
[ STRING ] = None NEWLINE ::: 1017
if NAME ( ) : NEWLINE ::: 1017
) NEWLINE DEDENT from NAME import ::: 1016
DEDENT if NAME [ NUMBER ] ::: 1016
NUMBER , NUMBER ) NEWLINE return ::: 1016
( NAME in NAME . NAME ::: 1016
= NAME ( NAME = ( ::: 1016
NAME = True ) NEWLINE assert ::: 1016
NUMBER ] . NAME NEWLINE DEDENT ::: 1016
. NAME , False ) NEWLINE ::: 1015
NEWLINE NAME ( NAME + STRING ::: 1015
( NAME = [ NAME . ::: 1015
= NUMBER NEWLINE NAME = - ::: 1015
NEWLINE NAME = NAME [ - ::: 1015
NAME ( NUMBER * NAME . ::: 1014
NAME = NAME ( ( STRING ::: 1014
( STRING STRING % ( NAME ::: 1014
) , STRING , NAME . ::: 1014
= NUMBER NEWLINE DEDENT if NAME ::: 1014
[ NUMBER : ] ) ) ::: 1014
) NEWLINE assert NAME == NUMBER ::: 1014
NEWLINE DEDENT NAME . NAME += ::: 1013
( NAME ) - NUMBER ] ::: 1013
] NEWLINE NAME = None NEWLINE ::: 1013
. NAME ( NAME / NAME ::: 1013
( NAME ( STRING STRING ) ::: 1012
if NAME in [ STRING , ::: 1012
NEWLINE INDENT STRING NEWLINE return True ::: 1012
= STRING NEWLINE STRING NEWLINE import ::: 1012
= False NEWLINE DEDENT def NAME ::: 1012
NAME : NAME [ STRING ] ::: 1012
[ NUMBER ] NEWLINE assert NAME ::: 1012
NAME += NAME ( STRING , ::: 1011
NAME = None NEWLINE NAME ( ::: 1011
( NUMBER ) , STRING ) ::: 1011
False , NAME = NAME ) ::: 1011
] in NAME : NEWLINE INDENT ::: 1010
return NAME . NAME ( { ::: 1010
( STRING , ) , NAME ::: 1010
NAME = None NEWLINE DEDENT if ::: 1010
% ( NAME ( NAME . ::: 1010
NAME ( ) ) , ] ::: 1009
NUMBER ) + NAME ( NAME ::: 1009
[ NAME ] == NAME : ::: 1009
) == NAME . NAME . ::: 1009
[ NAME ] = ( NAME ::: 1009
INDENT del NAME [ NAME ] ::: 1009
NAME = NUMBER , ** NAME ::: 1008
{ NAME : NAME . NAME ::: 1008
= [ [ STRING , STRING ::: 1008
NAME NEWLINE del NAME . NAME ::: 1008
NUMBER , NUMBER ] , STRING ::: 1008
NAME , ( NAME , ) ::: 1008
INDENT if NAME . NAME > ::: 1008
NUMBER NEWLINE NAME = NAME / ::: 1008
NUMBER ] NEWLINE return NAME ( ::: 1008
NEWLINE INDENT continue NEWLINE DEDENT DEDENT ::: 1007
NUMBER NEWLINE while NAME < NUMBER ::: 1007
. NAME ( NUMBER ) == ::: 1007
, NUMBER ] ) ) NEWLINE ::: 1006
INDENT STRING NEWLINE class NAME ( ::: 1006
NAME : NAME } ) NEWLINE ::: 1006
= { } NEWLINE DEDENT def ::: 1005
: NEWLINE INDENT NAME NEWLINE DEDENT ::: 1005
] : NEWLINE INDENT return False ::: 1005
NEWLINE for NAME in ( STRING ::: 1005
assert NAME == STRING NEWLINE DEDENT ::: 1005
NAME = NAME [ : NUMBER ::: 1005
NAME , NAME + NUMBER , ::: 1005
NAME , NUMBER ) , NAME ::: 1005
= False , ** NAME ) ::: 1005
NAME += STRING + NAME . ::: 1005
NAME NEWLINE DEDENT DEDENT except NAME ::: 1004
NAME = { NUMBER : STRING ::: 1004
NAME . NAME [ NAME , ::: 1004
NAME ( NAME ) ( NAME ::: 1004
( STRING ) == STRING : ::: 1004
NEWLINE NAME = STRING NEWLINE while ::: 1004
, STRING , STRING % NAME ::: 1004
{ STRING : NAME ( ) ::: 1004
, NAME , NAME ) in ::: 1003
= ( NAME [ NUMBER ] ::: 1003
NEWLINE return False NEWLINE DEDENT return ::: 1003
if not NAME or not NAME ::: 1003
STRING NEWLINE DEDENT return NAME ( ::: 1003
[ NUMBER ] + STRING ) ::: 1003
NAME ( NUMBER ) NEWLINE while ::: 1003
STRING ] NEWLINE return NAME . ::: 1003
+ NAME [ STRING ] + ::: 1003
= False NEWLINE try : NEWLINE ::: 1003
DEDENT return NAME NEWLINE DEDENT def ::: 1003
NUMBER NEWLINE if NAME ( NAME ::: 1003
NUMBER and NAME [ NUMBER ] ::: 1002
== NUMBER NEWLINE assert NAME [ ::: 1002
NAME [ NAME ] == STRING ::: 1002
NAME [ : ] NEWLINE NAME ::: 1002
( [ NAME [ NUMBER ] ::: 1001
NAME = False NEWLINE try : ::: 1001
NUMBER NEWLINE NAME = [ NUMBER ::: 1001
NUMBER ) NEWLINE try : NEWLINE ::: 1001
from . import NAME NEWLINE import ::: 1001
NAME = { STRING : None ::: 1001
( NAME = NAME , ** ::: 1000
+= NAME . NAME NEWLINE NAME ::: 1000
. NAME . NAME + NAME ::: 1000
. NAME ) NEWLINE return NEWLINE ::: 1000
+ STRING + NAME [ STRING ::: 1000
STRING , } } NEWLINE NAME ::: 1000
STRING ] = NAME ( ) ::: 1000
NAME * NUMBER NEWLINE NAME = ::: 1000
INDENT if not NAME in NAME ::: 999
assert not NAME . NAME NEWLINE ::: 999
NAME = False NEWLINE DEDENT def ::: 999
, NAME . NAME , { ::: 999
; NEWLINE for NAME in NAME ::: 999
STRING ) NEWLINE if NAME != ::: 998
NUMBER ) ) NEWLINE DEDENT NAME ::: 998
NAME = True NEWLINE return NAME ::: 998
NEWLINE return [ NAME , NAME ::: 998
NEWLINE DEDENT NAME = None NEWLINE ::: 998
] , [ STRING ] ) ::: 998
STRING NEWLINE NAME = { NAME ::: 998
. NAME ( NAME == NAME ::: 998
, } NEWLINE NAME = STRING ::: 998
} ) ) NEWLINE NAME . ::: 997
( NUMBER ) NEWLINE DEDENT if ::: 997
. NAME ( NAME , lambda ::: 997
NAME in NAME [ NUMBER ] ::: 997
NAME ) -> None : NEWLINE ::: 996
NUMBER ] , NAME = NUMBER ::: 996
NAME = NAME if NAME else ::: 996
( None , NAME ) NEWLINE ::: 996
STRING NEWLINE DEDENT NAME ( NAME ::: 996
None , NAME = True , ::: 996
DEDENT return NAME , NAME , ::: 996
NAME ) / NUMBER NEWLINE NAME ::: 995
) , { STRING : NAME ::: 995
NAME in NAME if NAME ( ::: 995
return STRING NEWLINE DEDENT @ NAME ::: 995
] NEWLINE NAME = STRING % ::: 995
. NAME ( ) NEWLINE raise ::: 994
= None ) NEWLINE NAME = ::: 994
) NEWLINE NAME ( [ STRING ::: 994
DEDENT return NAME ( * NAME ::: 994
( [ STRING , NAME ] ::: 994
( NUMBER , NAME = STRING ::: 993
None NEWLINE NAME = NUMBER NEWLINE ::: 993
NAME ( [ NAME , STRING ::: 993
NAME as NAME NEWLINE STRING NEWLINE ::: 993
. NAME ( ) ) ] ::: 993
} NEWLINE DEDENT NAME . NAME ::: 992
NAME ( [ ( NAME , ::: 992
NAME ( NAME ) } ) ::: 992
= NAME [ NAME : NAME ::: 992
( ) , NAME ) ) ::: 992
NEWLINE DEDENT assert NAME ( NAME ::: 992
] ) , ( STRING , ::: 992
: ( STRING , ) } ::: 992
INDENT if NAME . NAME < ::: 992
) NEWLINE DEDENT class NAME : ::: 992
= None NEWLINE NAME = NUMBER ::: 991
= STRING NEWLINE DEDENT NAME ( ::: 991
NUMBER : NEWLINE INDENT NAME , ::: 991
* NAME NEWLINE NAME . NAME ::: 991
NUMBER ) , STRING : NAME ::: 991
== NUMBER NEWLINE NAME . NAME ::: 990
NAME += NUMBER NEWLINE NAME ( ::: 990
( NAME [ NUMBER ] + ::: 990
( NAME + NAME ) / ::: 990
= NAME ( NAME = { ::: 990
INDENT NAME . NAME ( None ::: 990
NEWLINE INDENT NAME ( NUMBER , ::: 990
NAME , STRING ) ) ) ::: 989
NUMBER ) NEWLINE if NAME : ::: 989
DEDENT NAME ( STRING + NAME ::: 989
NAME ( NAME [ : NUMBER ::: 989
[ NAME ] ) for NAME ::: 989
NAME ) <= NUMBER : NEWLINE ::: 989
+ NAME [ NUMBER ] NEWLINE ::: 988
NEWLINE NAME . NAME ( ** ::: 988
NUMBER NEWLINE if NAME == NUMBER ::: 988
% NAME [ STRING ] ) ::: 988
. NAME = NAME NEWLINE for ::: 988
STRING ) ) ) NEWLINE EOS ::: 988
NAME . NAME + NAME ) ::: 987
] NEWLINE if STRING in NAME ::: 987
* NAME ( NAME . NAME ::: 987
with NAME ( NAME , NAME ::: 987
] NEWLINE DEDENT NAME ( NAME ::: 987
NAME , NAME - NUMBER ) ::: 987
STRING NEWLINE @ NAME ( NAME ::: 987
= [ NAME ( STRING ) ::: 987
, NAME , NAME ( STRING ::: 987
, STRING : NAME } , ::: 987
( NAME ) ] = NAME ::: 987
[ NUMBER : NUMBER ] , ::: 986
NAME ( NAME ) * NUMBER ::: 986
+= NUMBER NEWLINE DEDENT NAME = ::: 986
NAME is None or NAME . ::: 986
, STRING NEWLINE NAME = NAME ::: 986
: NEWLINE INDENT return [ ( ::: 986
STRING ) . NAME . NAME ::: 986
assert NAME == NAME . NAME ::: 986
global NAME NEWLINE if NAME is ::: 985
DEDENT import NAME NEWLINE from NAME ::: 985
NUMBER ] ) ) ) NEWLINE ::: 985
NAME . NAME NEWLINE del NAME ::: 985
NAME ( ) NEWLINE return { ::: 985
NAME = NAME NEWLINE import NAME ::: 985
) NEWLINE yield NAME NEWLINE DEDENT ::: 984
STRING , NUMBER ) NEWLINE EOS ::: 984
NAME ) < NAME : NEWLINE ::: 983
[ NAME ( ) , NAME ::: 983
INDENT if NAME > NAME : ::: 983
import NAME as NAME NEWLINE try ::: 983
DEDENT if NAME == NAME : ::: 983
= STRING ) , STRING : ::: 983
STRING ] = False NEWLINE NAME ::: 983
NUMBER ] , NAME ( NAME ::: 983
is True : NEWLINE INDENT NAME ::: 983
NEWLINE INDENT if ( NAME [ ::: 982
{ NAME : NAME for NAME ::: 982
NEWLINE assert STRING not in NAME ::: 982
import NAME NEWLINE return NAME NEWLINE ::: 982
STRING ) NEWLINE return NUMBER NEWLINE ::: 982
- NUMBER ) ) NEWLINE DEDENT ::: 982
DEDENT return NAME ( ) NEWLINE ::: 982
; NEWLINE NAME = NAME ( ::: 982
= NAME ( [ ( STRING ::: 981
( NAME ) NEWLINE STRING NEWLINE ::: 981
= NUMBER , ** NAME ) ::: 981
NUMBER ] . NAME , NAME ::: 981
NAME as NAME NEWLINE DEDENT else ::: 981
as NAME NEWLINE DEDENT else : ::: 981
DEDENT if NAME > NUMBER : ::: 981
STRING , STRING ) , } ::: 981
NUMBER , STRING ) NEWLINE from ::: 980
STRING ] [ STRING ] . ::: 980
, NAME : STRING , NAME ::: 980
DEDENT if NAME [ STRING ] ::: 980
NEWLINE return True NEWLINE DEDENT else ::: 979
] } NEWLINE NAME = NAME ::: 979
NEWLINE INDENT NAME ( STRING STRING ::: 979
NAME ) > NAME : NEWLINE ::: 979
in NAME if NAME ( NAME ::: 978
INDENT NAME = [ NUMBER ] ::: 978
except : NEWLINE INDENT return None ::: 978
( STRING ) NEWLINE DEDENT @ ::: 978
+ NAME ) NEWLINE return NAME ::: 978
( ) + STRING ) NEWLINE ::: 978
( NAME = [ NAME ] ::: 978
NAME . NAME , * NAME ::: 977
True ) NEWLINE for NAME in ::: 977
NUMBER : NEWLINE INDENT return [ ::: 977
NUMBER ] ) for NAME in ::: 976
[ [ STRING , STRING , ::: 976
STRING % NAME [ NUMBER ] ::: 976
) == NUMBER NEWLINE NAME = ::: 976
, NAME ) ) for NAME ::: 976
INDENT NAME = ( ( STRING ::: 976
else : NEWLINE INDENT NAME , ::: 976
NAME ) >= NUMBER : NEWLINE ::: 976
. NAME ( ) or NAME ::: 975
) ) NEWLINE DEDENT DEDENT except ::: 975
None : NEWLINE INDENT NAME += ::: 975
, STRING , NAME = [ ::: 975
STRING , ] NEWLINE DEDENT EOS ::: 975
INDENT import NAME NEWLINE DEDENT EOS ::: 975
NEWLINE DEDENT DEDENT except NAME . ::: 975
import NAME as NAME NEWLINE if ::: 974
STRING , NUMBER , STRING , ::: 974
== False : NEWLINE INDENT NAME ::: 974
NAME += NAME NEWLINE NAME . ::: 974
] NEWLINE NAME = False NEWLINE ::: 973
NAME = NAME or { } ::: 973
, NAME . NAME + STRING ::: 972
NUMBER NEWLINE DEDENT return NAME . ::: 971
!= NAME ( NAME ) : ::: 971
NAME ( STRING ) ) ] ::: 971
NAME ( NUMBER ) ] ) ::: 971
( NAME , ( NAME . ::: 971
if NAME [ NAME ] != ::: 971
STRING in NAME NEWLINE DEDENT EOS ::: 971
[ NAME . NAME [ NUMBER ::: 970
, NAME . NAME , [ ::: 970
not in NAME . NAME ( ::: 970
NAME ) ] , NAME = ::: 970
] . NAME , STRING ) ::: 970
return None NEWLINE DEDENT DEDENT DEDENT ::: 970
return { STRING : { STRING ::: 970
NAME ( NAME ) ) == ::: 970
== NUMBER : NEWLINE INDENT break ::: 969
( ) ] NEWLINE NAME . ::: 969
STRING ) , { STRING : ::: 969
+ NAME , NAME = NAME ::: 969
NAME ( NAME ) NEWLINE STRING ::: 969
STRING % NAME NEWLINE DEDENT EOS ::: 969
STRING : NEWLINE INDENT return NUMBER ::: 969
STRING ) NEWLINE return None NEWLINE ::: 969
, NAME ) ) NEWLINE for ::: 969
NAME ( NAME . NAME / ::: 969
INDENT break NEWLINE DEDENT NAME = ::: 969
if NAME [ - NUMBER ] ::: 969
* NUMBER ) NEWLINE NAME ( ::: 969
] NEWLINE return STRING . NAME ::: 968
, NAME ] NEWLINE NAME . ::: 968
( STRING ) , ) NEWLINE ::: 968
if NAME ( NAME [ NAME ::: 968
= NAME NEWLINE DEDENT NAME ( ::: 968
NAME ) NEWLINE assert NAME [ ::: 968
: NEWLINE INDENT if not ( ::: 967
STRING ] [ STRING ] == ::: 967
+ NAME NEWLINE return NAME NEWLINE ::: 967
, NAME = False , ** ::: 966
True NEWLINE DEDENT if NAME . ::: 966
NAME + STRING + NAME , ::: 966
INDENT return [ STRING , STRING ::: 966
NAME ) NEWLINE from . import ::: 965
STRING : [ ] } NEWLINE ::: 965
NAME [ NUMBER : NAME ] ::: 965
NUMBER NEWLINE return NAME ( NAME ::: 965
) } ) NEWLINE DEDENT EOS ::: 965
, NUMBER , STRING , STRING ::: 965
is NAME : NEWLINE INDENT return ::: 964
INDENT STRING NEWLINE @ NAME ( ::: 964
( NUMBER , NAME ) ) ::: 964
not NAME in NAME : NEWLINE ::: 964
and STRING in NAME : NEWLINE ::: 964
in NAME : NEWLINE INDENT del ::: 964
( ) . NAME ( NUMBER ::: 963
) NEWLINE for NAME in ( ::: 963
( ( NAME [ NUMBER ] ::: 963
( ) NEWLINE return NAME [ ::: 963
NAME as NAME , NAME , ::: 963
NEWLINE DEDENT if NAME > NUMBER ::: 963
) NEWLINE for ( NAME , ::: 962
NAME } NEWLINE return NAME NEWLINE ::: 962
NAME == NUMBER or NAME == ::: 962
{ STRING , STRING , STRING ::: 962
% NAME . NAME ( STRING ::: 962
, NAME = NAME ( [ ::: 961
NEWLINE NAME += ( STRING , ::: 961
] NEWLINE NAME = ( NAME ::: 961
NAME , NAME = [ NUMBER ::: 961
] ) NEWLINE DEDENT elif NAME ::: 961
NAME if NAME . NAME else ::: 960
( NUMBER , - NUMBER ) ::: 960
INDENT return ( NAME ( NAME ::: 960
, STRING ] ) , NAME ::: 960
, { } ) . NAME ::: 960
= NAME ( NAME ) [ ::: 960
= NAME or { } NEWLINE ::: 960
. NAME . NAME , ) ::: 959
= NAME * NUMBER NEWLINE NAME ::: 959
NEWLINE return ( NAME ) NEWLINE ::: 959
) ] NEWLINE DEDENT else : ::: 959
( STRING , NUMBER ) ] ::: 959
INDENT global NAME NEWLINE NAME . ::: 959
NAME + STRING NEWLINE DEDENT NAME ::: 959
( STRING ) NEWLINE while True ::: 959
DEDENT DEDENT if NAME ( NAME ::: 958
. NAME . NAME = { ::: 958
, NAME = NUMBER , ) ::: 958
. NAME [ : ] NEWLINE ::: 958
+ NAME + STRING , NAME ::: 958
= NAME [ NAME - NUMBER ::: 958
STRING ) ) as NAME : ::: 958
: ] ) NEWLINE DEDENT EOS ::: 958
NAME as NAME NEWLINE DEDENT from ::: 957
[ NUMBER ] = NAME NEWLINE ::: 957
True NEWLINE DEDENT DEDENT DEDENT EOS ::: 957
. NAME ( NAME , - ::: 957
STRING : True } ) NEWLINE ::: 957
, STRING ] NEWLINE if NAME ::: 957
== NUMBER ) NEWLINE DEDENT EOS ::: 957
, STRING ) ) . NAME ::: 957
assert ( NAME . NAME ( ::: 956
NAME [ STRING ] = None ::: 956
, NAME ) ) . NAME ::: 956
if NAME . NAME > NAME ::: 956
: NAME . NAME ) NEWLINE ::: 955
[ NAME ] , NAME , ::: 955
None : NEWLINE INDENT for NAME ::: 955
[ NUMBER ] ) NEWLINE EOS ::: 955
: STRING , STRING : None ::: 955
NEWLINE INDENT return NEWLINE DEDENT for ::: 955
( NAME ) : return NAME ::: 955
( STRING , NAME ( NUMBER ::: 955
( NAME , [ STRING ] ::: 955
NAME ; NEWLINE NAME . NAME ::: 954
NAME and not NAME : NEWLINE ::: 954
NAME ( NAME ( NAME + ::: 954
. NAME ( ) NEWLINE yield ::: 954
NEWLINE for NAME in [ NAME ::: 954
( NAME . NAME == NUMBER ::: 954
= [ STRING ] NEWLINE import ::: 954
INDENT NAME = ( NAME ( ::: 953
STRING NEWLINE NAME += STRING + ::: 953
, NAME NEWLINE NAME ( STRING ::: 953
( True ) NEWLINE DEDENT EOS ::: 953
not NAME [ STRING ] : ::: 953
yield NAME , NAME NEWLINE DEDENT ::: 953
NAME = NAME NEWLINE break NEWLINE ::: 953
) NEWLINE DEDENT return { STRING ::: 953
, STRING ] NEWLINE from NAME ::: 952
= NUMBER NEWLINE while NAME <= ::: 952
. NAME . NAME , [ ::: 952
] ) : NEWLINE INDENT STRING ::: 952
( ) NEWLINE NAME += NAME ::: 952
STRING ) , STRING : ( ::: 952
= STRING NEWLINE if not NAME ::: 952
NAME [ NUMBER ] ) . ::: 952
= None NEWLINE DEDENT else : ::: 952
, ) NEWLINE NAME ( NAME ::: 952
del NAME . NAME [ STRING ::: 951
NAME , NAME NEWLINE from ... ::: 951
: NEWLINE INDENT return { NAME ::: 951
STRING , STRING ) ) : ::: 951
NAME ( { NAME : NAME ::: 951
+ STRING NEWLINE NAME += STRING ::: 951
( NAME . NAME [ : ::: 950
( NAME ) > NUMBER and ::: 950
NAME ) : NAME . NAME ::: 950
False NEWLINE NAME = NAME ( ::: 950
NEWLINE DEDENT elif NAME < NUMBER ::: 950
STRING , STRING : False , ::: 949
NEWLINE DEDENT NAME += NAME NEWLINE ::: 949
NAME = STRING NEWLINE if not ::: 949
NAME [ NAME ] * NAME ::: 949
) NEWLINE return [ NAME ( ::: 949
NEWLINE NAME = NAME if NAME ::: 949
, NAME = NUMBER , ** ::: 949
( ) NEWLINE DEDENT finally : ::: 949
NAME ( ) NEWLINE DEDENT finally ::: 949
NAME NEWLINE NAME = STRING + ::: 949
NAME ( [ NUMBER ] ) ::: 949
NAME ] [ STRING ] ) ::: 949
NEWLINE INDENT STRING NEWLINE return NEWLINE ::: 949
NAME = NAME [ NAME + ::: 948
NUMBER : NEWLINE INDENT continue NEWLINE ::: 948
if NAME : NEWLINE INDENT try ::: 948
if NAME [ NAME ] > ::: 948
( STRING ) NEWLINE DEDENT for ::: 948
NEWLINE DEDENT DEDENT return STRING . ::: 948
INDENT for NAME in [ STRING ::: 948
: ( STRING , STRING , ::: 947
NEWLINE try : NEWLINE INDENT for ::: 947
NEWLINE DEDENT elif NAME in NAME ::: 947
) , ** NAME ) NEWLINE ::: 947
- NAME ) ) NEWLINE DEDENT ::: 947
= STRING ) ) , ( ::: 947
] [ STRING ] == STRING ::: 947
NEWLINE NAME . NAME ( * ::: 946
NAME in ( NAME . NAME ::: 946
NAME . NAME is None NEWLINE ::: 946
NAME * NAME NEWLINE DEDENT EOS ::: 946
( { STRING : NUMBER , ::: 946
) ) NEWLINE return False NEWLINE ::: 946
return NAME [ STRING ] [ ::: 946
( ) ) NEWLINE assert NAME ::: 946
STRING STRING ) NEWLINE DEDENT NAME ::: 945
+ STRING , NAME = NAME ::: 945
( NAME = ( STRING , ::: 945
INDENT NAME = [ NAME [ ::: 945
NAME ( ) ; NEWLINE DEDENT ::: 945
: { STRING : [ STRING ::: 945
NAME = NAME % NAME NEWLINE ::: 945
+ NUMBER ) NEWLINE DEDENT DEDENT ::: 945
STRING ] == NAME . NAME ::: 944
NAME ( NAME = ( NAME ::: 944
in NAME : NEWLINE INDENT continue ::: 944
NAME + NAME ) / NUMBER ::: 944
STRING ] , NAME , NAME ::: 944
NEWLINE return NAME ( ( NAME ::: 944
NUMBER ) NEWLINE NAME ( ) ::: 944
STRING STRING % ( NAME , ::: 944
[ STRING ] } NEWLINE NAME ::: 943
} ) NEWLINE return NAME . ::: 943
, STRING ) , } NEWLINE ::: 943
NEWLINE if NAME and NAME : ::: 943
( ** NAME ) NEWLINE return ::: 943
) ) NEWLINE if NAME is ::: 943
NEWLINE NAME [ NAME ] . ::: 943
NAME ) ) NEWLINE try : ::: 943
if not ( NAME . NAME ::: 943
: NUMBER } NEWLINE NAME . ::: 942
) and NAME ( NAME ) ::: 942
+ STRING + STRING + NAME ::: 942
STRING ) : NEWLINE INDENT continue ::: 942
( NAME . NAME for NAME ::: 942
in NAME ( NAME - NUMBER ::: 942
NUMBER ) NEWLINE if NAME ( ::: 942
{ STRING : STRING } ] ::: 941
] ) NEWLINE NAME [ NAME ::: 941
NUMBER ] ) NEWLINE DEDENT except ::: 940
) NEWLINE DEDENT elif NAME [ ::: 940
NAME ] [ NUMBER ] ) ::: 940
NAME | NAME . NAME | ::: 940
) NEWLINE DEDENT DEDENT elif NAME ::: 940
( NAME ) NEWLINE break NEWLINE ::: 939
NEWLINE global NAME NEWLINE if NAME ::: 939
NAME ) - NUMBER ) NEWLINE ::: 939
INDENT NAME = NAME or NAME ::: 939
DEDENT return [ ] NEWLINE DEDENT ::: 939
[ NUMBER ] , [ NUMBER ::: 939
NAME . NAME = NAME , ::: 939
NUMBER NEWLINE STRING NEWLINE NAME = ::: 939
= True NEWLINE DEDENT return NAME ::: 938
NUMBER , NAME . NAME [ ::: 938
STRING ) ) NEWLINE assert NAME ::: 938
NAME ( ) NEWLINE return [ ::: 938
NAME ( NAME + NAME . ::: 938
NAME ) == NUMBER and NAME ::: 938
INDENT STRING NEWLINE return True NEWLINE ::: 938
NAME = ( NAME [ NUMBER ::: 937
NAME ( ) ) for NAME ::: 937
NAME ( NAME ) NEWLINE break ::: 937
NAME ( ) } ) NEWLINE ::: 937
and NAME [ NUMBER ] == ::: 937
| NAME . NAME | NAME ::: 937
[ STRING , STRING ] ] ::: 936
DEDENT NAME = NAME ( lambda ::: 936
STRING ) ] ) , ) ::: 936
NAME ) ) NEWLINE DEDENT for ::: 935
INDENT return NEWLINE DEDENT for NAME ::: 935
[ NUMBER ] ) NEWLINE for ::: 935
NAME = NAME ( ) [ ::: 935
. NAME , NAME = None ::: 934
NAME ) , STRING ) as ::: 934
NUMBER * NAME . NAME * ::: 934
- NUMBER ] NEWLINE return NAME ::: 934
NAME NEWLINE return True NEWLINE DEDENT ::: 934
) } NEWLINE DEDENT DEDENT EOS ::: 934
-> NAME : NEWLINE INDENT NAME ::: 934
] . NAME : NEWLINE INDENT ::: 934
] = True NEWLINE NAME . ::: 934
INDENT NAME = NUMBER * NAME ::: 934
NAME ) == STRING NEWLINE DEDENT ::: 933
INDENT NAME . NAME ( False ::: 933
: NEWLINE INDENT NAME ( * ::: 933
import NAME . NAME , NAME ::: 933
= { NUMBER : STRING , ::: 933
NAME . NAME / NUMBER NEWLINE ::: 933
NUMBER ] , [ NUMBER ] ::: 933
[ STRING , ] , } ::: 933
= NAME . NAME [ - ::: 933
NEWLINE DEDENT if NAME [ STRING ::: 932
DEDENT DEDENT return STRING NEWLINE DEDENT ::: 932
STRING , { STRING : [ ::: 932
NAME [ NAME ] ] NEWLINE ::: 932
NUMBER , STRING ) ) NEWLINE ::: 932
+ NUMBER ) NEWLINE NAME . ::: 932
= NAME ( [ STRING ] ::: 932
= NUMBER * NAME NEWLINE NAME ::: 932
( NAME * NUMBER ) NEWLINE ::: 932
( NAME . NAME , True ::: 931
( ( NAME , NAME . ::: 931
, } ) NEWLINE return NAME ::: 931
( True ) NEWLINE DEDENT DEDENT ::: 931
STRING : STRING } , ) ::: 931
STRING : NEWLINE INDENT break NEWLINE ::: 930
return NAME , NAME . NAME ::: 930
= False ) NEWLINE NAME ( ::: 930
) != NAME ( NAME ) ::: 930
NAME . NAME = { NAME ::: 930
) NEWLINE return NAME ( * ::: 930
= NUMBER NEWLINE while NAME > ::: 929
NAME NEWLINE DEDENT DEDENT raise NAME ::: 929
( ) , NAME = NUMBER ::: 929
False NEWLINE if NAME . NAME ::: 929
NAME in NAME if NAME [ ::: 929
) , NAME . NAME [ ::: 929
( NAME [ NAME ] . ::: 928
import NAME . NAME NEWLINE DEDENT ::: 928
NAME [ STRING ] NEWLINE assert ::: 928
= ( NAME ( NAME ) ::: 928
. NAME , ( NUMBER , ::: 928
( NAME , NAME ) + ::: 928
NAME ) NEWLINE return NAME + ::: 928
STRING NEWLINE NAME = NAME or ::: 927
* NEWLINE NAME = { STRING ::: 927
, NUMBER ) NEWLINE DEDENT return ::: 927
NAME / NAME . NAME ( ::: 927
[ STRING ] ] NEWLINE NAME ::: 927
NAME < NUMBER ) : NEWLINE ::: 927
NEWLINE return [ ] NEWLINE DEDENT ::: 927
NAME ( [ NAME [ NAME ::: 927
, STRING ) ) NEWLINE if ::: 927
) NEWLINE DEDENT @ NAME ( ::: 926
- NUMBER NEWLINE DEDENT else : ::: 926
, NUMBER ] ] NEWLINE NAME ::: 926
) or NAME . NAME . ::: 926
NUMBER ] [ STRING ] [ ::: 926
NEWLINE INDENT return ( NAME , ::: 926
INDENT NAME += STRING % ( ::: 925
. NAME ) ) . NAME ::: 925
) ] , NAME = NAME ::: 925
NAME ( ) NEWLINE STRING NEWLINE ::: 925
if ( NAME == NUMBER ) ::: 925
INDENT STRING NEWLINE return NEWLINE DEDENT ::: 924
[ NAME ] = [ ] ::: 924
NEWLINE if not NAME in NAME ::: 924
+ NAME ( NAME ) , ::: 924
NEWLINE INDENT NAME ( * NAME ::: 924
[ NAME ] NEWLINE NAME += ::: 924
= NUMBER ) NEWLINE assert NAME ::: 924
) + NUMBER ) : NEWLINE ::: 924
, NAME ( NUMBER ) , ::: 923
( ) . NAME NEWLINE DEDENT ::: 923
NAME NEWLINE DEDENT NAME ( STRING ::: 923
= ( ) NEWLINE NAME = ::: 923
[ STRING ] NEWLINE from NAME ::: 923
NAME , NUMBER ) : NEWLINE ::: 922
NAME [ STRING ] NEWLINE EOS ::: 922
None NEWLINE assert NAME . NAME ::: 921
NAME NEWLINE DEDENT DEDENT if NAME ::: 921
NUMBER ] ] ) NEWLINE DEDENT ::: 921
STRING ) NEWLINE NAME = None ::: 921
NAME . NAME , { } ::: 921
: False , STRING : STRING ::: 920
STRING NEWLINE return False NEWLINE DEDENT ::: 920
NAME . NAME ) ) . ::: 920
= [ ] NEWLINE NAME ( ::: 920
== STRING or NAME . NAME ::: 920
NAME [ NUMBER ] if NAME ::: 920
NAME ( ) } NEWLINE NAME ::: 920
) NEWLINE DEDENT DEDENT finally : ::: 919
NAME . NAME and NAME ( ::: 919
STRING NEWLINE ( NAME , NAME ::: 919
NAME : NAME for NAME , ::: 919
in NAME ] ) ) NEWLINE ::: 919
( NAME [ : NAME ] ::: 919
= NAME [ : , NUMBER ::: 919
DEDENT DEDENT NAME ( NAME , ::: 919
NAME ( [ NAME ( STRING ::: 919
DEDENT NAME = STRING % ( ::: 918
) NEWLINE DEDENT NAME += NUMBER ::: 918
) , NAME ) : NEWLINE ::: 918
NAME - NUMBER ] NEWLINE DEDENT ::: 918
, NAME ) NEWLINE return ( ::: 918
in NAME or STRING in NAME ::: 918
. NAME ( NUMBER ) : ::: 918
NAME = NUMBER ) NEWLINE if ::: 918
. NAME , [ ] ) ::: 918
NAME + STRING , NAME ) ::: 918
NEWLINE DEDENT if NAME > NAME ::: 918
( STRING , None ) , ::: 918
NAME ) ] = NAME NEWLINE ::: 917
[ STRING ] == NAME . ::: 917
[ NUMBER ] , STRING , ::: 917
: NUMBER , } NEWLINE NAME ::: 917
* ( NAME - NUMBER ) ::: 917
NAME ( ) ) , STRING ::: 917
= NUMBER NEWLINE STRING NEWLINE NAME ::: 917
STRING % NAME , NAME ) ::: 917
. NAME = ( NAME , ::: 917
) ) NEWLINE return True NEWLINE ::: 916
NUMBER ) ] NEWLINE NAME . ::: 916
NAME . NAME , ( NUMBER ::: 916
STRING ) == STRING NEWLINE DEDENT ::: 916
NAME , NAME ) ) , ::: 916
NAME ] [ NAME ] ) ::: 916
as NAME , NAME , NAME ::: 915
if NAME ( NAME [ NUMBER ::: 915
= NAME NEWLINE import NAME NEWLINE ::: 915
if not NAME in NAME : ::: 915
DEDENT NAME , NAME , NAME ::: 915
. NAME ( ) != STRING ::: 915
NAME ) NEWLINE DEDENT return None ::: 915
STRING , lambda NAME : NAME ::: 914
STRING ) NEWLINE assert not NAME ::: 914
NAME > NUMBER ) : NEWLINE ::: 914
[ : NAME ] NEWLINE DEDENT ::: 914
NAME = NAME NEWLINE try : ::: 913
( NAME ) > NUMBER ) ::: 913
/ NAME ( NAME ) ) ::: 913
from NAME import * NEWLINE if ::: 913
( NAME = [ ( STRING ::: 913
+ NUMBER NEWLINE DEDENT return NAME ::: 913
== STRING : NEWLINE INDENT continue ::: 913
STRING NEWLINE raise NAME ( NAME ::: 912
. NAME NEWLINE @ NAME . ::: 912
assert NAME [ NUMBER ] == ::: 912
STRING ) , STRING ) as ::: 912
STRING ] NEWLINE return NAME ( ::: 912
STRING NEWLINE DEDENT return STRING NEWLINE ::: 912
. NAME ( NAME [ - ::: 912
( NAME + NUMBER ) * ::: 912
NAME == False : NEWLINE INDENT ::: 911
NUMBER ] NEWLINE DEDENT DEDENT return ::: 911
. NAME = STRING NEWLINE for ::: 911
( NAME ) if NAME . ::: 911
( False ) NEWLINE DEDENT DEDENT ::: 911
NAME and NAME ( NAME , ::: 911
) ) ) . NAME ( ::: 911
NEWLINE NAME = [ [ NUMBER ::: 910
NAME ) NEWLINE DEDENT return True ::: 910
, True ) NEWLINE DEDENT DEDENT ::: 910
STRING STRING % NAME ) NEWLINE ::: 910
[ STRING , NAME ] ) ::: 910
( NAME ) + NAME . ::: 910
NUMBER NEWLINE DEDENT NAME = NUMBER ::: 910
= [ ( NAME . NAME ::: 910
elif NAME : NEWLINE INDENT NAME ::: 910
as NAME NEWLINE DEDENT except : ::: 909
* NUMBER ) NEWLINE DEDENT EOS ::: 909
. NAME , NAME [ NUMBER ::: 909
None ) NEWLINE if not NAME ::: 909
. NAME . NAME NEWLINE assert ::: 909
, STRING , STRING ] ] ::: 909
= NAME ( ( STRING , ::: 908
, ] NEWLINE for NAME in ::: 908
NAME . NAME . NAME if ::: 908
= ( STRING STRING STRING ) ::: 907
return NAME NEWLINE DEDENT @ NAME ::: 907
( NAME = NAME [ NUMBER ::: 907
False : NEWLINE INDENT NAME . ::: 907
NAME = False ) . NAME ::: 907
( NAME . NAME ) for ::: 906
INDENT STRING NEWLINE if NAME < ::: 906
) ) ) NEWLINE import NAME ::: 906
NUMBER NEWLINE DEDENT if NAME . ::: 906
NUMBER ] == NAME : NEWLINE ::: 906
) NEWLINE DEDENT assert NAME . ::: 905
True NEWLINE NAME = NAME NEWLINE ::: 905
NAME = True ) NEWLINE for ::: 905
NEWLINE INDENT import NAME NEWLINE return ::: 905
. NAME : NEWLINE INDENT del ::: 905
break NEWLINE DEDENT DEDENT else : ::: 905
NEWLINE import NAME ; NAME . ::: 905
] NEWLINE NAME += NUMBER NEWLINE ::: 905
STRING } NEWLINE DEDENT DEDENT EOS ::: 905
= NAME . NAME NEWLINE while ::: 905
STRING , STRING ) ) , ::: 904
NAME = STRING NEWLINE while NAME ::: 904
if NAME < NUMBER or NAME ::: 904
NEWLINE INDENT yield NAME NEWLINE NAME ::: 904
NAME = NAME + NAME [ ::: 904
( NUMBER , STRING ) ] ::: 903
NAME = NUMBER , ) NEWLINE ::: 903
( ) ; NEWLINE NAME . ::: 903
( ( NAME , NAME ( ::: 903
NAME NEWLINE NAME ( ) . ::: 903
) ) ] NEWLINE DEDENT EOS ::: 903
+= ( STRING , ) NEWLINE ::: 903
NAME += STRING NEWLINE DEDENT return ::: 903
[ [ STRING , STRING ] ::: 903
NAME . NAME + NAME ( ::: 902
) [ NUMBER : ] NEWLINE ::: 902
STRING % ( NAME , STRING ::: 902
[ NUMBER ] + STRING NEWLINE ::: 902
NAME if NAME ( NAME ) ::: 902
import NAME ; NEWLINE import NAME ::: 902
NUMBER NEWLINE while NAME <= NAME ::: 902
NUMBER ] NEWLINE if NAME ( ::: 902
: NUMBER ] ) NEWLINE DEDENT ::: 902
) NEWLINE DEDENT if NAME [ ::: 902
NAME = NAME % NUMBER NEWLINE ::: 902
NEWLINE INDENT STRING NEWLINE return False ::: 901
= NAME + NAME + NAME ::: 901
NUMBER ] , NAME , NAME ::: 901
, NAME ) and NAME ( ::: 901
. NAME . NAME = ( ::: 900
NAME , STRING , True ) ::: 900
, STRING + NAME ( NAME ::: 900
{ STRING : NUMBER } , ::: 900
NAME ( NAME = [ ] ::: 900
NAME = not NAME . NAME ::: 899
STRING : NEWLINE INDENT for NAME ::: 899
NAME , STRING , { } ::: 899
NAME , STRING ) NEWLINE with ::: 899
NAME = { STRING , STRING ::: 899
) ] , NAME = NUMBER ::: 899
NUMBER , STRING , STRING ) ::: 899
if NAME is NAME : NEWLINE ::: 899
. NAME = None NEWLINE return ::: 899
= [ NUMBER ] * NAME ::: 898
. NAME ( lambda : NAME ::: 898
NAME += ( STRING , ) ::: 898
) ) NEWLINE NAME ( NUMBER ::: 898
if NAME : NEWLINE INDENT from ::: 898
- NAME . NAME NEWLINE DEDENT ::: 898
[ STRING ] = STRING % ::: 898
NEWLINE if ( NAME ) : ::: 898
, NUMBER ) , NAME ) ::: 898
DEDENT if NAME < NUMBER : ::: 898
NAME [ NAME ] ) for ::: 898
- NUMBER ] NEWLINE DEDENT return ::: 898
NAME = None NEWLINE DEDENT else ::: 897
NAME . NAME ( ) / ::: 897
if NAME . NAME ( NUMBER ::: 897
raise NAME ( STRING STRING STRING ::: 897
NEWLINE NAME = ( NAME * ::: 897
] [ STRING ] [ NUMBER ::: 897
( STRING , STRING ) == ::: 897
. NAME ) NEWLINE DEDENT @ ::: 897
STRING , NAME ) NEWLINE from ::: 897
raise NAME NEWLINE DEDENT NAME = ::: 897
NEWLINE import NAME . NAME , ::: 897
NAME ) ) NEWLINE return NEWLINE ::: 897
, NUMBER ) , STRING ) ::: 896
NUMBER , NUMBER , NAME , ::: 896
= NUMBER NEWLINE while ( NAME ::: 896
STRING , NAME = NAME [ ::: 896
NAME ( NUMBER * NAME ) ::: 896
NEWLINE return NAME ( ) . ::: 896
NEWLINE DEDENT DEDENT if NAME ( ::: 895
DEDENT if STRING not in NAME ::: 895
NAME NEWLINE NAME = NAME / ::: 895
NEWLINE return True NEWLINE DEDENT return ::: 895
( NAME , ) , NAME ::: 895
return [ NAME , NAME ] ::: 895
[ NAME ] = [ NAME ::: 895
STRING : NEWLINE INDENT return NEWLINE ::: 895
for ( NAME , NAME , ::: 894
, lambda NAME : NAME . ::: 894
NAME ( ) NEWLINE assert STRING ::: 894
NAME ( NUMBER , - NUMBER ::: 894
- NUMBER ] == STRING : ::: 894
[ NAME ] NEWLINE DEDENT if ::: 894
[ NUMBER ] ) ) ) ::: 894
in NAME . NAME and NAME ::: 894
) , { STRING : STRING ::: 894
] ) NEWLINE if not NAME ::: 894
[ ( NUMBER , STRING ) ::: 894
NAME [ - NUMBER ] [ ::: 893
= True ) NEWLINE for NAME ::: 893
) for ( NAME , NAME ::: 893
NAME if NAME is not None ::: 893
) NEWLINE global NAME NEWLINE NAME ::: 893
STRING NEWLINE NAME = STRING STRING ::: 893
) . NAME NEWLINE return NAME ::: 893
NAME + NUMBER NEWLINE DEDENT EOS ::: 893
: { STRING : NUMBER } ::: 892
% ( NAME ) NEWLINE NAME ::: 892
, NAME . NAME ] , ::: 892
( NAME . NAME - NUMBER ::: 892
NUMBER , NUMBER ) ) : ::: 892
= NAME NEWLINE @ NAME NEWLINE ::: 891
NAME and NAME [ NUMBER ] ::: 891
STRING ) ; NEWLINE NAME . ::: 891
[ NUMBER ] * NAME [ ::: 891
NAME import NAME NEWLINE if not ::: 891
INDENT raise NEWLINE DEDENT DEDENT DEDENT ::: 891
, STRING ) NEWLINE DEDENT if ::: 891
( NAME - NUMBER ) ) ::: 891
. NAME , NAME ( ) ::: 891
NAME + NAME NEWLINE NAME . ::: 891
[ STRING ] , NAME ( ::: 890
, ) NEWLINE DEDENT def NAME ::: 890
[ NAME ] . NAME ) ::: 890
NAME ( STRING , STRING + ::: 890
, NUMBER ) NEWLINE DEDENT except ::: 890
INDENT return True NEWLINE DEDENT def ::: 890
NAME . NAME = NAME if ::: 890
DEDENT else : NEWLINE INDENT yield ::: 890
None ) NEWLINE NAME ( NAME ::: 890
NAME [ NAME ] ( NAME ::: 890
INDENT return STRING NEWLINE DEDENT @ ::: 890
True ) . NAME ( ) ::: 890
NAME = [ ( NAME . ::: 889
) , ( NAME , STRING ::: 889
( ) ) for NAME in ::: 889
NAME ( STRING % ( STRING ::: 889
) ) + STRING + NAME ::: 889
NAME . NAME , ) , ::: 889
NAME , NAME , NAME : ::: 889
STRING ] , NAME = NUMBER ::: 889
) , ( STRING , { ::: 889
: NAME ] NEWLINE NAME = ::: 889
STRING in NAME or STRING in ::: 889
. NAME ) ] NEWLINE NAME ::: 889
, STRING ) for NAME in ::: 889
( not NAME . NAME ( ::: 888
NAME . NAME ) NEWLINE while ::: 888
( STRING , ) NEWLINE def ::: 888
NAME NEWLINE if NAME == NAME ::: 888
break NEWLINE DEDENT DEDENT if NAME ::: 888
if NAME [ STRING ] != ::: 888
] ) NEWLINE NAME , NAME ::: 887
NEWLINE break NEWLINE DEDENT DEDENT if ::: 887
NEWLINE DEDENT return NAME ( * ::: 887
NAME . NAME = NAME ; ::: 887
( NAME , STRING % ( ::: 887
NEWLINE DEDENT NAME , NAME , ::: 887
INDENT NAME = [ NAME , ::: 887
, NAME ) or NAME ( ::: 887
if NAME . NAME and not ::: 886
NAME ( NUMBER ) ) , ::: 886
= NAME ( [ ] ) ::: 886
NAME . NAME . NAME in ::: 886
, NAME , True ) NEWLINE ::: 886
: - NUMBER ] , NAME ::: 886
STRING ) NEWLINE import NAME as ::: 886
STRING , STRING % ( NAME ::: 886
( NAME ) . NAME . ::: 885
. NAME = NAME , NAME ::: 885
NUMBER ] NEWLINE DEDENT DEDENT DEDENT ::: 885
] . NAME [ STRING ] ::: 884
NAME ( NAME , lambda : ::: 884
NAME = STRING ) , } ::: 884
if NAME ( NAME ) <= ::: 884
NAME != NAME . NAME . ::: 884
= None NEWLINE DEDENT if NAME ::: 883
= False ) NEWLINE return NAME ::: 883
NEWLINE break NEWLINE DEDENT DEDENT return ::: 883
NEWLINE NAME = ( NAME [ ::: 883
{ STRING : NAME } } ::: 883
, NAME . NAME ) and ::: 883
[ NUMBER ] != STRING : ::: 883
NUMBER NEWLINE NAME = { STRING ::: 882
STRING , NAME ) NEWLINE for ::: 882
NAME import NAME NEWLINE class NAME ::: 882
. NAME , [ STRING , ::: 882
+ NAME ) NEWLINE DEDENT NAME ::: 882
STRING ) : NEWLINE INDENT with ::: 882
NAME , NAME ) ) for ::: 882
NAME . NAME == NAME ( ::: 882
NAME ] NEWLINE DEDENT elif NAME ::: 881
. NAME and NAME ( NAME ::: 881
, STRING + NAME ) NEWLINE ::: 881
= NAME ) NEWLINE if not ::: 881
. NAME . NAME NEWLINE def ::: 881
) ) NEWLINE NAME += NAME ::: 881
NAME [ NUMBER ] ) ] ::: 881
NAME . NAME ) / NAME ::: 880
NAME = NAME ( None ) ::: 880
STRING STRING ) ) NEWLINE DEDENT ::: 880
while not NAME . NAME ( ::: 880
, None , None , None ::: 880
NAME ( NAME ) NEWLINE del ::: 880
, STRING NEWLINE NAME . NAME ::: 880
, NUMBER ) NEWLINE NAME , ::: 880
- NAME ) NEWLINE DEDENT EOS ::: 880
) , None ) NEWLINE NAME ::: 880
% NAME ) NEWLINE if NAME ::: 879
NAME in ( NAME , NAME ::: 879
. NAME , ( NAME , ::: 879
[ NAME ] NEWLINE NAME ( ::: 879
. NAME ( [ NAME for ::: 879
NAME = ( STRING , NUMBER ::: 879
) NEWLINE DEDENT if ( NAME ::: 878
: NUMBER } ) NEWLINE DEDENT ::: 878
NAME ( NAME = - NUMBER ::: 878
NAME [ NUMBER ] < NUMBER ::: 878
INDENT global NAME , NAME , ::: 878
+ NUMBER NEWLINE DEDENT DEDENT EOS ::: 878
NEWLINE INDENT if NAME >= NAME ::: 878
False ) : NEWLINE INDENT return ::: 878
INDENT STRING NEWLINE return False NEWLINE ::: 878
( NAME == NAME ) NEWLINE ::: 877
NAME [ STRING ] = ( ::: 877
STRING ) , NAME = [ ::: 877
NEWLINE DEDENT DEDENT if NAME == ::: 877
, NAME ] : NEWLINE INDENT ::: 877
( NAME , NAME ) ( ::: 877
** NAME ) NEWLINE NAME ( ::: 877
NAME . NAME ) if NAME ::: 877
( NAME , NAME ) else ::: 877
+ STRING NEWLINE NAME ( NAME ::: 876
NAME ) NEWLINE NAME = False ::: 876
NAME ] , NAME = STRING ::: 876
, NAME , NAME [ STRING ::: 876
] * NAME [ NUMBER ] ::: 876
NAME ( NAME ( * NAME ::: 876
NAME ( STRING ) ( ) ::: 876
, None ) NEWLINE if not ::: 876
NUMBER : ] ) ) NEWLINE ::: 876
: NAME . NAME } , ::: 876
False ) NEWLINE NAME ( NAME ::: 875
NAME NEWLINE if NAME in NAME ::: 875
= NAME ( None , NAME ::: 875
( NAME ) NEWLINE return { ::: 875
NEWLINE with NAME : NEWLINE INDENT ::: 875
NAME , STRING % NAME , ::: 875
NAME - NUMBER ) ) NEWLINE ::: 875
STRING ) , STRING , NAME ::: 875
: [ NUMBER , NUMBER , ::: 875
= NAME NEWLINE NAME , NAME ::: 875
] NEWLINE NAME ( STRING , ::: 874
) NEWLINE NAME NEWLINE NAME ( ::: 874
= [ ( NUMBER , NUMBER ::: 874
) , None ) NEWLINE DEDENT ::: 874
NEWLINE raise NEWLINE DEDENT DEDENT EOS ::: 874
NAME = NUMBER ) NEWLINE class ::: 874
STRING in NAME ) NEWLINE DEDENT ::: 874
NAME ) NEWLINE return STRING % ::: 874
NAME ( ) [ NUMBER : ::: 874
INDENT if NAME < NAME : ::: 874
, STRING , NAME ) ) ::: 874
return NAME ( NAME = STRING ::: 873
return ( NAME . NAME . ::: 873
False NEWLINE DEDENT return NAME NEWLINE ::: 873
] [ NAME ] ) NEWLINE ::: 873
NEWLINE if NAME != NAME . ::: 873
= NUMBER ) NEWLINE class NAME ::: 872
True , NAME = NAME ( ::: 872
STRING ) NEWLINE DEDENT DEDENT except ::: 872
) . NAME NEWLINE DEDENT except ::: 872
= NAME NEWLINE if NAME ( ::: 872
NAME , STRING ) ) : ::: 871
[ STRING ] ] NEWLINE DEDENT ::: 871
[ NUMBER : ] . NAME ::: 871
NEWLINE NAME = STRING ; NEWLINE ::: 871
[ STRING ] = [ STRING ::: 871
NAME , NAME = ( ) ::: 871
) , STRING : ( NAME ::: 871
( STRING , False ) : ::: 871
== STRING : NEWLINE INDENT break ::: 871
] . NAME ( NAME = ::: 871
NAME = NAME or NAME ( ::: 871
) if NAME ( NAME , ::: 871
= [ ( STRING , [ ::: 870
NEWLINE NAME = NAME = NAME ::: 870
NUMBER NEWLINE DEDENT return NUMBER NEWLINE ::: 870
return None NEWLINE DEDENT def NAME ::: 870
NAME , NUMBER , NAME , ::: 870
NAME = ( NAME * NAME ::: 870
= [ STRING ] ) ) ::: 870
NAME , STRING ] ) NEWLINE ::: 870
STRING ) , NAME , NAME ::: 869
= STRING % NAME ( NAME ::: 869
[ STRING ] = [ NAME ::: 869
NAME NEWLINE DEDENT NAME = { ::: 869
, { STRING : ( STRING ::: 869
NAME . NAME [ NAME : ::: 869
NAME ) NEWLINE DEDENT return ( ::: 869
elif NAME < NUMBER : NEWLINE ::: 869
NAME * NUMBER ) NEWLINE NAME ::: 869
( None , { STRING : ::: 868
NAME . NAME ( NAME in ::: 868
NAME + STRING . NAME ( ::: 868
NAME . NAME = [ ( ::: 868
if NAME [ NAME ] [ ::: 868
return [ STRING , STRING , ::: 868
NAME or NAME : NEWLINE INDENT ::: 868
/ NUMBER NEWLINE NAME . NAME ::: 868
, ( STRING , { STRING ::: 868
, STRING , NAME [ STRING ::: 868
) NEWLINE DEDENT return STRING NEWLINE ::: 868
DEDENT elif NAME < NUMBER : ::: 868
NAME } NEWLINE return NAME . ::: 868
= NAME [ NUMBER ] ) ::: 868
if not NAME . NAME and ::: 868
NUMBER * NUMBER * NUMBER NEWLINE ::: 868
( NAME , NAME ) [ ::: 868
[ ] NEWLINE DEDENT NAME . ::: 868
!= NUMBER ) : NEWLINE INDENT ::: 868
, NAME [ - NUMBER ] ::: 867
+ NAME ) . NAME ( ::: 867
[ NAME ( STRING , [ ::: 867
STRING ] NEWLINE from NAME import ::: 867
None ) : NEWLINE INDENT from ::: 867
NEWLINE NAME += STRING . NAME ::: 867
is not None NEWLINE DEDENT EOS ::: 867
NAME ( ) , } NEWLINE ::: 867
NUMBER ] * NAME [ NUMBER ::: 867
NAME NEWLINE NAME ( STRING . ::: 866
= NAME NEWLINE NAME [ NAME ::: 866
NAME import * NEWLINE try : ::: 866
True ) NEWLINE DEDENT def NAME ::: 866
= NAME ( NAME * NAME ::: 866
. NAME ( NAME ) / ::: 866
NUMBER ) ] ) NEWLINE DEDENT ::: 866
: False , } NEWLINE EOS ::: 866
return NAME . NAME + STRING ::: 866
NAME . NAME * NUMBER ) ::: 866
( ) NEWLINE DEDENT DEDENT else ::: 865
NAME , NAME , [ NAME ::: 865
] ) NEWLINE DEDENT except : ::: 865
NEWLINE DEDENT DEDENT DEDENT except NAME ::: 865
NAME ) if NAME ( NAME ::: 865
None NEWLINE if NAME : NEWLINE ::: 865
{ STRING : NAME [ NUMBER ::: 865
= NAME ( [ NAME , ::: 865
DEDENT DEDENT if not NAME : ::: 865
) , ] , NAME = ::: 864
, NAME + NAME ) NEWLINE ::: 864
. NAME ( NAME / NUMBER ::: 864
= [ NUMBER ] NEWLINE NAME ::: 864
] , STRING : False , ::: 864
** NUMBER + NAME ** NUMBER ::: 864
. NAME is not None NEWLINE ::: 864
NAME ( NAME ) , ] ::: 864
== NUMBER or NAME == NUMBER ::: 863
return NAME [ NUMBER ] . ::: 863
STRING , [ ( STRING , ::: 863
) NEWLINE while NUMBER : NEWLINE ::: 863
] ) NEWLINE NAME = NUMBER ::: 863
NUMBER NEWLINE DEDENT for NAME in ::: 862
NEWLINE NAME = NAME NEWLINE import ::: 862
. NAME ( ) } ) ::: 862
. NAME >= NAME . NAME ::: 862
STRING ) NEWLINE if ( NAME ::: 862
NAME [ STRING ] + NAME ::: 862
] ) . NAME ( STRING ::: 862
) ) , STRING ) ) ::: 862
, NAME = NAME NEWLINE if ::: 862
None , None ) NEWLINE DEDENT ::: 862
. NAME = NAME if NAME ::: 862
NEWLINE return [ NAME ] NEWLINE ::: 862
. NAME . NAME if NAME ::: 862
NAME ( NAME [ NAME + ::: 862
] < NUMBER : NEWLINE INDENT ::: 862
NAME NEWLINE if NAME == NUMBER ::: 861
NAME ] . NAME . NAME ::: 861
: - NUMBER ] : NEWLINE ::: 861
= NAME NEWLINE if NAME == ::: 861
) + STRING NEWLINE DEDENT DEDENT ::: 861
) * NAME ( NAME ) ::: 861
== NAME NEWLINE assert NAME . ::: 861
( NAME ) if NAME else ::: 861
[ ( STRING , [ STRING ::: 861
{ } NEWLINE NAME = STRING ::: 861
[ NAME , NAME . NAME ::: 860
NEWLINE INDENT NAME [ NAME ( ::: 860
( STRING , NAME = None ::: 860
in NAME [ STRING ] ] ::: 860
= False NEWLINE NAME = [ ::: 860
[ STRING ] . NAME , ::: 860
) if NAME ( NAME ) ::: 860
= NAME . NAME NEWLINE try ::: 860
NAME / NUMBER ) NEWLINE DEDENT ::: 860
STRING NEWLINE if NAME == NAME ::: 860
NAME . NAME . NAME += ::: 860
NAME : NEWLINE INDENT from . ::: 860
NAME [ NAME ] NEWLINE for ::: 859
{ STRING : True } ) ::: 859
import * NEWLINE try : NEWLINE ::: 859
return True NEWLINE DEDENT return NAME ::: 859
NUMBER , NAME ( STRING ) ::: 859
{ STRING : [ ] , ::: 859
NAME . NAME ) * NAME ::: 859
NEWLINE STRING NEWLINE NAME = { ::: 859
* NEWLINE try : NEWLINE INDENT ::: 859
NAME ( ) ] = NAME ::: 859
NEWLINE NAME = None NEWLINE try ::: 859
NEWLINE INDENT NAME = [ { ::: 859
return NAME in NAME . NAME ::: 859
[ NAME [ NUMBER ] , ::: 859
, NAME ) NEWLINE return True ::: 859
( NAME [ NAME + NUMBER ::: 858
) ) , STRING : NAME ::: 858
NEWLINE NAME = STRING NEWLINE assert ::: 858
NAME [ NAME ( NAME . ::: 858
, NUMBER , NUMBER ) ] ::: 858
* NAME NEWLINE NAME = NUMBER ::: 858
) , ) NEWLINE NAME . ::: 857
: NEWLINE INDENT STRING NEWLINE ( ::: 857
NAME == NAME ) : NEWLINE ::: 857
in [ NUMBER , NUMBER , ::: 857
( STRING ) NEWLINE return None ::: 857
STRING ] NEWLINE if not NAME ::: 857
= STRING if NAME . NAME ::: 857
NUMBER ) , NAME ( STRING ::: 857
STRING , NAME = ( NAME ::: 857
return STRING % ( NAME ( ::: 856
) , NAME , NAME . ::: 856
, STRING : False } NEWLINE ::: 856
NAME [ : NUMBER ] == ::: 856
NEWLINE NAME [ NAME ] [ ::: 855
as NAME , NAME NEWLINE from ::: 855
NEWLINE DEDENT from . NAME import ::: 855
: ] NEWLINE DEDENT return NAME ::: 855
NAME , NUMBER ) NEWLINE if ::: 855
, NAME = ( STRING ) ::: 855
, NAME ) , NAME , ::: 855
NEWLINE DEDENT elif NAME [ NUMBER ::: 855
NUMBER , ** NAME ) : ::: 854
. NAME ( ) , } ::: 854
False NEWLINE DEDENT if not NAME ::: 854
] , } , NAME = ::: 854
, NAME ) == NAME NEWLINE ::: 854
+ NUMBER ) NEWLINE DEDENT EOS ::: 854
) NEWLINE DEDENT NAME = ( ::: 854
) == NUMBER ) : NEWLINE ::: 854
( ) NEWLINE return { STRING ::: 854
. NAME . NAME ( - ::: 854
: NEWLINE INDENT for ( NAME ::: 854
INDENT NAME . NAME ( * ::: 854
NUMBER ) ) , NAME = ::: 853
] = NUMBER NEWLINE return NAME ::: 853
NUMBER ] . NAME , STRING ::: 853
} , NAME = NAME . ::: 853
[ STRING ] ] = NAME ::: 853
NUMBER , NUMBER , NUMBER NEWLINE ::: 853
+ NUMBER NEWLINE DEDENT else : ::: 853
NUMBER ) NEWLINE DEDENT DEDENT return ::: 853
[ NAME ] ) NEWLINE EOS ::: 853
import NAME , NAME NEWLINE STRING ::: 852
( NAME , lambda : NAME ::: 852
. NAME = NAME ; NEWLINE ::: 852
) , NAME = lambda NAME ::: 852
True : NEWLINE INDENT NAME , ::: 852
STRING } ) NEWLINE DEDENT DEDENT ::: 852
] NEWLINE from . NAME import ::: 851
] NEWLINE NAME [ NUMBER ] ::: 851
= NAME ( [ ( NAME ::: 851
, * NAME ) NEWLINE NAME ::: 851
NAME ) } ) NEWLINE DEDENT ::: 851
, NAME [ NAME + NUMBER ::: 851
NEWLINE NAME ( ** NAME ) ::: 851
NEWLINE INDENT for ( NAME , ::: 851
NEWLINE NAME = [ [ STRING ::: 851
NAME , NAME ) [ NUMBER ::: 851
False , ** NAME ) : ::: 851
+ STRING ) : NEWLINE INDENT ::: 850
NEWLINE if NAME == - NUMBER ::: 850
( * NAME ) ) NEWLINE ::: 850
) + STRING NEWLINE DEDENT EOS ::: 850
. NAME ( NAME ) - ::: 850
NAME += NAME ( NAME , ::: 850
[ ( STRING , NUMBER ) ::: 850
try : NEWLINE INDENT NAME NEWLINE ::: 850
NAME ( NAME ) : ] ::: 850
( NAME ) NEWLINE del NAME ::: 850
STRING ) , STRING , STRING ::: 850
NAME ( NAME + NAME + ::: 850
: ] ) NEWLINE NAME = ::: 850
. NAME . NAME } NEWLINE ::: 849
NAME + NUMBER ] = NAME ::: 849
} , ) , NAME . ::: 849
= NAME ( None ) NEWLINE ::: 848
. NAME ] NEWLINE if NAME ::: 848
+ NUMBER , NAME ) NEWLINE ::: 848
NUMBER , NUMBER ) . NAME ::: 848
= NAME ( [ NAME ] ::: 848
NAME [ STRING ] ] ) ::: 848
NAME , [ ( STRING , ::: 848
True , NAME = None ) ::: 848
NEWLINE DEDENT if STRING not in ::: 848
DEDENT DEDENT DEDENT NAME ( NAME ::: 848
) - NUMBER NEWLINE NAME = ::: 848
) ) NEWLINE return ( NAME ::: 848
- NUMBER , NUMBER , - ::: 847
NEWLINE assert NAME == NAME . ::: 847
) NEWLINE if not NAME or ::: 847
% NAME NEWLINE DEDENT DEDENT EOS ::: 847
[ NAME ] NEWLINE DEDENT def ::: 847
] = NAME NEWLINE NAME ( ::: 847
= { STRING : [ ] ::: 846
in NAME [ STRING ] [ ::: 846
STRING ) NEWLINE pass NEWLINE DEDENT ::: 846
NUMBER ] ) [ NUMBER ] ::: 846
NEWLINE INDENT STRING NEWLINE ( NAME ::: 846
STRING NEWLINE return [ NAME . ::: 846
NEWLINE NAME ( NAME = [ ::: 845
is NAME . NAME : NEWLINE ::: 845
( NAME ) } ) NEWLINE ::: 845
NAME ) == NUMBER ) NEWLINE ::: 845
NAME = STRING ; NEWLINE NAME ::: 845
NEWLINE INDENT if not ( NAME ::: 845
INDENT NAME , NAME = NUMBER ::: 845
[ STRING ] ) ) , ::: 845
NEWLINE if NAME and NAME ( ::: 845
, ] NEWLINE DEDENT DEDENT EOS ::: 845
NEWLINE NAME += NUMBER NEWLINE if ::: 845
STRING + NAME ) NEWLINE return ::: 845
( { STRING : NAME [ ::: 845
- NUMBER , NAME = NUMBER ::: 845
NUMBER ) NEWLINE class NAME : ::: 845
NAME . NAME >= NAME . ::: 845
] NEWLINE NAME ( NAME ( ::: 845
] ) + STRING + NAME ::: 845
NUMBER ] NEWLINE DEDENT NAME . ::: 844
+ NAME NEWLINE NAME ( NAME ::: 844
( ) NEWLINE DEDENT with NAME ::: 844
] : NEWLINE INDENT return True ::: 844
] [ NAME . NAME ] ::: 844
[ NAME ] ) NEWLINE return ::: 844
NAME ) . NAME , NAME ::: 843
( NAME . NAME / NUMBER ::: 843
NAME ) != NAME : NEWLINE ::: 843
NAME = True NEWLINE NAME ( ::: 843
, STRING , ( STRING , ::: 843
( NAME + NAME + NAME ::: 843
( { STRING : NUMBER } ::: 842
NAME ( ) NEWLINE DEDENT with ::: 842
assert NAME [ NUMBER ] . ::: 842
STRING , NAME ( NAME ( ::: 842
+= STRING NEWLINE DEDENT return NAME ::: 842
( NAME , [ NUMBER , ::: 842
NUMBER * NAME ) NEWLINE NAME ::: 842
NAME ) NEWLINE DEDENT return NEWLINE ::: 842
INDENT if NAME != NAME : ::: 842
return { } NEWLINE DEDENT DEDENT ::: 841
= NUMBER ; NEWLINE NAME = ::: 841
DEDENT NAME . NAME ( [ ::: 841
DEDENT DEDENT return NUMBER NEWLINE DEDENT ::: 841
as NAME NEWLINE NAME = { ::: 841
NAME ) NEWLINE STRING NEWLINE NAME ::: 841
[ NAME . NAME [ STRING ::: 841
[ : - NUMBER ] + ::: 840
. NAME [ STRING ] ] ::: 840
} ) . NAME ( STRING ::: 840
= False NEWLINE if NAME . ::: 840
- NAME ( NAME . NAME ::: 840
NAME , [ NAME , NAME ::: 840
NAME [ STRING ] } ) ::: 840
= STRING % ( NAME [ ::: 840
[ NAME ] + NAME [ ::: 840
[ STRING ] = [ ] ::: 840
return NAME ( STRING . NAME ::: 840
( STRING ) NEWLINE return NUMBER ::: 840
, STRING , [ STRING , ::: 839
NAME , STRING ) NEWLINE try ::: 839
INDENT NAME ( NAME [ NUMBER ::: 839
( NAME [ : , NUMBER ::: 839
NAME [ - NUMBER ] , ::: 839
, NAME NEWLINE DEDENT else : ::: 839
NAME ( STRING STRING % ( ::: 839
NAME ] = { } NEWLINE ::: 839
. NAME ( ) ) for ::: 839
NAME ) NEWLINE assert not NAME ::: 839
NAME , NAME [ NUMBER : ::: 838
] ) NEWLINE def NAME ( ::: 838
[ : , NUMBER ] , ::: 838
[ NUMBER for NAME in NAME ::: 838
. NAME = STRING NEWLINE EOS ::: 838
NAME ) } NEWLINE DEDENT EOS ::: 837
, NUMBER , STRING , NUMBER ::: 837
. NAME NEWLINE del NAME . ::: 837
INDENT NAME ( NAME = STRING ::: 837
} , STRING : { } ::: 837
= True NEWLINE DEDENT DEDENT DEDENT ::: 837
STRING ] = [ ] NEWLINE ::: 837
NAME ) - NAME . NAME ::: 836
NAME == NAME ) NEWLINE DEDENT ::: 836
INDENT return NEWLINE DEDENT NAME ( ::: 836
INDENT for ( NAME , NAME ::: 836
NAME = STRING if NAME . ::: 836
( NAME = True ) . ::: 836
NAME , NAME , { STRING ::: 835
NAME ) NEWLINE DEDENT DEDENT for ::: 835
= NAME ( NUMBER , STRING ::: 835
for NAME in [ NUMBER , ::: 835
, None ) NEWLINE return NAME ::: 835
( NAME ) . NAME , ::: 835
. NAME ) ) NEWLINE EOS ::: 835
. NAME ) and NAME . ::: 834
( NAME = False ) , ::: 834
NEWLINE NAME = False NEWLINE def ::: 834
. NAME ( NAME ) != ::: 834
[ STRING ] NEWLINE try : ::: 834
( [ ( NAME , NAME ::: 834
STRING : NEWLINE INDENT pass NEWLINE ::: 834
NUMBER ) ) NEWLINE DEDENT return ::: 834
= NAME ( ) NEWLINE while ::: 834
assert not NAME . NAME . ::: 834
STRING NEWLINE NAME . NAME += ::: 834
NUMBER + NAME . NAME ( ::: 834
[ NAME ] ) NEWLINE if ::: 834
( STRING , NAME , { ::: 833
] NEWLINE NAME ( STRING % ::: 833
as NAME NEWLINE DEDENT from NAME ::: 833
STRING , ( NAME . NAME ::: 833
, ( NAME , STRING ) ::: 833
) + NAME . NAME NEWLINE ::: 833
: ( NUMBER , NUMBER ) ::: 833
NAME , NAME NEWLINE DEDENT NAME ::: 833
, NUMBER ) ) NEWLINE return ::: 833
( STRING + STRING ) NEWLINE ::: 833
INDENT NAME += NAME NEWLINE NAME ::: 833
NAME , NAME ] : NEWLINE ::: 833
) . NAME ( ) + ::: 832
STRING , STRING : [ ] ::: 832
NUMBER ) NEWLINE NAME [ NAME ::: 832
NEWLINE import NAME NEWLINE NAME , ::: 832
, NAME ) and NAME . ::: 832
) ] ) ) NEWLINE DEDENT ::: 831
return NAME NEWLINE DEDENT DEDENT raise ::: 831
STRING , STRING , STRING } ::: 831
assert NAME . NAME is None ::: 831
NUMBER : - NUMBER ] ) ::: 831
DEDENT elif NAME [ NUMBER ] ::: 830
NUMBER : NEWLINE INDENT return ( ::: 830
NUMBER NEWLINE NAME = [ NAME ::: 830
NAME = NAME NEWLINE NAME += ::: 830
, STRING : [ NUMBER , ::: 830
NAME . NAME [ NAME + ::: 830
, NAME = [ NAME , ::: 830
. NAME ( ) != NAME ::: 829
NEWLINE INDENT if NAME ( ) ::: 829
None : NEWLINE INDENT try : ::: 829
: STRING } NEWLINE NAME ( ::: 829
STRING ] ] NEWLINE NAME = ::: 828
= NAME [ : ] NEWLINE ::: 828
] ) ) NEWLINE DEDENT else ::: 828
NAME ] - NAME [ NAME ::: 828
( NAME , NAME ) as ::: 828
return False NEWLINE DEDENT for NAME ::: 828
( NAME [ NUMBER ] == ::: 828
NAME ( NAME , ( STRING ::: 827
= NUMBER NEWLINE NAME , NAME ::: 827
NAME = STRING NEWLINE raise NAME ::: 827
STRING . NAME ( ** NAME ::: 827
NEWLINE NAME [ NUMBER ] . ::: 827
STRING ) [ : NUMBER ] ::: 827
STRING , STRING , { } ::: 827
NAME . NAME } NEWLINE return ::: 827
DEDENT NAME = NAME + NAME ::: 826
NAME = NAME + ( NAME ::: 826
import NAME NEWLINE NAME = lambda ::: 826
[ NUMBER ] , NAME , ::: 826
: ] . NAME ( ) ::: 826
INDENT NAME [ STRING ] [ ::: 826
( STRING ) NEWLINE NAME NEWLINE ::: 826
, NAME ) NEWLINE return [ ::: 826
INDENT NAME = NAME * NUMBER ::: 826
[ STRING % ( NAME , ::: 825
STRING , STRING , ) , ::: 825
. NAME ( NAME in NAME ::: 825
STRING ] [ NAME ] NEWLINE ::: 825
NAME = NUMBER , NUMBER , ::: 825
NEWLINE INDENT NAME += ( NAME ::: 824
NAME = False NEWLINE DEDENT return ::: 824
= STRING ) , } NEWLINE ::: 824
NAME and NAME ( NAME . ::: 824
] NEWLINE if NAME == NAME ::: 823
NUMBER ] , NAME ) ) ::: 823
NEWLINE NAME = yield NAME . ::: 823
NAME ) ] NEWLINE for NAME ::: 823
STRING ) NEWLINE DEDENT from NAME ::: 823
NAME = True NEWLINE DEDENT return ::: 823
[ NAME ( NAME = NAME ::: 823
NAME % ( NAME , NAME ::: 823
STRING ] = NAME ( STRING ::: 822
, NAME ) = NAME NEWLINE ::: 822
NAME : STRING . NAME ( ::: 822
NAME = True , ** NAME ::: 822
None , NAME . NAME ) ::: 822
import ( NAME ) NEWLINE from ::: 822
[ ] NEWLINE DEDENT return NAME ::: 822
STRING ] = NAME [ NUMBER ::: 822
None NEWLINE DEDENT try : NEWLINE ::: 822
= NAME ( NAME , [ ::: 821
) ] NEWLINE return NAME ( ::: 821
NEWLINE async def NAME ( NAME ::: 821
( STRING , STRING + NAME ::: 821
NAME = NAME = NAME = ::: 821
NAME ( ) ) , ( ::: 821
STRING ] . NAME NEWLINE NAME ::: 821
] = NAME ( NAME ( ::: 821
NAME >= NAME . NAME : ::: 821
) if not NAME . NAME ::: 821
NAME , NAME ) ; NEWLINE ::: 821
] NEWLINE with NAME . NAME ::: 821
; NEWLINE import NAME ; NEWLINE ::: 821
NAME ) ) , NAME . ::: 821
STRING ] . NAME ) NEWLINE ::: 821
, NAME ( NAME ) + ::: 820
import * NEWLINE import NAME , ::: 820
) and ( NAME . NAME ::: 819
( NAME . NAME , False ::: 819
INDENT NAME = [ { STRING ::: 819
NAME [ NAME , : ] ::: 819
NEWLINE STRING NEWLINE STRING NEWLINE STRING ::: 819
* NEWLINE import NAME , NAME ::: 819
NAME ( STRING , ** NAME ::: 819
NAME ( None , STRING , ::: 818
NEWLINE INDENT STRING NEWLINE return None ::: 818
) NEWLINE DEDENT elif ( NAME ::: 818
NAME [ : , : , ::: 818
/ NAME ( NAME . NAME ::: 818
NEWLINE DEDENT import NAME . NAME ::: 818
= NUMBER NEWLINE try : NEWLINE ::: 818
, NAME ) ; NEWLINE NAME ::: 818
= NAME NEWLINE NAME += NUMBER ::: 818
NAME ) ) + STRING ) ::: 818
] . NAME = NAME . ::: 818
, NAME . NAME NEWLINE import ::: 818
] = NAME NEWLINE if NAME ::: 817
STRING ] NEWLINE NAME ( STRING ::: 817
: NEWLINE INDENT assert not NAME ::: 817
, NAME ( NAME ( STRING ::: 817
from NAME import NAME NEWLINE with ::: 817
, ) NEWLINE return NAME NEWLINE ::: 817
) NEWLINE NAME = [ [ ::: 817
NEWLINE INDENT return NAME ( NUMBER ::: 817
] - NAME [ NAME ] ::: 817
. NAME += NUMBER NEWLINE if ::: 816
NAME + STRING NEWLINE return NAME ::: 816
NEWLINE INDENT import NAME , NAME ::: 816
: NEWLINE INDENT import NAME , ::: 816
% NAME , NAME = NAME ::: 816
INDENT NAME += NUMBER NEWLINE if ::: 816
NAME [ NUMBER ] ) * ::: 816
STRING ] } NEWLINE NAME = ::: 816
+ STRING ) NEWLINE DEDENT else ::: 816
. NAME = lambda NAME : ::: 815
INDENT return STRING + NAME . ::: 815
NAME ( STRING + STRING ) ::: 815
NAME ** NUMBER + NAME ** ::: 815
+ NAME ( NAME , NAME ::: 815
NAME = NAME NEWLINE NAME , ::: 815
NAME ) NEWLINE DEDENT raise NAME ::: 815
NAME ) NEWLINE assert STRING in ::: 815
NEWLINE import NAME ; NEWLINE import ::: 815
NAME ] = NUMBER NEWLINE NAME ::: 815
, STRING , NAME ) , ::: 814
. NAME ( ( NAME - ::: 814
: NAME ( NAME , STRING ::: 814
( NAME ) NEWLINE yield NAME ::: 814
( NAME , NAME - NUMBER ::: 814
= NUMBER NEWLINE if NAME . ::: 814
) NEWLINE DEDENT return NUMBER NEWLINE ::: 814
and not NAME ( NAME , ::: 814
] NEWLINE DEDENT if NAME . ::: 813
. NAME ( NAME - NUMBER ::: 813
, NUMBER ] NEWLINE for NAME ::: 813
STRING ] = True NEWLINE DEDENT ::: 813
) NEWLINE if NAME >= NUMBER ::: 813
= True ) NEWLINE DEDENT except ::: 813
NEWLINE INDENT NAME = NAME = ::: 813
NAME ) : pass NEWLINE EOS ::: 813
STRING NEWLINE return None NEWLINE DEDENT ::: 813
NAME + NAME NEWLINE return NAME ::: 812
[ : , NUMBER ] NEWLINE ::: 812
NAME ( ) [ : NUMBER ::: 812
: : - NUMBER ] ) ::: 812
STRING ) + STRING + NAME ::: 812
NAME = NUMBER NEWLINE try : ::: 812
) NEWLINE DEDENT return [ NAME ::: 812
- NAME ( NAME ) NEWLINE ::: 811
( STRING ) [ NUMBER : ::: 811
NAME + STRING , NAME . ::: 811
NUMBER ] NEWLINE NAME [ STRING ::: 811
STRING , NUMBER : STRING } ::: 811
NEWLINE NAME = STRING STRING NEWLINE ::: 811
NAME = NAME [ : ] ::: 811
( ) . NAME , NAME ::: 811
( NAME ) == NUMBER and ::: 811
NAME : NAME ( NAME . ::: 811
NAME * ( NAME - NAME ::: 811
NAME [ NUMBER ] [ NAME ::: 810
STRING , STRING ] } ) ::: 810
% NAME , NAME ) NEWLINE ::: 810
+ NAME [ NUMBER ] ) ::: 810
= NAME ) NEWLINE NAME [ ::: 810
NAME += NAME ( NAME [ ::: 810
: NUMBER ] == STRING : ::: 810
NAME is False : NEWLINE INDENT ::: 810
NAME . NAME NEWLINE while NAME ::: 810
NAME == NUMBER NEWLINE NAME = ::: 809
DEDENT DEDENT DEDENT return False NEWLINE ::: 809
( NAME ) NEWLINE DEDENT with ::: 809
False , STRING : True , ::: 809
( NAME ) * NAME . ::: 809
is None : NEWLINE INDENT if ::: 809
and NAME ( NAME , STRING ::: 809
not in [ STRING , STRING ::: 808
STRING NEWLINE if NAME < NUMBER ::: 808
NAME . NAME * NAME ) ::: 808
INDENT STRING NEWLINE if NAME [ ::: 808
STRING , ] , } , ::: 808
NAME ) NEWLINE import NAME as ::: 808
True NEWLINE return NAME NEWLINE DEDENT ::: 808
NAME ( NAME . NAME for ::: 807
NAME ( NAME ) % NUMBER ::: 807
, STRING , NUMBER ) , ::: 807
NAME = STRING % NAME ) ::: 807
[ NAME + NUMBER ] = ::: 807
NAME ( ) ) == NUMBER ::: 807
. NAME ) ) NEWLINE for ::: 807
return NAME + STRING NEWLINE DEDENT ::: 807
INDENT NAME = False NEWLINE for ::: 806
== STRING NEWLINE NAME . NAME ::: 806
. NAME [ NUMBER ] ] ::: 806
or NAME == STRING or NAME ::: 806
, NAME , NAME [ NUMBER ::: 806
= True ) NEWLINE DEDENT NAME ::: 806
= True NEWLINE DEDENT NAME . ::: 806
STRING ] ) , NAME ( ::: 806
- NUMBER NEWLINE NAME = - ::: 806
NAME + NAME NEWLINE DEDENT return ::: 805
NAME + NAME [ NAME ] ::: 805
NAME , NAME : NAME = ::: 805
} , NAME = True ) ::: 805
STRING % NAME ) NEWLINE EOS ::: 805
DEDENT class NAME ( NAME ) ::: 805
NAME [ : NAME ] ) ::: 805
NEWLINE INDENT @ NAME ( STRING ::: 805
] ) NEWLINE if NAME == ::: 805
( ) [ : NUMBER ] ::: 804
STRING , STRING % NAME ) ::: 804
) [ NUMBER ] + STRING ::: 804
NAME + STRING ) ) NEWLINE ::: 804
NUMBER ] . NAME [ NUMBER ::: 804
( STRING , STRING ) } ::: 804
[ NAME ] = STRING NEWLINE ::: 804
= False NEWLINE DEDENT return NAME ::: 804
= ( NUMBER , ) ) ::: 804
= True NEWLINE return NAME NEWLINE ::: 803
= None ) NEWLINE DEDENT DEDENT ::: 803
} ) ) NEWLINE NAME = ::: 803
( NAME , NAME ( NUMBER ::: 803
. NAME : NEWLINE INDENT continue ::: 803
[ NAME ] - NAME [ ::: 803
( NAME , None , NAME ::: 803
NAME ( STRING , NAME + ::: 803
INDENT NAME . NAME -= NUMBER ::: 803
+= NAME . NAME ( STRING ::: 802
INDENT NAME = NAME ( None ::: 802
STRING , STRING ) NEWLINE with ::: 802
INDENT NAME . NAME [ NUMBER ::: 802
NUMBER NEWLINE DEDENT DEDENT DEDENT return ::: 802
+ NUMBER ) ) NEWLINE DEDENT ::: 802
INDENT STRING NEWLINE ( NAME , ::: 801
if NAME . NAME >= ( ::: 801
NEWLINE NAME ( ) NEWLINE from ::: 801
NAME ) ) , ( STRING ::: 801
NUMBER ) : NEWLINE INDENT from ::: 801
STRING in NAME ( NAME ) ::: 801
] . NAME ( { STRING ::: 801
, STRING ) NEWLINE NAME , ::: 801
DEDENT NAME = NAME + NUMBER ::: 801
if ( NAME ( NAME . ::: 801
= True ) NEWLINE assert NAME ::: 801
( NUMBER * NAME ) NEWLINE ::: 801
STRING , None ) : NEWLINE ::: 801
= [ NAME ( ) , ::: 801
, lambda : NAME . NAME ::: 801
= NAME ( NAME - NAME ::: 800
, None ) NEWLINE NAME ( ::: 800
return - NUMBER NEWLINE DEDENT DEDENT ::: 800
, STRING ) ) as NAME ::: 800
+= STRING % ( NAME , ::: 800
STRING , NAME , NAME ] ::: 800
NAME += NUMBER NEWLINE NAME += ::: 800
NAME = { } ) NEWLINE ::: 800
STRING ) , } NEWLINE NAME ::: 800
) , ) NEWLINE DEDENT DEDENT ::: 799
( NAME ) <= NUMBER : ::: 799
True , STRING : STRING , ::: 799
NAME = NAME NEWLINE from NAME ::: 799
STRING ] NEWLINE if NAME == ::: 799
NEWLINE return NEWLINE DEDENT def NAME ::: 799
None , NAME . NAME ( ::: 799
, NUMBER ) ) NEWLINE EOS ::: 798
( ( NAME . NAME . ::: 798
STRING : STRING } NEWLINE return ::: 798
NUMBER NEWLINE NAME ( STRING ) ::: 798
STRING NEWLINE global NAME NEWLINE if ::: 798
INDENT NAME = [ ( NAME ::: 797
NAME ( NUMBER ) == NUMBER ::: 797
NEWLINE DEDENT DEDENT return ( NAME ::: 797
in NAME ] NEWLINE DEDENT DEDENT ::: 797
INDENT NAME [ NAME ( NAME ::: 797
NAME ) , NAME = False ::: 797
NAME . NAME . NAME - ::: 797
, NUMBER , NUMBER , - ::: 797
NEWLINE if NAME == STRING or ::: 797
+ NAME . NAME [ STRING ::: 797
) . NAME : NEWLINE INDENT ::: 796
return ( NAME ( NAME ) ::: 796
: NAME ( STRING ) } ::: 796
. NAME not in NAME . ::: 796
] [ NAME ] [ STRING ::: 796
NAME } ) NEWLINE DEDENT return ::: 796
) NEWLINE if ( NAME ( ::: 796
NAME = STRING STRING NEWLINE NAME ::: 796
( ) , STRING , NAME ::: 795
INDENT NAME [ NAME [ NUMBER ::: 795
STRING + STRING ) NEWLINE NAME ::: 795
STRING ] NEWLINE DEDENT NAME . ::: 795
= ( NAME . NAME [ ::: 795
== STRING : NEWLINE INDENT for ::: 795
, STRING + NAME + STRING ::: 795
NAME ) , None ) NEWLINE ::: 795
] ) , STRING : NAME ::: 794
NAME ) ) for NAME , ::: 794
NAME = NUMBER NEWLINE NAME , ::: 794
] . NAME NEWLINE NAME . ::: 794
( STRING ) , NAME , ::: 794
STRING ) NEWLINE assert STRING in ::: 794
NAME * NAME ) ) NEWLINE ::: 794
return NAME ; NEWLINE DEDENT EOS ::: 793
NEWLINE return NUMBER NEWLINE DEDENT DEDENT ::: 793
) NEWLINE assert NAME is not ::: 793
NAME + NUMBER NEWLINE DEDENT return ::: 793
= NAME [ NUMBER ] + ::: 792
= NAME ( ( NAME . ::: 792
= NAME . NAME NEWLINE assert ::: 792
) NEWLINE assert NAME [ NUMBER ::: 792
return NEWLINE DEDENT try : NEWLINE ::: 792
INDENT raise NAME . NAME . ::: 792
STRING , STRING ] NEWLINE return ::: 792
STRING NEWLINE def NAME ( ) ::: 792
None , NAME ) NEWLINE NAME ::: 792
STRING ) , ] NEWLINE DEDENT ::: 792
INDENT with NAME ( ) as ::: 791
. NAME NEWLINE assert NAME ( ::: 791
False NEWLINE DEDENT for NAME in ::: 791
STRING ] NEWLINE if NAME : ::: 791
for NAME in NAME ] , ::: 791
NAME else NAME . NAME NEWLINE ::: 791
. NAME ( ) ] , ::: 791
) NEWLINE assert not NAME ( ::: 791
NAME ( ) ) + STRING ::: 791
} NEWLINE NAME = ( STRING ::: 791
( NAME = STRING , ) ::: 791
. NAME } NEWLINE DEDENT DEDENT ::: 791
) NEWLINE return NEWLINE DEDENT if ::: 791
) ) : NEWLINE INDENT assert ::: 791
return { STRING : STRING } ::: 790
INDENT return STRING + NAME ( ::: 790
) + NUMBER NEWLINE NAME = ::: 790
) NEWLINE DEDENT return STRING % ::: 790
, NAME [ NAME . NAME ::: 790
INDENT NAME = NAME NEWLINE break ::: 790
, NUMBER ) NEWLINE NAME [ ::: 790
= NUMBER * NUMBER NEWLINE NAME ::: 790
) [ NUMBER : NUMBER ] ::: 789
) , NAME ) NEWLINE if ::: 789
NAME ] == STRING : NEWLINE ::: 789
% NAME ) NEWLINE DEDENT if ::: 789
NAME , NAME , True ) ::: 789
= NUMBER NEWLINE DEDENT DEDENT DEDENT ::: 789
[ NUMBER ] ] NEWLINE NAME ::: 789
NAME , NAME ) ] ) ::: 789
) NEWLINE assert NAME == [ ::: 789
STRING : NUMBER } NEWLINE DEDENT ::: 789
= False ) , NAME = ::: 788
NUMBER , STRING , STRING , ::: 788
NUMBER , NUMBER ) NEWLINE if ::: 788
and NAME ( NAME ) > ::: 788
( ) == STRING NEWLINE DEDENT ::: 788
NUMBER ] = NAME NEWLINE NAME ::: 788
] ] = NAME NEWLINE DEDENT ::: 787
= NAME ( NAME , { ::: 787
( * NAME . NAME ( ::: 787
NUMBER , NUMBER ] NEWLINE for ::: 787
. NAME } NEWLINE return NAME ::: 787
not NAME . NAME NEWLINE DEDENT ::: 787
INDENT assert NAME . NAME == ::: 787
NUMBER ) NEWLINE NAME = { ::: 787
( NAME . NAME ) } ::: 786
, STRING , STRING , [ ::: 786
[ NUMBER ] == NAME : ::: 786
for NAME in NAME for NAME ::: 786
NUMBER , NAME ( NAME ( ::: 786
, NAME = ( STRING STRING ::: 786
, - NUMBER , NUMBER ) ::: 786
) , [ ] ) NEWLINE ::: 786
STRING ) NEWLINE if NAME [ ::: 786
. NAME , } NEWLINE NAME ::: 786
return NAME . NAME + NAME ::: 786
+ NAME . NAME ( NUMBER ::: 786
[ ] NEWLINE try : NEWLINE ::: 785
NAME ) ) ) : NEWLINE ::: 785
( - NUMBER , - NUMBER ::: 785
) NEWLINE NAME . NAME NEWLINE ::: 785
[ STRING ] NEWLINE if not ::: 785
) NEWLINE NAME -= NUMBER NEWLINE ::: 785
NAME ( NAME - NAME , ::: 785
NAME + NAME ) ) NEWLINE ::: 785
+ STRING ) . NAME ( ::: 785
] NEWLINE DEDENT @ NAME NEWLINE ::: 785
DEDENT except ( NAME . NAME ::: 785
NAME + NUMBER : ] NEWLINE ::: 785
( ) ) ) NEWLINE return ::: 785
NEWLINE INDENT NAME NEWLINE DEDENT except ::: 785
STRING , ] NEWLINE from NAME ::: 784
] = NAME NEWLINE DEDENT if ::: 784
= True , ** NAME ) ::: 784
NEWLINE try : NEWLINE INDENT while ::: 784
, STRING , NUMBER , STRING ::: 784
- NUMBER ) ) NEWLINE NAME ::: 784
NAME if NAME . NAME == ::: 784
] ) , NAME = True ::: 784
yield NAME ( NAME , NAME ::: 783
( NAME ) < NAME : ::: 783
= [ NAME [ NAME ] ::: 783
NAME NEWLINE DEDENT return NAME , ::: 783
if ( not NAME . NAME ::: 783
NUMBER ] NEWLINE NAME [ NAME ::: 783
[ NUMBER ] ) + STRING ::: 783
NAME NEWLINE from ... . NAME ::: 783
} ) . NAME ( ) ::: 783
( NAME , STRING , True ::: 783
NAME ; NEWLINE import NAME ; ::: 783
STRING ) NEWLINE DEDENT DEDENT def ::: 783
NAME [ : NAME ] + ::: 782
* NEWLINE NAME = False NEWLINE ::: 782
{ } , STRING : { ::: 782
[ STRING ] ] ) NEWLINE ::: 782
: STRING } NEWLINE return NAME ::: 782
( NAME ( NAME ( NUMBER ::: 782
NUMBER ] == NAME . NAME ::: 782
+ STRING + STRING ) NEWLINE ::: 782
NEWLINE INDENT del NAME [ STRING ::: 782
INDENT del NAME [ STRING ] ::: 782
NAME ) ) ] NEWLINE DEDENT ::: 782
NAME = NAME ( ( NUMBER ::: 781
[ STRING % NAME for NAME ::: 781
** NAME ) . NAME ( ::: 781
( NAME , NAME = - ::: 781
None , None , None , ::: 781
= NAME , NAME NEWLINE DEDENT ::: 781
NEWLINE NAME = NUMBER / NAME ::: 781
for NAME in NAME if not ::: 781
False , NAME = None , ::: 781
False ) ) NEWLINE NAME . ::: 781
, NAME . NAME + NUMBER ::: 781
[ NUMBER ] ) for NAME ::: 781
NAME = [ STRING % NAME ::: 780
] > NUMBER : NEWLINE INDENT ::: 780
NAME ( STRING ) NEWLINE STRING ::: 780
if NAME == True : NEWLINE ::: 780
] ) , NAME ) NEWLINE ::: 780
= NAME . NAME , ** ::: 780
NUMBER ) NEWLINE while True : ::: 780
] ) NEWLINE NAME = { ::: 780
= NUMBER ) NEWLINE DEDENT NAME ::: 780
[ NUMBER ] == STRING NEWLINE ::: 780
and STRING in NAME . NAME ::: 780
STRING + NAME NEWLINE DEDENT NAME ::: 779
NEWLINE INDENT pass NEWLINE DEDENT if ::: 779
- NUMBER ] ) ) NEWLINE ::: 779
NAME = [ NAME , ] ::: 779
STRING ] [ NUMBER ] ) ::: 779
NAME ( ) > NUMBER : ::: 779
NAME . NAME , STRING NEWLINE ::: 779
NUMBER ) ) NEWLINE for NAME ::: 779
, [ STRING ] ) , ::: 779
( NAME - NAME ( NAME ::: 779
; NEWLINE NAME . NAME . ::: 779
( STRING , NAME ) [ ::: 778
. NAME == STRING ) NEWLINE ::: 778
DEDENT NAME . NAME = False ::: 778
DEDENT if STRING in NAME . ::: 778
if NAME == NAME ( NAME ::: 778
import * NEWLINE NAME = False ::: 778
== STRING : NEWLINE INDENT pass ::: 778
) , STRING : NAME } ::: 778
NAME ( NAME ) ) / ::: 778
DEDENT if NAME > NAME : ::: 778
: NEWLINE INDENT return ( NUMBER ::: 777
( NAME ( NAME = NUMBER ::: 777
[ STRING ] ) , STRING ::: 777
NAME NEWLINE import NAME NEWLINE DEDENT ::: 777
, NAME = STRING STRING STRING ::: 777
NEWLINE DEDENT DEDENT DEDENT NAME = ::: 777
if NAME > NAME . NAME ::: 777
import * NEWLINE from . import ::: 777
NAME ( ( NAME [ NUMBER ::: 777
. NAME import NAME NEWLINE for ::: 777
= NAME ( ) NEWLINE class ::: 777
NEWLINE DEDENT elif NAME > NUMBER ::: 777
NAME , NAME = STRING % ::: 776
, NAME ) NEWLINE DEDENT for ::: 776
from . . import NAME , ::: 776
. import NAME NEWLINE NAME . ::: 775
NEWLINE NAME += NAME ( STRING ::: 775
= [ STRING . NAME ( ::: 775
NAME . NAME ) } NEWLINE ::: 775
. NAME == NAME ) NEWLINE ::: 775
NEWLINE INDENT NAME += [ NAME ::: 775
, STRING % NAME , STRING ::: 775
( NUMBER , NAME - NUMBER ::: 774
STRING : NAME } ) ) ::: 774
NAME + STRING NEWLINE NAME ( ::: 774
INDENT return False NEWLINE DEDENT for ::: 774
) ] = NAME . NAME ::: 774
NUMBER ] = NAME [ NAME ::: 774
NAME ( NAME == NAME ) ::: 774
NAME ) NEWLINE DEDENT assert NAME ::: 774
[ STRING ] ) NEWLINE for ::: 773
. . import NAME , NAME ::: 773
= NAME = NAME . NAME ::: 773
NAME for NAME in NAME [ ::: 773
= STRING % ( NAME ( ::: 773
= NAME ( NAME [ : ::: 773
in ( NAME . NAME , ::: 772
import * NEWLINE NAME ( NAME ::: 772
= { STRING : True } ::: 772
return NUMBER NEWLINE DEDENT return NUMBER ::: 772
, [ STRING ] ) ] ::: 772
, NUMBER ] , STRING : ::: 772
NEWLINE STRING NEWLINE STRING NEWLINE NAME ::: 772
STRING , ( NUMBER , NUMBER ::: 772
[ NAME ] == STRING : ::: 772
INDENT STRING NEWLINE return None NEWLINE ::: 771
] , STRING ) as NAME ::: 771
+= NUMBER NEWLINE if NAME . ::: 771
= STRING ) NEWLINE DEDENT else ::: 771
NEWLINE DEDENT NAME ( STRING + ::: 771
= NAME , ) NEWLINE NAME ::: 771
[ NAME + NUMBER ] ) ::: 771
( ) > NUMBER : NEWLINE ::: 771
( STRING ) NEWLINE STRING NEWLINE ::: 771
NAME + STRING ) NEWLINE return ::: 771
NAME , STRING , NUMBER , ::: 771
- NUMBER ] , NAME [ ::: 771
NAME == NAME [ STRING ] ::: 770
NAME ( NAME ( ( NAME ::: 770
] . NAME ( ) [ ::: 770
DEDENT return NAME NEWLINE DEDENT else ::: 770
DEDENT from . NAME import NAME ::: 770
STRING , NAME ( NUMBER ) ::: 770
DEDENT if NAME in NAME : ::: 770
% NAME . NAME , STRING ::: 770
, NAME [ NUMBER ] ] ::: 770
NAME ( NAME ) , [ ::: 770
DEDENT NAME = [ NAME . ::: 770
NAME ( * NAME , NAME ::: 770
+ NAME [ NAME ] NEWLINE ::: 770
: STRING } ) , NAME ::: 770
= [ ] NEWLINE try : ::: 770
STRING } ) ) NEWLINE NAME ::: 769
return NEWLINE DEDENT NAME ( NAME ::: 769
STRING : NEWLINE INDENT try : ::: 769
DEDENT if NAME . NAME [ ::: 769
STRING % NAME , STRING ) ::: 769
, None , NAME ) NEWLINE ::: 769
STRING ] = STRING . NAME ::: 769
( NAME + NAME ( NAME ::: 769
( NAME is not None ) ::: 768
= NUMBER , NUMBER , NUMBER ::: 768
break NEWLINE DEDENT DEDENT NAME . ::: 768
+= NAME ( NAME , NAME ::: 768
[ STRING ] = STRING . ::: 768
NUMBER ) ] NEWLINE DEDENT EOS ::: 768
NEWLINE return NAME . NAME , ::: 768
NAME [ ( NAME , NAME ::: 768
STRING , } ) NEWLINE NAME ::: 768
, NAME ) NEWLINE def NAME ::: 768
NUMBER NEWLINE DEDENT NAME += NUMBER ::: 768
. NAME == STRING NEWLINE NAME ::: 768
NAME = STRING ) ] ) ::: 768
) [ : : - NUMBER ::: 768
NEWLINE DEDENT return [ ] NEWLINE ::: 768
return NAME ( NAME [ NAME ::: 767
( NUMBER , NAME = NUMBER ::: 767
return NAME * NAME NEWLINE DEDENT ::: 767
NEWLINE INDENT return [ STRING ] ::: 767
( NAME - NUMBER ) + ::: 767
NAME [ NUMBER ] + NUMBER ::: 767
{ NAME : NAME } ) ::: 767
( NAME == NAME . NAME ::: 767
NAME = NUMBER NEWLINE with NAME ::: 767
NAME = [ ] NEWLINE try ::: 767
None NEWLINE NAME . NAME [ ::: 767
in NAME . NAME NEWLINE NAME ::: 767
STRING ) NEWLINE DEDENT import NAME ::: 767
STRING , NUMBER ) NEWLINE if ::: 766
NEWLINE return False NEWLINE DEDENT NAME ::: 766
STRING NEWLINE assert NAME [ STRING ::: 766
NEWLINE INDENT NAME = STRING if ::: 766
+ STRING , STRING ) as ::: 766
( NUMBER ) NEWLINE DEDENT def ::: 766
) NEWLINE assert NAME ( STRING ::: 765
+= NAME NEWLINE DEDENT DEDENT return ::: 765
DEDENT return None NEWLINE DEDENT DEDENT ::: 765
[ NAME ] == NAME [ ::: 765
raise NEWLINE DEDENT DEDENT DEDENT EOS ::: 765
= False ) . NAME ( ::: 765
True NEWLINE DEDENT DEDENT DEDENT return ::: 765
- NUMBER ] NEWLINE if NAME ::: 765
* NEWLINE from . import NAME ::: 765
STRING , NAME ) , ) ::: 765
( NAME ( NAME ) * ::: 764
NAME . NAME if NAME else ::: 764
= lambda NAME : NAME NEWLINE ::: 764
NEWLINE DEDENT elif NAME > NAME ::: 764
BOS NEWLINE import NAME NEWLINE for ::: 764
NAME + NUMBER ] ) NEWLINE ::: 764
NAME = [ STRING . NAME ::: 764
-> NAME : NEWLINE INDENT return ::: 764
NAME ( STRING , [ ( ::: 764
NAME , } NEWLINE NAME . ::: 764
NAME ] NEWLINE if NAME : ::: 764
] += NUMBER NEWLINE DEDENT DEDENT ::: 764
NUMBER , STRING , NUMBER ) ::: 764
, STRING , NAME ] NEWLINE ::: 763
= NAME [ NUMBER : NAME ::: 763
NUMBER ) ) NEWLINE if NAME ::: 763
NEWLINE DEDENT if NAME and NAME ::: 763
NAME = True NEWLINE DEDENT if ::: 763
, ( NAME . NAME ( ::: 763
) and NAME ( NAME . ::: 762
NEWLINE INDENT import NAME NEWLINE if ::: 762
( STRING ) + STRING NEWLINE ::: 762
NUMBER ] NEWLINE NAME , NAME ::: 762
+ NAME NEWLINE NAME = STRING ::: 762
NEWLINE NAME = STRING STRING STRING ::: 762
* NUMBER NEWLINE NAME = NUMBER ::: 761
( NAME ) ] NEWLINE return ::: 761
== NAME . NAME ( STRING ::: 761
( STRING ) ( ) ) ::: 760
NAME ( STRING STRING ) ) ::: 760
[ STRING ] == NUMBER NEWLINE ::: 760
: STRING , } , } ::: 760
: NEWLINE INDENT NAME -= NAME ::: 760
NAME ] ) NEWLINE DEDENT except ::: 760
INDENT NAME = NAME / NAME ::: 760
NAME ( ) NEWLINE @ NAME ::: 760
NUMBER ] ] = NAME [ ::: 760
if not NAME . NAME or ::: 759
STRING ] [ STRING ] : ::: 759
} ) NEWLINE DEDENT else : ::: 759
NUMBER ) == NUMBER NEWLINE assert ::: 759
. NAME , ** NAME . ::: 759
, { } , STRING ) ::: 759
NAME [ STRING ] ) == ::: 759
if NAME . NAME else NAME ::: 759
STRING ) and NAME ( NAME ::: 759
if NAME == NUMBER or NAME ::: 759
STRING % NAME NEWLINE DEDENT NAME ::: 759
, } NEWLINE return NAME ( ::: 759
and NAME != STRING : NEWLINE ::: 759
STRING NEWLINE DEDENT NAME += STRING ::: 758
NAME . NAME NEWLINE with NAME ::: 758
, [ NAME . NAME , ::: 758
( NAME * NAME ) ) ::: 758
NAME , NAME in NAME [ ::: 757
= { } NEWLINE with NAME ::: 757
NAME , STRING : NAME [ ::: 757
NEWLINE DEDENT DEDENT return STRING NEWLINE ::: 757
or NAME : NEWLINE INDENT NAME ::: 757
( ) NEWLINE return [ NAME ::: 757
] , NAME [ NAME + ::: 757
+ NAME for NAME in NAME ::: 757
NAME . NAME ) ; NEWLINE ::: 757
= NAME ) NEWLINE NAME , ::: 757
[ STRING ] } NEWLINE DEDENT ::: 756
( STRING ) NEWLINE assert STRING ::: 756
. NAME [ NAME [ NUMBER ::: 756
, [ STRING ] , [ ::: 756
def NAME ( NAME = True ::: 756
[ NAME ] . NAME = ::: 755
NAME = { } NEWLINE with ::: 755
: NUMBER ] , NAME [ ::: 755
( NAME ) ) NEWLINE with ::: 755
NAME ) ; NEWLINE NAME = ::: 755
NAME NEWLINE DEDENT NAME += NUMBER ::: 755
= NAME ( STRING % ( ::: 755
INDENT import NAME NEWLINE return NAME ::: 755
NAME , NAME ( NAME [ ::: 755
if NAME < NAME . NAME ::: 755
( * NAME , NAME = ::: 754
( STRING , STRING ) + ::: 754
[ NAME ] = { } ::: 754
NEWLINE NAME += STRING NEWLINE return ::: 754
NUMBER ] NEWLINE DEDENT if NAME ::: 754
NEWLINE for NAME in ( NAME ::: 754
== STRING ) NEWLINE DEDENT EOS ::: 754
NAME . NAME is None or ::: 753
assert ( NAME ( NAME ) ::: 753
{ } NEWLINE NAME = NUMBER ::: 753
NAME . NAME ( STRING * ::: 753
) + STRING + NAME + ::: 753
) , ( STRING , [ ::: 753
. NAME + NAME ( NAME ::: 753
return False NEWLINE DEDENT if not ::: 753
NUMBER ) , STRING : ( ::: 753
( NAME ) } NEWLINE DEDENT ::: 753
STRING : NAME , } , ::: 753
- NUMBER * NAME . NAME ::: 753
NAME . NAME ( NUMBER + ::: 753
: , NUMBER ] , NAME ::: 753
, STRING , NAME = { ::: 752
, [ NAME , NAME , ::: 752
. NAME = NAME + STRING ::: 752
NUMBER ] * NAME . NAME ::: 752
= NAME . NAME NEWLINE @ ::: 752
NAME = False ) NEWLINE if ::: 752
INDENT import NAME NEWLINE DEDENT import ::: 752